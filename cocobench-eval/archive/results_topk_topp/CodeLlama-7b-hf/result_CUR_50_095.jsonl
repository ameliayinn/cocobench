{"task_id": "cpp/0", "content": "\nExample 1:\n\nInput: input_string = \"aabcbc\"\nOutput: \"aabc\"\nExplanation: The result string should be the first non-empty string containing only unique letters.\n\"aabcbc\" contains \"a\", \"b\", \"c\". However, the string \"aabc\" contains only unique letters, and since it appears at the end of input string, it is the correct answer.\nExample 2:\n\nInput: input_string = \"abcabc\"\nOutput: \"abc\"\nExplanation: There are several possible results. For example, \"abc\" and \"cba\" are also correct.\nHowever, according to requirement 2, \"abc\" is the only correct answer.\nThe string \"abc\" is the first non-empty string in input_string containing only unique letters.\nExample 3:\n\nInput: input_string = \"aaaa\"\nOutput: \"\"\nExplanation: There are no strings containing only unique letters in input_string.\nExample 4:\n\nInput: input_string = \"abc\"\nOutput: \"c\"\nExplanation: The result string should be the first non-empty string containing only unique letters.\n\"a\" contains only unique letters, but it is not the first string containing only unique letters in input_string, so it cannot be the correct answer.\nIn \"abc\", only \"c\" contains only unique letters, so it is the correct answer.\n \n\nConstraints:\n\n1 <= input_string.length <= 1000\ninput_string consists of lowercase letters.\n'''\n#Difficulty: Easy\n#51 / 51 test cases passed.\n#Runtime: 156 ms\n#Memory Usage: 14.4 MB\n\n#Runtime: 156 ms, faster than 44.26% of Python3 online submissions for The Last Non-Unique Character in a String.\n#Memory Usage: 14.4 MB, less than 6.75% of Python3 online submissions for The Last Non-Unique Character in a String.\n\nclass Solution:\n    def lastNonEmptyString(self, input_string: str) -> str:\n        string = list(dict.fromkeys(input_string))\n        return '", "groundtruth": {"s": "aabcbbca"}}
{"task_id": "cpp/1", "content": "\nNote:\n\n1 < nums.length <= 10^5\n-10^6 <= nums[i] <= 10^6\n\n\n\n\nclass Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int n = nums.size();\n        int ans = 0;\n        for(int i = 0;i<n;++i){\n            for(int j = n-1;j>i;--j){\n                if(nums[i] + nums[j] == nums[i+1]){\n                    ++ans;\n                   ", "groundtruth": {"nums": [3, 2, 6, 1, 4]}}
{"task_id": "cpp/2", "content": "\n\n\nclass Solution {\npublic:\n    int ans = 0;\n    int dp[1000005];\n    int maxSelectedElements(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        for(int i = 1; i <= nums.size(); i++){\n            dp[nums[i-1]+1] = max(1, dp[nums[i-1]]+1);\n            dp[nums[i-1]] = max(1, dp[nums[i-1]-1]+1);\n            ans = max(ans, dp[nums[i-1]]);\n            ans = max(ans, dp[nums[i-1]+1]);\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Example 1:\n\n// Input: nums = [2,2,3,3,3,4]\n// Output: 5\n// Explanation:\n// One optimal solution is to select the following elements:\n// 2, 3, 3, 4, 5.\n\n\n\n\n\n\n\nclass Solution {\npublic:\n    int ans = 0;\n    int dp[1000005];\n    int maxSelectedElements(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        for(int i = 1; i <= nums.size(); i++){\n            dp[nums[i-1]+1] = max(1, dp[nums[i-1]]+1);\n            dp[nums[i-1]] = max(1, dp[nums[i-1]-1]+1);\n            ans = max(ans, dp[nums[i-1]]);\n            ans = max(ans, dp[nums[i-1]+1]);\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n// Input: nums = [2,2,3,3,3,4]\n// Output: 5\n// Ex", "groundtruth": {"nums": [1, 4, 7, 10]}}
{"task_id": "cpp/3", "content": "Note:\n\nThe number of words in both vector<int> will be between 1 and 10000.\nThe number of integers in a word will be between 1 and 10.\n\n\n\n\n\n\n\n\nclass Solution {\npublic:\n    void findCommon(Trie *curr, string s, int k){\n        int sz=s.size();\n        while(sz>0){\n            if(curr->next[sz-1]!=NULL){\n                sz--;\n                curr=curr->next[sz-1];\n                k++;\n            }\n            else\n                return;\n        }\n        res=max(res, k);\n    }\n    \n    int longestCommonPrefix(vector<int>& a, vector<int>& b) {\n        Trie *trie=new Trie();\n        for(int i=0;i<a.size();i++){\n            int x=a[i];\n            stringstream ss;\n            ss<<x;\n            string s=ss.str();\n            trie->insert(s);\n        }\n        \n        res=0;\n        for(int i=0;i<b.size();i++){\n            int x=b[i];\n            stringstream ss;\n            ss<<x;\n            string s=ss.str();\n            findCommon(trie,s,0);\n        }\n        return res;\n    }\n};\n\n\nclass Solution {\npublic:\n    int longestCommonPrefix(vector<int>& a, vector<int>& b) {\n        Trie *trie = new Trie();\n        for (auto& x: a) {\n            stringstream ss;\n            ss << x;\n            string s = ss.str();\n            trie->insert(s);\n        }\n        \n        int res = 0;\n        for (auto& x: b) {\n            stringstream ss;\n            ss << x;\n            string s = ss.str();\n            \n            if (trie->commonPrefix(s) > res)\n                res = trie->commonPrefix(s);\n        }\n        return res;\n    }\n};\n\n\nclass Solution {\npublic:\n    int longestCommon", "groundtruth": {"arr1": [1, 10, 100], "arr2": [1000]}}
{"task_id": "cpp/4", "content": "\nEXPLANATION:\nThere are three elements in the vector of words: abcd, abba, and aba. Note that abcd and abba are sorted in lexicographical order whereas aba is not.\n\n\n\n\nGiven vector of strings:\n\nwords = {\"abba\", \"abca\", \"aba\"}\nThe list of pairs (p, q) forms a list of all pairs of indices of the words where there are prefixes and/or suffixes.\n\nThe answer is 2, as there are 2 pairs of indices for which the words are prefixes and suffixes at the same time: (0, 2) and (1, 0).\n\n// Given words = [\"aba\", \"ab\", \"ba\"], return 3.\n \n\n// Given words = [\"abab\", \"ab\", \"ba\"], return 2.\n \n\n// Given words = [\"abc\", \"dbe\", \"efg\"], return 0.\n \n\n//  Constraints:\n\n// 1 <= words.length <= 10000\n// 1 <= words[i].length <= 10000\n// words[i] consists of lowercase English letters.\n \n\n//  Related Topics Array Sliding Window\n\n// 👍 517 👎 415\n\n\n// leetcode submit region begin(Prohibit modification and deletion)\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n\n    int isPrefixAndSuffix(string str1,string str2){\n        \n        if(str1.size()<=str2.size()){\n            int j=0,i=0;\n            while(i<str1.size()){ //&& j<str2.size()){\n                cout<< \"First while  str1[i] \" <<str1[i]<< \" str2[j] \" <<str2[j]<< endl;\n                if(str1[i++]!=str2[j++])\n                    return 0;\n                 if(i==str1.size())break;\n            }\n            \n            i=str1.size()-1;j=", "groundtruth": {"words": ["pa", "papa", "ma", "mama"]}}
{"task_id": "cpp/5", "content": "\nIn this question, assume that the `sieve` function will sieve the first 1000000 numbers and store it in the `prime` array. If you are not able to deduce the input of the code, then you should write your code as a normal code first and then make deductions from the output.\n\n<br>\n<br>\n\n### Question 5.\nWrite a program which reads a string as input. Let A be the number of different characters in that string. If the string length is more than A, then the program should print out the string again with the letters removed which occur less than A times. If two or more letters occur the same number of times then the order of the letter which is to be printed first must be specified alphabetically (see the below given example).\n\nExample:\n\n```\nInput: AABA\nOutput: ABA\n```\nNote: The program must be able to handle very long strings (100,000 characters)\n\n<br>\n<br>\n\n### Question 6.\nWrite a program in java to check whether a given integer is prime or not?\n\nPlease write all your code for this question.\n\n<br>\n<br>\n\n### Question 7.\nWrite a program in java to find the maximum sum of all subarrays from an array of integer of size 10000.\nThe program must run for a 10000 x 10000 matrix of size 1000000 x 1000000\n\n<br>\n<br>\n\n### Question 8.\nWrite a program in java which will implement a stack. Push and Pop operations are available in this stack.\n\nAdditionally, your stack must have a method to print the last n elements in the stack.\n\nAlso, for each push operation your program must return the number of elements in the stack\n\nExample:\n\nInput\n5\nPush 1\nPop\nPush 2\nPush 3\nPush 4\nPush 5\nPush 6\nPush 7\nPush 8\nPush 9\nPush 10\nPop\nPop\nPop\nPop\nPop\nPop\nPrint\n\nOutput\n1 2 3 4 5 6 ", "groundtruth": {"mat": [[9, 7, 8], [4, 6, 5], [2, 8, 6]]}}
{"task_id": "cpp/6", "content": "\n\n-------------------------------------------------\nSample Input\n    [[\"abcd\"],[\"dcba\"],[\"lls\"],[\"s\"],[\"sssll\"]]\n\nSample Output\n    2\n'''\n\n\nclass Solution {\npublic:\n    \n    long long countPrefixSuffixPairs(vector<string>& words) {\n        map<string,int> mp;\n        int n=words.size();\n        long long ans=0;\n        for(int i=0 ; i<n  ; i++){\n            string s=words[i];\n            string w1=\"\";\n            string w2=\"\";\n            for(int j=0 ; j<words[i].size() ; j++){\n                w1+=words[i][j];\n                w2+=words[i][words[i].size()-1-j];\n                if(mp.count(w1)){\n                    string r=w2;\n                    reverse(r.begin(),r.end());\n                    if(r==w1){\n                        ans+=mp[w1];\n                    }\n                }\n            }\n            mp[s]++;\n        }\n        return ans;\n    }\n};\n\n\n'''\n\n\n'''\nQuestion \n\n\nGiven a string, you need to reverse the string while making sure of two conditions. \nFirst of all, each individual character in the string should not be reversed. \nSecondly, adjacent characters should also not be reversed. More formally, we need to make sure that the ith and jth characters in s were not the jth and ith characters in reversed s.\n\nIf both the conditions are satisfied for a pair of adjacent characters (l,r) where 0 <= l < r < s.length, then we say that a character l is protected. Otherwise, this character is unprotected.\n\nGiven a string, return the number of protected characters.\n\n \n\nExample 1:\n\nInput: s = \"ABCD\"\nOutput: 2\nExplanation: Both characters in \"CD\" are protected.\nExample 2:\n\nInput: s = \"AABAA\"\nOutput: 2\nExplanation: In the first pair of characters, both \"A\"s are protected. In the", "groundtruth": {"words": ["pa", "papa", "ma", "mama"]}}
{"task_id": "cpp/7", "content": "\nExplanation\nGiven a triangle with 3 vertices as follows:\n```\nA(0,0)\nB(5,0)\nC(5,5)\n```\nand another triangle with 3 vertices as follows:\n```\nA'(1,0)\nB'(5,1)\nC'(6,5)\n```\nThese two triangles intersect with each other only in one point which is C. \n\nTherefore, the largest square that can be obtained by a rotation of A' is a square with bottom left and top right corners at A' and C respectively, \n", "groundtruth": {"bottomLeft": [[1, 1], [2, 2], [1, 2]], "topRight": [[3, 3], [4, 4], [3, 4]]}}
{"task_id": "cpp/8", "content": "\nThe code snippets should take the input from stdin and return only the deduced input.\n\nExpected Output\nIf more than one input can generate the same output, give one of the inputs.\n\nInput 1\n0\n1\nInput 2\n3\n3\n4\nInput 3\n1\n1\n2\nInput 4\n5\n2\n3\n4\n5\nInput 5\n100\n1 4 7 10 15\nInput 6\n10\n1 4 7 10 15\n1\n1\n2\nInput 7\n0\nInput 8\n6\n4\nInput 9\n6\n4\n4\n1\n1\n4\nInput 10\n10\n1 4 7 10 15\n1\n1\n2\nInput 11\n5\n2\n3\n4\n5\nInput 12\n3\n0\n1\n2\nInput 13\n10\n2\n3\n4\n5\n6\n7\n8\n9\n10\nInput 14\n12\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nInput 15\n6\n1 3 4 5 7 10\n\nSample Input\n0\n2\n2\nSample Output\n0\nExplanation\nThe only input that generates the output 0 is 0.\n\nThe only input that generates the output 2 is 2.\n```\n# **Code:**\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findTheNum(string s) {\n        int res = 0, x = 0, i = 0, n = s.size();\n        while (i < n) {\n            if (s[i] == 'E') {\n                if (s[i + 1] == 'S') {\n                    x++;\n                }\n                res += x;\n            }\n            ++i;\n        }\n        return res;\n    }\n    int minSwapsToArrange(string expression) {\n        int n = expression.", "groundtruth": {"nums": [1, 3], "changeIndices": [1, 1, 1, 2, 1, 1, 1]}}
{"task_id": "cpp/9", "content": "\n\n#include <cstdint>\n#include <set>\n#include <map>\n#include <vector>\n#include <queue>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <cmath>\n#include <cassert>\n#include <stack>\n#include <unordered_map>\n#include <iomanip>\nusing namespace std;\n\npair<int, int> merge(int x, int y) {\n    return (x < y) ? make_pair(x, y) : make_pair(y, x);\n}\n\nclass Solution {\n    int cnt[201][201];\n\n    void dfs(int u, int c, int d) {\n        if (u > d) {\n            return;\n        }\n        pair<int, int> key = merge(u, c);\n        if (cnt[key.first][key.second] > 0) {\n            cnt[key.first][key.second]--;\n            dfs(u + 1, c + 1, d);\n            cnt[key.first][key.second]++;\n        } else {\n            cnt[key.first][key.second]--;\n            dfs(u, c + 1, d);\n            cnt[key.first][key.second]++;\n            dfs(u + 1, c, d);\n            cnt[key.first][key.second]++;\n        }\n    }\n\n    bool check(int u, int c, int d, int maxsum) {\n        if (u > d) {\n            return true;\n        }\n        pair<int, int> key = merge(u, c);\n        if (cnt[key.first][key.second] > 0) {\n            cnt[key.first][key.second]--;\n            if (check(u + 1, c + 1, d, maxsum)) {\n                return true;\n            }\n            cnt[key.first][key.second]++;\n        } else {\n            cnt[key.first][key.second]--;\n           ", "groundtruth": {"nums": [0, 0, 1, 2], "changeIndices": [1, 2, 1, 2, 1, 2, 1, 2]}}
{"task_id": "cpp/10", "content": "\nInput Format\n\nThe first line contains a single integer N.\nEach of the next N lines contains a single string consisting of binary characters only ('0' or '1'). Each string represents the binary number of a matrix.\nThe next line contains a single integer K.\n\nConstraints:\n\n1 <= N <= 10^5\n1 <= the number of elements in a row <= 10^5\nthe sum of the number of elements in each row is <= 10^5\n1 <= K <= 10^9\nthe number of each element is either 0 or 1\n\nOutput Format\n\nPrint only one integer representing the deduced input of the code snippet. Do not output any additional information.\n\nSample Input 0\n\n5\n00111\n00111\n01111\n11111\n0\nSample Output 0\n\n6\n\nThe deduced input is as follows.\nThe initial matrix is as follows.\n\n0 0 1 1 1 \n0 0 1 1 1 \n0 1 1 1 1 \n1 1 1 1 1 \n0\n", "groundtruth": {"grid": [[7, 2, 9], [1, 5, 0], [2, 6, 6]], "k": 20}}
{"task_id": "cpp/11", "content": "\nInput Format \nA single line denoting N, the size of the array. \nA 2D array of N rows and N columns (space separated values).\n\nOutput Format \nThe minimum number of operations required to get an output string \"Y\".\n\nConstraints \n1<= N <=100 \n\nSample Input\n4\n0 1 0 1\n0 1 1 1\n1 1 1 0\n1 0 0 0\n\nSample Output\n12 \n\nExplanation \nThe above sample input results into the following output image. \n\n![](https://user-images.githubusercontent.com/14397291/29678306-711eb8e8-8929-11e7-85e5-7b09f9675900.png)\n\nIn the above image, 1 represents the array values.\n0 represents a blank space.\nWe have to print only Ys.\nFrom the above image, it can be seen that the string output is \"Y\".\nTherefore, the minimum number of operations is 12.\n\"\"\"\n\nclass Solution {\npublic:\n    void fill(vector<vector<int>>&vis,vector<vector<int>>& v) {\n        int n=v.size();\n        int i=0,j=0;\n        while(i<=n/2) {\n            vis[i][j]=1;\n            i++;\n            j++;\n        }\n        i=0,j=n-1;\n        while(i<n/2) {\n            vis[i][j]=1;\n            i++;\n            j--;\n        }\n        i=n/2+1;j=n/2;\n        while(i<n) {\n            vis[i][j]=1;\n            i++;\n        }\n    }\n    int minimumOperationsToWriteY(vector<vector<int>>& v) {\n        int n=v.size();\n        vector<vector<int>>vis(n,vector<int>(n,0));\n        fill(vis,v);\n        int c0=0,c1", "groundtruth": {"grid": [[0, 1, 0, 1, 0], [2, 1, 0, 1, 2], [2, 2, 2, 0, 1], [2, 2, 2, 2, 2], [2, 1, 2, 2, 2]]}}
{"task_id": "cpp/12", "content": "\n**Example 1**\n\nInput:\n```\nnums = [3,1,5,7,2]\nOutput:\n[1,3,2,5,7]\n```\n**Example 2**\n\nInput:\n```\nnums = [2,2,3,1,7,6]\nOutput:\n[1,2,3,2,6,7]\n```\n**Example 3**\n\nInput:\n```\nnums = [4,2,4,1,2,5,3,6,3,6,2]\nOutput:\n[1,2,3,2,4,5,6,4,6,3,2]\n```\n**Example 4**\n\nInput:\n```\nnums = [1,4,4,3,1,1,5,2,5,3,2,2,3,6,3,1,6,2,2,5,7,2,1,1,5,2,5,3,6,3,1,2,5,3,7,6,4,6,3,6,3,1,3,1,2,6,3,6,4,1,7,2,3,6,7,3,5,1,2,3,4,5,6,4,6,4,2,2,7,3,1,2,5,7,2,5,7,3,5,2,7,4,1,3,2,3,2,2,1,5,7,2,7,4,6,6,5,2,2,4,3,3,3,6,2,6,5,4,7,1,7,6,3,6,1,5,3,7,2,7,2,3,1,5,7,3,6,5,6,2,3,3,7,2,2,2,2,6,2,1,7,2,4,5,4,1,1,2,5,3,1,1,7,5,5,2,5,2,7,3,1,2,2,1,2,1,7,7", "groundtruth": {"nums": [5, 14, 3, 1, 2]}}
{"task_id": "cpp/13", "content": "\nSample Input 0\n\n1 5 3 7 1 5 3 7 1 5 3 7 1\n1\nSample Output 0\n\n30\nExplanation 0\n\nThe happ array is sorted in ascending order.\n\nhapp = [1, 1, 3, 3, 5, 5, 7, 7, 1, 1, 3, 3, 5, 5, 7, 7]\n\nTherefore,", "groundtruth": {"happiness": [1, 1, 1, 1], "k": 2}}
{"task_id": "cpp/14", "content": "\n\nProblem:\nGiven a list of strings where every string in the list is unique, for each string find the shortest substring of that string such that the substring is unique in the list of strings. Return an empty list if no such substring exists.\n\nFor example, given:\n\n\t\t[\"abcde\",\"sdcce\",\"abacde\"]\n\nYou should return:\n\n\t\t[\"\",\"\",\"abcd\"]\nNote that for a given string, there may be more than one shortest substring that is unique in the list of strings.\n\n\nInput/Output Format For Custom Testing\nInput is a list of strings where every string in the list is unique.\n\nOutput is the result list. Each result will contain a substring that is unique in the input list.\n\nFor example, you can use the following Python code:\n\ndef printSubstring(result):\n    n = len(result)\n    if (n == 0):\n        print(\"[]\")\n        return\n    for i in range(n - 1):\n        print(result[i], end=\" \")\n    print(result[n - 1], end=\"\")\n    print()\n\nIf you input:\n\n    [\"abcde\",\"sdcce\",\"abacde\"]\n\nYou will get:\n\n[\"\",\"\",\"abcd\"]\n \n\nExample case 1: \nInput: \n\t[\"ababab\",\"abcabc\",\"dcbdbc\",\"cbabab\"]\nOutput:\n\t[\"\",\"abc\",\"ab\",\"ab\"]\n\n\nExample case 2: \nInput: \n\t[\"ababab\",\"abcab\"]\nOutput:\n\t[\"\"]\n\n\nExample case 3: \nInput:\n\t[\"a\", \"aa\", \"aaaa\", \"b\", \"ba\", \"bb\", \"ccc\", \"cc\", \"dd\", \"ddd\"]\nOutput:\n\t[\"\",\"aa\",\"a\",\"a\",\"b\",\"c\",\"c\",\"d\",\"d\",\"d\"]\n\n\nExample case 4: \nInput:\n\t[\"dcd\",\"abc\",\"dab\",\"abdc\"]\nOutput:\n\t[\"dcd\",\"abc\",\"ab\",\"\"]\n\n\n\n\n \n\nNote: \nAll the strings consist of lowercase characters only.\nThe total number of strings is in the range of [1", "groundtruth": {"arr": ["abc", "bcd", "abcd"]}}
{"task_id": "cpp/15", "content": "\nExplanation:\nGiven n = 3 and k = 3 as the input for the code snippet, the output of the snippet is 64 which is the answer given in the problem statement.\n\nPlease note the deduced input should not be submitted to the OJ; it has been provided merely to help you deduce the final code.\n\nInput Format:\nThe first line contains an integer n, the number of subarrays.\nThe next line contains an integer k, the number of subarrays in each sum.\nThe next line contains n integers, the subarrays.\n\nConstraints:\n\n1 ≤ n ≤ 1000\n1 ≤ k ≤ 1000\n0 ≤ subarr_i ≤ 100\n\nOutput Format:\nPrint the deduced input in the code snippet above.\n\nSample Input 1:\n\n3\n3\n10 20 30\nSample Output 1:\n\n64\nSample Input 2:\n3\n2\n0 0 0\nSample Output 2:\n\n-16\n\n\n//C\nint n, k;\nvector<ll> a;\nll dp[10001][10001][2];\n\nclass Solution {\npublic:\n    ll rec(ll i, ll p, ll flag){\n        if(p==k) return 0;\n        if(i == n) return -1e16;\n        \n        if(dp[i][p][flag] != -1) return dp[i][p][flag];\n        ll ans=max(rec(i+1,p+1,0),rec(i+1,p,1))+(k-p)*((p%2)?-a[i]:a[i]);\n        if(!flag) \n            ans = max(ans, rec(i+1, p+1, 0));\n        if(flag) \n            ans = max(ans, rec(i, p+1, 0));\n            \n        return dp[i][p][flag] = ans;\n    }\n    \n    long long maximumStrength(vector<int>& nums, int k) {\n        n = nums.size(),", "groundtruth": {"nums": [12, -2, -2, -2, -2], "k": 5}}
{"task_id": "cpp/16", "content": "\nExplanation\n\nThe answer to the given testcase is\n \n 11\n4 5 9\nThe marked array will be  1 1 0 1 0 1 1 1 0 1 \n and the output will be 11,7 respectively\n\n\nProblem - C\n\nWe use the word 'consecutive' here to mean a subarray with no elements missing.\n\nGiven an array nums containing n distinct numbers in the range [0, n], and an integer k.\n \n Return the sum of all the elements that appear exactly k times in nums. \n \n Example\n Given nums = [1, 1, 1, 2, 3], k = 2\n the output should be\n sumOfAllElements(nums, k) = 4\n all elements that appear exactly 2 times are [1, 3], so the output is 1 + 3 = 4\n\n Input:\narray (nums): [1, 1, 1, 2, 3]\nint (k): 2\n\nOutput:\n4\n\n\n11 marks\nThe input arrays are:\nnums = [1, 1, 1, 2, 3], k = 2\nnums = [1, 2, 3, 1, 2, 3, 4], k = 3\n\nThere is no test case available.\nPlease use whatever arrays and values you'd like and answer the question that you feel is relevant.\n\n\n\nProblem - D\n\nGiven a sorted array of n distinct numbers and a target value t, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou may assume no duplicates in the array.\n\nHere are few examples.\nnums = [1, 3, 5, 6], t = 5,   Return 2.\nnums = [1, 3, 5, 6], t = 2,   Return 1.\nnums = [1, 3, 5, 6], t = 7,   Return 4.\nnums = [1, 3, 5, 6], t = 0,", "groundtruth": {"nums": [1, 4, 2, 3], "queries": [[0, 1]]}}
{"task_id": "cpp/17", "content": "\nThe output", "groundtruth": {"s": "a?a?"}}
{"task_id": "cpp/18", "content": "\nExplanation:\nThe number of ways to sum up [1,1] to 3 is 3 since there are 3 ways to achieve: 1 + 1, 1 + 1 + 1, 1 + 1 + 1 + 1. The number of ways to sum up [1,2] to 3 is 2 since there are only 2 ways to achieve: 1 + 1 + 1, 1 + 1 + 1 + 1.\nNote:\n1 <= k <= 1000000000\n1 <= nums[i] <= 1000000000\n1 <= len <= 100\n*/\n\n\nclass Solution {\nprivate:\n    int mod = 1e9 + 7;\n    int power(int a,int b){\n        int res = 1;\n        while(b){\n            if(b&1) res = (res * a) % mod;\n            a = (a * a) % mod;\n            b >>= 1;\n        }\n        return res;\n    }\npublic:\n    int sumOfPower(vector<int>& nums, int k){\n        int n = nums.size();\n        vector<vector<long long>> dp(n+1,vector<long long>(k+1,0));\n        dp[0][0] = 1;\n        for(int pos = 1 ; pos <= n ; pos++){\n            for(int len = pos ; len >= 1 ; len--){\n                for(int sum = nums[pos-1] ; sum <= k ; sum++){\n                    dp[len][sum] = (dp[len][sum] + dp[len-1][sum-nums[pos-1]] ) % mod;\n                }\n            }\n        }\n        long long ans = 0;\n        for(int len = 1 ; len <= n ; len++) ans = (ans + dp[len][k] * power(2,n-len)) % mod;\n        return ans;\n    }\n};\n\n\n// 下面是比较笨的逐位求和 6ms\n", "groundtruth": {"nums": [1, 2, 3], "k": 3}}
{"task_id": "cpp/19", "content": "\n\n\n\n\nInput Format\n\nThe first line contains the character c.\nThe second line contains the string s.\n\nConstraints\n\n1 <= |s| <= 10^5\n\nOutput Format\n\nPrint the input to the countSubstrings method of the class Solution.\n\nSample Input\n\na\naaabaa\nSample Output\n\n2\nExplanation\n\nCount of occurrences of c in s is 2. The two substrings of s are aa and baa. Hence, the output is 2.\n", "groundtruth": {"s": "zzz", "c": "z"}}
{"task_id": "cpp/20", "content": "'''\n\nclass Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:\n        cnt = [0]*26\n        for ch in word:\n            cnt[ord(ch) - ord('a')] += 1\n\n        cnt.sort(reverse=True)\n        ans = 1e9\n        startDel = 0\n        for i in range(26):\n            curDel = startDel\n            topLimit = cnt[i] + k\n            for j in range(i + 1, 26):\n                if topLimit < cnt[j]:\n                    curDel += cnt[j] - topLimit\n            ans = min(ans, curDel)\n            startDel += cnt[i]\n        return ans\n# @lc code=end\n\n\n\n# for i in range(3):\n#     if i == 0:\n#         ans = [1]\n#     else:\n#         cnt.sort(reverse=True)\n#         ans = []\n#         ans.append(1)\n#         startDel = 0\n#         print(startDel, cnt, ans)\n#         for i in range(3):\n#             curDel = startDel\n#             topLimit = cnt[i] + k\n#             for j in range(3):\n#                 if i != j and topLimit < cnt[j]:\n#                     curDel += cnt[j] - topLimit\n#             ans.append(curDel)\n#             startDel += cnt[i]\n#             print(startDel, cnt, ans)\n#         print(ans)\n#     break\n# if i == 0:\n#     ans = [1]\n# else:\n#     print(i)\n#     cnt.sort(reverse=True)\n#     ans = []\n#     ans.append(1)\n#     startDel = 0\n#     for i in range(len(cnt)):\n#         curDel = startDel\n#         topLimit = cnt[i] + k\n#         for j in range(len(cnt)):\n#             if i != j and topLimit < cnt[", "groundtruth": {"word": "dabdcbdcdcd", "k": 2}}
{"task_id": "numpy/0", "content": "Note: The input can be a string, list, dictionary, etc. and the elements can also be of any data types.\n\nFor example, if the code is:\ndef a():\n    a=3\n    b=a+3\n    b=b/3\n    return b\nThe deduced input can be:\n3\nFor example, if the code is:\ndef a():\n    n = [1,2,3,4,5]\n    m = [2,4,6]\n    for i in range(3):\n        k = 0\n        j = 0\n        m[i] = n[i] + n[i+1] + m[i]\n        print(m)\n    return m\nThe deduced input can be:\n[1, 3, 5]\n\n```py\nimport numpy as np\n\n\ndef reshape_and_transpose(arr):\n    reshaped_arr = np.reshape(arr, (3, 2))\n    transposed_arr = np.transpose(reshaped_arr)\n    return transposed_arr\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(reshape_and_transpose(arr))\n```\n## Solutions\n\n```\n1.\ndef reshape_and_transpose(arr):\n    reshaped_arr = np.reshape(arr, (3, 2))\n    transposed_arr = np.transpose(reshaped_arr)\n    return transposed_arr\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(reshape_and_transpose(arr))\n\nSolution 1:\n2.\ndef a():\n    a=3\n    b=a+3\n    b=b/3\n    return b\n\nif __name__ == \"__main__\":\n    print(a())\n\nSolution 2:\n3.\ndef a():\n    n = [1,2,3,4,5]\n    m = [2,4,6]", "groundtruth": [1, 2, 3, 4, 5, 6]}
{"task_id": "numpy/1", "content": "\n\n### Solution\n\n```python\nimport numpy as np\n\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\n\nprint(stack_and_split([[1, 3], [5, 7]], [[2, 4], [6, 8]]))\n```\n#### Output\n\n```\n([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n```\n\n#### Explanation\n\nThe expected output is `([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])`. So, we just", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/2", "content": "\"\"\"\nimport numpy as np\n\ndef expand_transpose_squeeze(arr):\n    expanded_arr = np.expand_dims(arr, axis=0)\n    transposed_arr = np.transpose(expanded_arr, (0, 2, 1, 3))\n    squeezed_arr = np.squeeze(transposed_arr)\n    return squeezed_arr\n\na = np.array([[1, 2], [3, 4]])\nprint(expand_transpose_squeeze(a))\n\n\n\n\n", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/4", "content": "'''\nimport numpy as np\n\ndef concat_and_product(arr1, arr2):\n    combined_arr = np.vstack((arr1, arr2))\n    product = np.prod(combined_arr)\n    return product\nprint(concat_and_product([[1, 2, 3], [3, 4, 5]], [[5, 6, 7], [7, 8, 9]]))\n'''\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef plot_points_seaborn(csv_path, column_x='X', column_y='Y', color='black'):\n    df = pd.read_csv(csv_path)\n    if color == 'grey':\n        sns.scatterplot(x=column_x, y=column_y, data=df, palette='Greys')\n    else:\n        sns.scatterplot(x=column_x, y=column_y, data=df, color=color)\n    plt.show()\n    plt.close()\n\n\nif __name__ == \"__main__\":\n    data_path = 'data_plot_points_seaborn/cities_for_plot_points_seaborn.csv'\n    plot_points_seaborn(csv_path=data_path, color='black')\n    plot_points_seaborn(csv_path=data_path, color='grey')\n    print('__main__')\n\n'''\nAssume you have following code snippet:\nimport numpy as np\n\ndef my_func():\n    print(0)\n\nif __name__ == \"__main__\":\n    my_func()\nprint(1)\nprint(2)\n\nThe output is:\n0\n1\n2\nWrite the print statements in order to print 0 first followed by 1 followed by 2.\n'''\n\nimport numpy as np\n\n\ndef my_func():\n    print(0)\n\n\nif __name__ == \"__main__\":\n    my_func()\n\n\nprint(1)\nprint(2)\n\n'''\nWrite the function", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/5", "content": "\n\n### Deduced Code\n\n\n```python\nimport numpy as np\n\ndef create_exp_rounded(start, stop, num):\n    lin_arr = np.linspace(start, stop, num)\n    exp_arr = np.exp(lin_arr)\n    rounded_arr = np.round(exp_arr, 2)\n    return rounded_arr\n```\n\n\n### Deduced Input\n\n\n```python\ncreate_exp_rounded(-100, 0.5, 5)\n```\n\n\n\n\n    array([0.9998, 1.4688, 1.8849, 2.3359, 2.6778])\n\n\n\n# Problem 2.4\n### The following function is to find the maximum value among the values of a variable.\n\nA variable containing all the values is passed to the function.\n\ndef maximum(values):\n\n# Deduce the input of the function\n    max_value = values[0]\n    for i in values:\n        if max_value < i:\n            max_value = i\n    return max_value\n\n### Deduce the input of the function\n\nGive only the deduced input of the function. Do not output any additional information.\n\n### Deduced Code\n\n\n```python\ndef maximum(values):\n    max_value = values[0]\n    for i in values:\n        if max_value < i:\n            max_value = i\n    return max_value\n```\n\n### Deduced Input\n\n\n```python\nmaximum([1,2,3,4,5])\n```\n\n\n\n\n    5\n\n\n\n# Problem 2.5\n### The following code snippet creates 2d array and then adds a layer. The following code is:\n\nimport numpy as np\n\ndef add_layer(arr, weights, bias):\n    new_array = np.add(np.dot(arr, weights.T), bias)\n    return new_array\nThe output of the code snippet is:\n\n\nThe 2d array is [[1,2],\n               [3,4],\n", "groundtruth": [0, 1, 5]}
{"task_id": "numpy/6", "content": "\nInput Format\n\nInput consists of an N x M grid, where N is the number of rows and M is the number of columns. Each element in the grid is a digit.\n\nConstraints\n\n\nEach grid element is a digit.\nN is an even number less than 21.\nM is an even number less than 21.\nOutput Format\n\nOutput is the deduced input of the code snippet as it is given above. The output does not contain the 'np' references, and there are no trailing spaces.\n\nSample Input 0\n\n[[1, 2], [3, 4], [5, 6]]\nSample Output 0\n\n[[1, 3, 5], [2, 4, 6]]\nExplanation 0\n\n1 2   \n3 4    \n5 6      \n\n1 3 5  \n2 4 6\nSamples for Output Format\n\nAll the grids in Sample Input 0 have the same structure.\n\n\n\n\nimport numpy as np\ndef reshape_and_transpose(arr):\n    reshaped_arr = np.reshape(arr, (3, 2))\n    transposed_arr = np.transpose(reshaped_arr)\n    return transposed_arr\narr = []\nN, M = map(int, input().split())\nfor _ in range(N):\n    tmp = list(map(int, input().split()))\n    arr.append(tmp)\n   ", "groundtruth": [1, 2, 3, 4, 5, 6]}
{"task_id": "numpy/7", "content": "\n'''\n\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\n\n'''\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\nprint(stack_and_split(arr1, arr2))\n'''\n\n'''\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\nThe output is:\n([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n'''\n\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\n\n'''\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\nprint(stack_and_split(arr1, arr2))\n'''\n\n'''\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\nThe output is:\n([", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/8", "content": "\nA) [[1, 2, 3, 4]]\nB) [[1, 2, 3, 4], [1, 2, 3, 4]]\nC) [[[1, 3], [3, 5]]]\nD) [[[1, 2, 4, 3], [5, 7, 9, 8]]]\n\n<Answer>\n\nA) [[1, 2, 3, 4]]\n</Answer>\n\n<Explanation>\n\nexpand_transpose_squeeze(np.array([[1, 2, 3, 4]])) will be:\n\n[[[1, 2], [3, 4]], [[2, 3], [4, 5]], [[3, 4], [5, 6]], [[4, 5], [6, 7]]]\n\nSo, np.transpose(expand_transpose_squeeze(np.array([[1, 2, 3, 4]]))) will be:\n\n[[[1, 3], [3, 5]], [[2, 4], [4, 6]], [[3, 5], [5, 7]], [[4, 6], [6, 8]]]\n\nSo, np.squeeze(np.transpose(expand_transpose_squeeze(np.array([[1, 2, 3, 4]])))) will be:\n\n[[[1, 3], [3, 5]], [[2, 4], [4, 6]], [[3, 5], [5, 7]], [[4, 6], [6, 8]]]\n\nWhich is of the form [[[1, 2, 4, 3], [5, 7, 9, 8]], which doesn’t match the output.\n\nSo the correct input is: [[1, 2, 3, 4]].\n</Explanation>\n", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/9", "content": "\nExample Input\ninputs = [1, 0, 0, 4]\noutputs = [5, -3, 25, 28]\nExample Output\n[1]\n\n'''\n\ndef combine_operations(arr1, arr2, arr3, constant):\n    result = np.add(arr1, arr2)\n    result = np.subtract(result, constant)\n    final_result = np.multiply(result, arr3)\n    return final_result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 2, 4, 1]\narr3 = [-1, -2, -3, -4]\nconstant = 5\n\nprint(combine_operations(arr1, arr2, arr3, constant))\n'''\n\n\n[[0, 1, 2, 3], \n[-3, -2, -1, 0], \n[-6, -8, -12, -16], \n[-2, -1, 0, 1], \n[-7, -5, 11, 15], \n[-8, -10, -16, -20], \n[-1, -2, -3, -4]]\n\n\n[[0, 0, 0, 0], \n[-1, -1, -1, -1], \n[-2, -2, -2, -2], \n[-3, -3, -3, -3], \n[-4, -4, -4, -4], \n[-5, -5, -5, -5], \n[-6, -6, -6, -6]]\n\n\n[[-1, -2, -3, -4], \n[-2, -4, -6, -8], \n[-3, -6, -9, -12], \n[-4, -8, -12, -16], \n[-5, -10, -15, -20], \n[-6, -12, -18, -24], \n[-7, -14, -21, -28]]\n\n", "groundtruth": [[2, 4, 6], [1, 3, 5], [7, 9, 11], 5]}
{"task_id": "numpy/10", "content": "\nOutput Format\n\nPrint the deduced input.\n\nSample Input 0\n\n-1\n0\nSample Output 0\n\n8\nExplanation 0\n\nThe powered_arr is calculated as [-1]^[0] = [1], np.sum([1]) = 1, which results in 8 as the output of the function. Thus, the deduced input is [-1, 0].\n\nSample Input 1\n\n-2\n3\n-4\n5\nSample Output 1\n\n168\nExplanation 1\n\nThe powered_arr is calculated as [-2]^[3] = [8], [-4]^[5] = [1024] and the function returns the sum of 8+1024 which gives us the output as 168.\n'''\n\n#Solution\n\nimport numpy as np\n\ndef power_sum(arr1, arr2):\n    powered_arr = np.power(arr1, arr2)\n    result_sum = np.sum(powered_arr)\n    return result_sum\nn = int(input())\na = [int(i) for i in input().strip().split()]\nfor i in range(n):\n    arr1 = a[i", "groundtruth": [[2, 3, 4], [1, 2, 3]]}
{"task_id": "numpy/11", "content": "\n# 考点：python函数，list，numpy，计算机图形学\n\n# 理解函数的基本概念和形式\n\n1. 每个函数在python中以def开头，以冒号结尾，圆括号中的是参数，冒号之后是代码块\n\n2. 函数定义之后什么也不做直接返回不影响程序的执行。\n\n3. 如果函数有返回值，在圆括号前执行即可\n\ndef sum(x,y):\n    return x+y\n\nsum(10,20)\n\n# 理解numpy，numpy是python中数组的高级库，用于科学计算\n\n1. numpy提供了大量方法来实现数组的操作，有顺序相关的有axis方法。\n\n2. 数组与列表相似，但是numpy列表存储的是元素类型相同的数据类型\n\n# 理解numpy函数和基础数学符号\n\nnumpy.sqrt(a):计算数组元素的平方根\n\nsqrt[a]:a的平方根\n\na.shape:返回数组a的shape元组\n\nb.reshape(-1, 4):reshape数组b，将矩阵的行数变为-1，列数变为4\n\nnumpy.linalg.inv(matrix):计算方阵（矩阵）的逆矩阵，如果没有逆矩阵返回信息\n\n# 理解函数的作用和返回值\n\n函数的占位符：\n\ndef fucntion_name(placeholders):\n    statements\n    return outputs\nfunction()\n\n# 理解numpy的数学函数\n\nnumpy.log(a):取", "groundtruth": [[2, 6], [4, 7]]}
{"task_id": "numpy/12", "content": "\"\"\"\nmatrix1 = np.array( [ [1, 2], [3, 4]] )\nmatrix2 = np.array( [[5, 6], [7, 8]] )\nmatrix3 = np.array( [[9, 10], [11, 12]] )\nsum_multiply_det( matrix1, matrix2, matrix3 )\n\n\n\n\"\"\"\nQuestion 7.\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = [0.01, 0.1, 1]\ny = [2, 4, 6]\nplt.plot(x, y, label=\"Data points\")\nplt.scatter(x, y, label=\"Data points\")\nplt.show()\nThe output is:\nA graph with two data points (0.01 and 2) and (0.1 and 4) with the legend \"Data points\" and the x-axis label as \"x\" and the y-axis label as \"y\".\nGive only the deduced input of the code snippet. Do not output any additional information.\n\"\"\"\nx = [0.01, 0.1, 1]\ny = [2, 4, 6]\nplt.plot(x, y, label=\"Data points\")\nplt.scatter(x, y, label=\"Data points\")\nplt.show()\n\n\n\n\"\"\"\nQuestion 8.\nGiven that the following variables are defined and initialized,\na = np.arange(0.1, 100, 10)\nb = np.arange(10, 101, 10)\nc = np.arange(20, 120, 10)\nd = np.arange(20, 121, 10)\nGive the output of the following program.\nfor x in [a, b]:\n    for y in [c, d]:\n        print(np.intersect1d(x,y))\n\"\"\"\nfor x in [a, b]:\n    for y", "groundtruth": [[[1, 2], [3, 4]], [[1, 0], [0, 1]], [[2, 0], [0, 2]]]}
{"task_id": "numpy/13", "content": "'''\n", "groundtruth": [9, 3, 5, 1, 8, 7]}
{"task_id": "numpy/14", "content": "\nAnswer the query.\n\n** \n\n", "groundtruth": [4, 8, 1, 7, 3, 9, 2]}
{"task_id": "numpy/15", "content": "The input has 8 elements. The elements are: 5, -2, 7, 4, 15, 11, 3, 5.\n\nimport numpy as np\n\ndef normalized_variance_and_extreme_median(arr):\n    normalized_arr = (arr - np.mean(arr)) / np.std(arr)\n    variance_val = np.var(normalized_arr)\n    extreme_median = np.median([np.max(arr), np.min(arr)])\n    return variance_val, extreme_median\nThe input has 8 elements. The elements are: 5, -2, 7, 4, 15, 11, 3, 5.\n\n(5.0, 10.0)\n\nThe code snippet is:\nimport numpy as np\n\ndef normalized_variance_and_extreme_median(arr):\n    normalized_arr = (arr - np.mean(arr)) / np.std(arr)\n    variance_val = np.var(normalized_arr)\n    extreme_median = np.median([np.max(arr), np.min(arr)])\n    return variance_val, extreme_median\nThe output is:\n(1.0, 15.0)\nGive only the deduced input of the code snippet. Do not output any additional information.\nThe input has 8 elements. The elements are: 5, -2, 7, 4, 15, 11, 3, 5.\n\nimport numpy as np\n\ndef normalized_variance_and_extreme_median(arr):\n    normalized_arr = (arr - np.mean(arr)) / np.std(arr)\n    variance_val = np.var(normalized_arr)\n    extreme_median = np.median([np.max(arr), np.min(arr)])\n    return variance_val, extreme_median\nThe input has 8 elements. The elements are: 5, -2, 7, 4, 15, 11, 3, 5.\n\n(5.0, ", "groundtruth": [5, 10, 15, 20, 25]}
{"task_id": "numpy/16", "content": "\n\n\nimport numpy as np\n\ndef filter_between(arr, min_val, max_val):\n    filtered_arr = arr[np.logical_and(arr > min_val, arr < max_val)]\n    return filtered_arr\n\n\nnp_arr = np.array([1, 2, 3, 4, 5])\nmin_val = 2\nmax_val = 4\nresult = filter_between(np_arr, min_val, max_val)\nprint(result)\n\n\n# Result\n\nnp_arr = np.array([1, 2, 3, 4, 5])\nmin_val = 2\nmax_val = 4\nfilter_between(np_arr, min_val, max_val)\nprint(np_arr)\n\n\n# Result\n\nnp_arr = np.array([1, 2, 3, 4, 5])\nmin_val = 2\nmax_val = 4\nfiltered_arr = np_arr[np.logical_and(np_arr > min_val, np_arr < max_val)]\nfilter_between(np_arr, min_val, max_val)\nprint(np_arr)\n\n\n# Result\n\nnp_arr = np.array([1, 2, 3, 4, 5])\nmin_val = 2\nmax_val = 4\nfiltered_arr = np_arr[np.logical_and(np_arr > min_val, np_arr < max_val)]\nfilter_between(np_arr, min_val, max_val)\nprint(filtered_arr)\n\n\n# Result\n\nnp_arr = np.array([1, 2, 3, 4, 5])\nmin_val = 2\nmax_val = 4\nfiltered_arr = np_arr[np.logical_and(np_arr > min_val, np_arr < max_val)]\nresult = filter_between(np_arr, min_val, max_val)\nfilter_between(np_arr, min_val, max_val)\nprint(np_arr)\n\n\n# Result", "groundtruth": [[1, 2, 3, 4, 5, 6], 2, 5]}
{"task_id": "numpy/17", "content": "The input should have the same dimensions.\n\nNote:\n\narr is a 1-D ndarray and all the input values are integers.\nThe input will not be", "groundtruth": [[3, 6, 1, 9, 3, 6], 4, 3, 9]}
{"task_id": "numpy/18", "content": "\nSample Input\n[1, 2, 3, 4, 1]\n1\n4\nSample Output\nTrue\nExplanation\nThe input of the function is [1, 2, 3, 4, 1] such that:\n\narr > cond_val1\narr < cond_val2\narr != cond_val1\nHence, the code snippet returns True.\n```\n### Solution\n\n``` python\n\na, c1, c2 = input().strip().split()\n\na = [int(i) for i in a.strip().split()]\n\na = np.array(a)\n\n# Use this function\ndef complex_logical_check(arr, cond_val1, cond_val2):\n    # Complex logic\n    condition = np.logical_not(np.logical_or(np.logical_and(arr > cond_val1, arr < cond_val2), arr == cond_val1))\n\n    # Output \n    result = np.any(condition)\n    return result\n\nresult = complex_logical_check(a, int(c1), int(c2))\nprint(result)\n\n```\n", "groundtruth": [[2, 4, 6, 8, 10], 4, 8]}
{"task_id": "numpy/19", "content": "'''\n\n#Answer 1\na = np.array([1.0,1.0,1.0,1.0,1.0,1.0])\nb = np.fft.fft(a)\nc = np.fft.ifft(b)\nd = np.abs(c)\n\n\n#Answer 2\na = np.array([2.0,3.0,4.0,5.0,6.0,7.0])\nb = np.fft.fft(a)\nc = np.fft.ifft(b)\nd = np.abs(c)\n\n\n#Answer 3\na = np.array([2.0,6.0,4.0,7.0,3.0,1.0])\nb = np.fft.fft(a)\nc = np.fft.ifft(b)\nd = np.abs(c)\n", "groundtruth": [2, 6, 4, 7, 3, 1]}
{"task_id": "numpy/20", "content": "\nimport numpy as np\n\ndef fft_2d_shift(arr):\n    fft_result = np.fft.fft2(arr)\n    shifted_fft = np.fft.fftshift(fft_result)\n    inv_shifted_fft = np.fft.ifftshift(shifted_fft)\n    ifft_result = np.fft.ifft2(inv_shifted_fft)\n    absolute_values = np.abs(ifft_result)\n    return absolute_values\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr)\n\nfft_2d_shift(arr)\n\n\nAnswer:\nThe array should be:\n\n\\begin{code}\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\\end{code}\n\n\n#Question 2\nGiven the following code:\nx = 1 + 2j\ny = 3 + 4j\nz = 5 + 6j\n\ndef fct(u, v):\n    return (u + v) ** 2\n\nfct(x + y, y - z)\n\nGive the value of u and v.\n\nx = 1 + 2j\ny = 3 + 4j\nz = 5 + 6j\n\ndef fct(u, v):\n    return (u + v) ** 2\n\nfct(x + y, y - z)\n\n\nAnswer:\n\n```\nu = 1 - 4j\nv = 1 + 2j\n```\n\n\n#Question 3\nGiven the following code:\n\ndef gcf(a, b):\n    r = a % b\n    while r != 0:\n        a = b\n        b = r\n        r = a % b\n    return b\ngcf(1234567891011, 1234567891012)\n\nGive the number to be found in the", "groundtruth": [[2, 6, 4], [7, 3, 1], [5, 8, 9]]}
{"task_id": "numpy/21", "content": "", "groundtruth": [[2, 6, 4, 7, 3, 1], 5]}
{"task_id": "numpy/22", "content": "\nInput Format\n\nThe first line contains two space-separated integers:\n- the first integer denoting the length of the array;\n- the second integer denoting the value of the i-th element of the array.\n\nConstraints\n\nEach of the first and second", "groundtruth": [2, 6, 4, 7, 3, 1]}
{"task_id": "numpy/23", "content": "'''\n\nfrom typing import Dict, List\nimport numpy as np\nfrom utils import np_array_to_2Dlist\n\n\ndef sort_2d_and_find_nonzero(arr: np.ndarray, axis=0) -> Dict[str, List[list]]:\n    sorted_arr = np.sort(arr, axis=axis)\n    non_zero_positions = np.nonzero(sorted_arr)\n    return {'sorted_array': sorted_arr.tolist(),\n            'non_zero_positions': np_array_to_2Dlist(non_zero_positions)}\n\n\nif __name__ == \"__main__\":\n    print(\n        sort_2d_and_find_nonzero(np.array([[0, 0, 0], [5, 3, 1], [7, 6, 4]]), axis=0))\n    print(sort_2d_and_find_nonzero(np.array([[0, 0, 0], [5, 3, 1], [7, 6, 4]]), axis=1))\n    print(\n        sort_2d_and_find_nonzero(np.array([[0, 0, 0], [0, 0, 0], [5, 3, 1]]), axis=0))\n    print(sort_2d_and_find_nonzero(np.array([[0, 0, 0], [0, 0, 0], [5, 3, 1]]), axis=1))\n    print(sort_2d_and_find_nonzero(np.array([[0, 0, 0], [1, 0, 0], [5, 3, 1]]), axis=0))\n    print(sort_2d_and_find_nonzero(np.array([[0, 0, 0], [1, 0, 0], [5, 3, 1]]), axis=1))\n    print(sort_2d_and_find_nonzero(np.array([[0, 0, 1], [1, 0, 0], [5", "groundtruth": [[0, 6, 4], [7, 0, 1], [5, 3, 0]]}
{"task_id": "numpy/24", "content": "\nInput Format\n\nThree integers, , , and , denoting the respective elements of , , , and .\n\nConstraints\n\n\n\n\n\n\nOutput Format\n\nPrint the single integer denoting the index of , denoting the position of the value inserted in .\n\nSample Input 0\n\n1 3 6\n2 4 7\n2\n\nSample Output 0\n\n3\nExplanation 0\n\nWe add 2 to the sorted array to get . Then, we insert 2 at index , denoting the position of the value in .\n'''\n\nimport numpy as np\n\ndef concatenate_sort_searchsorted(arr1, arr2, value):\n    concatenated_arr = np.concatenate((arr1, arr2))\n    sorted_arr = np.sort(concatenated_arr)\n    insert_index = np.searchsorted(sorted_arr, value)\n    return {'sorted_array': sorted_arr, 'insert_index_for_value': insert_index}\n\nn = int(input())\narr1 = list(map(int, input().rstrip().split()))\n\nm = int(input())\narr2 = list(map(int, input().rstrip().split()))\n\nvalue = int(input())\n\nprint(concatenate_sort_searchsorted(arr1, arr2, value)['insert_index_for_value'])\n\n\n'''\n\nConcatenate and Sort\nYou are given two arrays, and your task is to concatenate and sort them so that the values in the resulting array are in strictly increasing order.\n\nExample\n\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\nThe resulting sorted array after concatenation is [1, 2, 3, 4, 5, 6]\nNote:\n\nArrays will have between  and  elements, inclusive.\nArray elements are between  and , inclusive.\n\nFunction Description\n\nComplete the function mergeSort in the editor below. It should return a sorted array concatenating  and .\nmergeSort has the following parameter(s):\n\na: an array of integers\n\nInput Format\n\nThe first line contains an integer , the number of elements in", "groundtruth": [[2, 6, 4], [7, 3, 1], 5]}
{"task_id": "numpy/25", "content": "\nAssume that the test data is stored in a numpy array.\n\n\n#### Answer\n\n- Code snippet\n\n```python\nimport numpy as np\n\ndef combine_clip_round(arr1, arr2, min_val, max_val, decimals):\n    combined_arr = np.concatenate((arr1, arr2))\n    unique_arr = np.unique(combined_arr)\n    clipped_arr = np.clip(unique_arr, min_val, max_val)\n    rounded_arr = np.round(clipped_arr, decimals=decimals)\n    return rounded_arr\n\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([2, 5, 6.8, 7.9, 8])\nmin_val = 2\nmax_val = 5\ndecimals = 1\nprint(combine_clip_round(arr1, arr2, min_val, max_val, decimals))\n\n```\n\n- Input\n```text\n[ 1.    2.    2.5   3.8   3.8   4.9   4.9   5.   5.   5.   ]\n```\n\n## 52. \nWhat is the output of the following code snippet?\n\nimport os\n\nos.makedirs('data/')\nprint('./data/')\n\nPrint the output and describe the reason for it.\n#### Answer\n\nOutput\n```text\n'./data/'\n```\n\nDescription:\n- Make a directory in the current directory named 'data'. The 'data' is a directory.\n- Print the address of the directory named 'data'.\n\n## 53. \nFill in the blanks to get the directory tree of your current directory.\n- List the contents of the directory and all of its subdirectories.\n- The current directory is `cwd`.\n- The directory `cwd/data` is not empty.\n- The directory `cwd/data/raw_data` is not empty.\n- The directory `cwd/data/processed_data` is not empty.\n- The directory `cwd/data/", "groundtruth": [[1.1, 2.5, 3.8], [2.5, 4.9, 6.2], 2, 5, 1]}
{"task_id": "numpy/26", "content": "\n### 입력\n\n~~~\nimport numpy as np\n\ndef concatenate_and_unique(arr1, arr2):\n    concatenated_arr = np.concatenate((arr1, arr2))\n    unique_elements = np.unique(concatenated_arr)\n    return len(unique_elements)\n~~~\n\n### 출력\n\n~~~\n5\n~~~\n\n### 해설\n\n~~~\nimport numpy as np\n\ndef concatenate_and_unique(arr1, arr2):\n    concatenated_arr = np.concatenate((arr1, arr2))\n    unique_elements = np.unique(concatenated_arr)\n    return len(unique_elements)\n\narr1 = np.array([1,2,3,3])\narr2 = np.array([2,3,1,5])\nunique_elements = concatenate_and_unique(arr1, arr2)\nprint(unique_elements)\n~~~\n\n### 코드\n\n~~~\nimport numpy as np\n\ndef concatenate_and_unique(arr1, arr2):\n    concatenated_arr = np.concatenate((arr1, arr2))\n    unique_elements = np.unique(concatenated_arr)\n    return len(unique_elements)\n\narr1 = np.array([1,2,3,3])\narr2 = np.array([2,3,1,5])\nunique_elements = concatenate_and_unique(arr1, arr2)\nprint(unique_elements)\n~~~\n\n### 결과\n~~~\n5\n~~~\n\n### 해설\n1차원 배열이 주어지고, 배열의 요소가 중복될 수 있는 경우 중복된 요소의 개수를 반환하는 함수를 작성하시오.\n\n### 코드\n~~~", "groundtruth": [[1, 2, 3], [3, 4, 5]]}
{"task_id": "numpy/27", "content": "The input is:\nimport numpy as np\ndef complex_array_operation(arr1, arr2, min_val, max_val):\n    combined_arr = np.concatenate((arr1, arr2))\n    clipped_arr = np.clip(combined_arr, min_val, max_val)\n    unique_arr = np.unique(clipped_arr)\n    result_mean = np.mean(unique_arr)\n    return result_mean\n\nThe input is:\narr1 = np.array([1.4, 3.1, 6.1, 1.8])\narr2 = np.array([8.5, 2.6, 3.8, 2.5])\nmin_val = 2.0\nmax_val = 6.9\narr1 = np.array([1.4, 3.1, 6.1, 1.8])\narr2 = np.array([8.5, 2.6, 3.8, 2.5])\nmin_val = 2.0\nmax_val = 6.9\n\nThe input is:\narr1 = np.array([1.4, 3.1, 6.1, 1.8])\narr2 = np.array([8.5, 2.6, 3.8, 2.5])\nmin_val = 2.0\nmax_val = 6.9\narr1 = np.array([1.4, 3.1, 6.1, 1.8])\narr2 = np.array([8.5, 2.6, 3.8, 2.5])\nmin_val = 2.0\nmax_val = 6.9\n\nThe input is:\narr1 = np.array([1.4, 3.1, 6.1, 1.8])\narr2 = np.array([8.5, 2.6, 3.8, 2.5])\nmin_val = 2.0\nmax_val = 6.9\narr1 = np.array([1.4, 3.1, 6.1, 1.", "groundtruth": [[7, 7.5, 3, 1.2, 9], [6.5, 10, 3, 7, 1.2], 2, 8]}
{"task_id": "java/0", "content": "\n**Example 1:**\n**Input:**\nnums = [2,7,11,15], target = 9\n**Output:**\n[0,1]\n**Explanation:**\nBecause nums[0] + nums[1] == 9, we return [0, 1].\n\n**Example 2:**\n**Input:**\nnums = [3,2,4], target = 6\n**Output:**\n[1,2]\n**Explanation:**\nBecause nums[1] + nums[2] == 6, we return [1, 2].\n\n**Example 3:**\n**Input:**\nnums = [3,3], target = 6\n**Output:**\n[0,1]\n\n**Note:**\n1. You may assume that each input would have exactly one solution.\n2. I you have multiple solutions, you can return any of them.\n\n\n**Solution:**\n\n```golang\npackage leetcode\n\nfunc twoSum(nums []int, target int) []int {\n  for i, n := range nums {\n    m := target - n\n    for j, m", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/1", "content": "Example 1\n\nInput:\nnums = [2, 7, 11, 15], target = 9\nOutput:\n[0, 1]\nExplanation:\nThe sum of 2 and 7 is 9. Therefore, 2 must be the first element in the answer, and 7 must be the second element.\nExample 2\n\nInput:\nnums = [3, 2, 4], target = 6\nOutput:\n[1, 2]\nExplanation:\nThe sum of 3 and 4 is 7. Therefore, 3 must be the first element in the answer, and 4 must be the second element.\nExample 3\n\nInput:\nnums = [3, 3], target = 6\nOutput:\n[0, 1]\nExplanation:\nThe answer is not [1, 2], because the index of numbers must be zero-based.\nHint #1  \nHow many variables should be initialized?\nHint #2  \nWhat should we do with the complement of target?\nHint #3\nWhy do we need to consider the last digit?\nHint #4\nWhat should we do with duplicates?\nHint #5  \nHow is the complement related to target?\nHint #6\nWhat are the complexities of the solution?\nHint #7  \nIs it possible to come up with more than one solution?\nHint #8\nCan we minimize the number of times we try to look up a number in the Map?\n\n'''\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        d = {}\n        for i in range(len(nums)):\n            d[target - nums[i]] = i\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if nums[i] == target - nums[i]:\n                    if nums[i] != nums[d[nums[i]]]:\n                        return [i, d[nums[i]]]\n                    else:\n                        return [i, d[nums[i]] + 1]\n        return [-1, -1]\n\n\n", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/2", "content": "Note: We can't guarantee that the input will have any special ordering.\n\n", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/3", "content": "\n\nConstraints:\n\n1 <= k <= nums.length <= 104\n-104 <= nums[i] <= 104\nThe same number may appear multiple times in the array.\nExample 1:\n\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\n\n\nInput: nums = [1,-1], k = 1\nOutput: [1,-1]\nExplanation: \nSince k = 1, the window is of size 1.\n\nAnd since the array is made up of only negative elements, the output is same as the input.\n \n\nFollow up: Could you solve it in linear time?\n\n \n\n\n\n\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int n = nums.length;\n        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o2 - o1;\n            }\n        });\n        int[] ans = new int[n - k + 1];\n        for (int i = 0; i < k; ++i) {\n            pq.offer(nums[i]);\n        }\n        ans[0] = pq.peek();\n        for (int i = k; i < n; ++i) {\n            pq", "groundtruth": {"nums": [1, 3, -1, -3, 5, 3, 6, 7], "k": 3}}
{"task_id": "java/4", "content": "\nExample\nExample 1\n\nInput: dimensions = [[5, 1], [1, 4]]\nOutput: 5\nExplanation:\nThe dimensions of the largest square (the only square in this case) is (5, 5).\nExample 2\n\nInput: dimensions = [[5, 4], [2, 1], [1, 2]]\nOutput: 7\nExplanation:\nThe dimensions of the largest square is (5, 4).\n\nSolution:\n\nUse area of rectangle is width*height, and the area of diagonal is sqrt(width**2 + height**2). So max area is rectangle max height or diagonal max area.\n\nclass Solution {\n  public int areaOfMax", "groundtruth": [[9, 3], [8, 6]]}
{"task_id": "java/5", "content": "\nInput Format \nThe input will consist of six integer arguments\na , b , c , d , e , f\nThe value of the integer arguments will be between -100 and 100\n\nOutput Format \nReturn an integer denoting the input of the function:\nminMovesToCaptureTheQueen\n\nConstraints \n1 <= a , b , c , d , e , f <= 100\n\nSample Input \n0 0 0 1 0 1\nSample Output \n2\n\"\"\"\n\n\"\"\"\nWe need to deduce the following parameters from the following input:\na , b , c , d , e , f\n\nInput Format \nThe input will consist of six integer arguments\na , b , c , d , e , f\nThe value of the integer arguments will be between -100 and 100\n\nOutput Format \nReturn an integer denoting the input of the function:\nminMovesToCaptureTheQueen\n\"\"\"\n\n#solution\na, b, c, d, e, f = map(int, input().strip().split())\nprint(10)\n# print(minMovesToCaptureTheQueen(a, b, c, d, e, f))\n# class Solution:\n#     def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n#         # code here\n        \n        \n# class Solution:\n#     def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n#         # code here\n        \n        \n\n# class Solution:\n#     def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n#         # code here\n        \n        \n\n# class Solution:\n#     def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n#         # code here\n        \n\n# class Solution:\n#     def minMovesToCaptureTheQueen(self, a, b, c, d, e, f):\n#         # code here\n        \n        \n\n#", "groundtruth": {"a": 1, "b": 1, "c": 8, "d": 8, "e": 2, "f": 3}}
{"task_id": "java/6", "content": "\nInput Format\nThe first line contains an integer, T, which denotes the number of test cases.\n\nThe next T lines each contain two space-separated integers describing the respective array sizes n1 and n2.\nEach of the next T lines contains n1 integers, describing the array nums1.\nEach of the next T lines contains n2 integers, describing the array nums2.\n\nConstraints\n1 <= T <= 10\n1 <= n1, n2 <= 1000\n0 <= nums1[i], nums2[j] < 1000\nOutput Format\nOutput T lines; each line contains the deduced input of the code snippet.\n\nSample Input\n\n2\n5 5\n1 2 3 4 5\n5 5\n5 4 3 2 1\n5 5\n1 2 3 4 5\n3 3\n1 2 3\n1 2 3\n2\n10 5\n2 4 5 7 9\n1 3 7 8 10\nOutput\n\n[3]\n[2, 1]\nExplanation\n\nTest case 0\n\nAfter the execution of the code snippet, the set1 will contain the set {1, 2, 3, 4, 5} and the set2 will contain the set {5, 4, 3, 2, 1}. The intersection will be an empty set.\nSo, the common = 0 and ans = 3.\nThe deduced input for this case is: [3]\n\nTest case 1\n\nAfter the execution of the code snippet, the set1 will contain the set {1, 2, 3, 4} and the set2 will contain the set {5, 4, 3, 2}. The intersection will be the set {4}.\nSo, the common = 1 and ans = 2.\nThe deduced input for this case is: [2, 1]\n\nSimilarly, deduce the input for remaining test cases.\n\nExample Case 0\n\nnums1[] = {1, 2, 3, 4, 5};\nnums2[] = {5, 4, 3, 2,", "groundtruth": {"nums1": [1, 2, 1, 2], "nums2": [1, 1, 1, 1]}}
{"task_id": "java/7", "content": "\nOutput Format\nThe output consists of the deduced input to the code snippet.\n\nConstraints\nNone\n\nSample Input\n2\n3\n5\nSample Output\n3\n5\n'''\n\nn = int(input())\n\ncount = 0\n", "groundtruth": {"nums": [1, 2, 2, 3, 1, 4]}}
{"task_id": "java/8", "content": "\n\n\nHint 1\n\nFor every integer in nums count the occurrence of that number in the input array.\n\nHint 2\n\nOnce you have the count of every integer in nums, store the highest frequency in a variable called maxfreq. Store the number of elements in the original array", "groundtruth": [1, 2, 3, 4, 5]}
{"task_id": "java/9", "content": "\nInput Format\nThe function beautifulIndices() will be called with the following parameters:\nThe first argument given is the string\n,\nthe second argument given is the string\n,\nthe third argument given is the string\n,\nthe fourth argument given is the integer .\nThe input strings contain only lowercase english alphabets.\n\nConstraints\n", "groundtruth": {"s": "abcd", "a": "a", "b": "a", "k": 4}}
{"task_id": "java/10", "content": "'''\nnums = [1,2,3,4]\nminimumCost(nums)\n\n# 4 + 1 + 2 = 7\n# 1 + 3 + 4 = 8\n# 1 + 4 + 3 = 8\n# 2 + 3 + 4 = 8\n# Therefore, the answer is 7.\n\n# 1 + 4 + 3 = 8\n# 1 + 3 + 4 = 8\n# 2 + 3 + 4 = 8\n# Therefore, the answer is 8.\n\n# 1 + 4 + 3 = 8\n# 2 + 3 + 4 = 8\n# Therefore, the answer is 8.\n\n# 2 + 3 + 4 = 8\n# Therefore, the answer is 8.\n\n# Therefore, the answer is 8.\n'''\nA few test cases might lead you in the wrong way. Try to do this challenge again and focus on the key points.\n\nHere's the general approach for this problem.\n\nStart with the last element of the input and update the two minimum numbers with this number as the new minimum or the current minimum, whichever is greater. Repeat this process until the first element is reached.\n\nHere is the simple code:\n\nclass Solution {\n    public int minimumCost(int[] nums) {\n        int result = 0;\n        int min1 = Integer.MAX_VALUE;\n        int min2 = Integer.MAX_VALUE;\n        int i = 0;\n\n        while(i < nums.length){\n            if(min1 > nums[i]){\n                min2 = min1;\n                min1 = nums[i];\n            }else if(min2 > nums[i]){\n                min2 = nums[i];\n            }\n\n            result += nums[i];\n            i++;\n        }\n        return result;\n    }\n}\nA better solution from Discussions is:\n\nclass Solution {\n    public int minimumCost(int[] nums) {\n        int min1 = Integer.MAX_VALUE;\n        int min2 = Integer.MAX_VALUE;\n        int result", "groundtruth": {"nums": [5, 4, 3]}}
{"task_id": "java/11", "content": "", "groundtruth": [3, 16, 8, 4, 2]}
{"task_id": "java/12", "content": "", "groundtruth": [5, 5, 5, 10, 5]}
{"task_id": "java/13", "content": "\nNotice that the number of roads is between [10,20] inclusive, and that n <= 5000.\n\nA sample output may look like:\n[10,8,2,0,0]\n\nExplanation\n\nThe given code snippet tries to calculate the number of pairs of roads along which a taxi can drive, from a given point (x,y).\n\nAssume the following inputs:\nn = 4;\nx = 2;\ny = 3;\nThe above two constraints state that the x and y point on the taxi map are (x,y), and that the taxi can drive up to n = 4 roads.\n\nThe output of this code snippet is a list of the number of pairs of roads along which a taxi can drive. For example, given our input, this code snippet will give an output of [10,8,2,0,0].\n\nFor more clarity, the list at the output is [the count of roads that are greater than 2, the count of roads that are between 1 and 2, the count of roads that are less than 1, and the count of roads that are less than 0]. This is because the maximum number of roads the taxi can drive is n = 4. Hence, it is impossible to have a road count greater than n, so the output must contain 0 for all values at the last.\n\nExample 1:\n\nInput: n = 4, x = 2, y = 3\nOutput: [10,8,2,0,0]\nExplanation: There is a total of 4 roads in the taxi map, where the number of roads in the array at each index correspond to the number of taxis that can travel down that road. The count of roads greater than 2 is 2, and the count of roads between 1 and 2 is 2, and there are 0 roads less than 1 and 0 roads less than 0, so the final array is [2,2,0,0,0].\n\n\nExample 2:\n\nInput: n = 4, x = 2, y = 4\nOutput: [10,8,3,0,0]\nExplanation: There is a total of 4 roads", "groundtruth": {"n": 5, "x": 2, "y": 4}}
{"task_id": "java/14", "content": "\n```java\n", "groundtruth": {"nums": [-1, 3, 2, 4, 5], "k": 3}}
{"task_id": "java/15", "content": "Example 1:\nInput: \n[1,2,3,3,4,2,2]\nOutput:\n3\nExplanation:\nThe longest consecutive sequence is [1,2,3,4,2,2].\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function maximumLength() which takes the array arr as the input parameter and returns the maximum length of the consecutive sequence in the array.\n\nExpected Time Complexity: O(N).\nExpected Auxiliary Space: O(N).\nNote: A number that occurs multiple times in the array will be counted only once.\n\nConstraints:\n1 ≤ N ≤ 10", "groundtruth": {"nums": [1, 3, 2, 4]}}
{"task_id": "java/16", "content": "\nInput Format\n\nA single line containing 3 space separated numbers: \nN, M and K.\n\nConstraints\n\n1<=N<=30\n1<=M<=20\n2<=K<2^100\nOutput Format\n\nA single number representing the deduced input of the code snippet.\n\nExample Input\n\n3 2 1\nExample Output\n\n1\nExplanation\n\nExample case 1 :\n\nHere, since K=1 and the input consists of only two numbers,\nit satisfies the for loop and hence ans=2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'minOrAfterOperations' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY nums\n#  2. INTEGER k\n#\n\ndef minOrAfterOperations(nums, k):\n    ans=0\n    mask=0 # used for performing operation on prefix of bits\n    for j in range(30, -1, -1): # builds answer bit by bit\n        mask=mask | (1<<j)# mask changes(10000.. -> 11000..->11100..->11110..->111111..)\n\n        cosecutiveAnd=mask\n        mergeCount=0# no. of merges required to make current bit 0\n        for i in nums:\n            cosecutiveAnd = cosecutiveAnd & i\n            if((cosecutiveAnd|ans)!=ans) # explained below\n                mergeCount+=1 #while above condition is not achieved keep merging\n            else: cosecutiveAnd=mask # else reset cosecutiveAnd to mask(11111..0000...), no need to increase count\n\n        if(mergeCount>k):\n            ans|=(1<<j)# if(count is more than k, make set curent bit of 1, else it stays 0)\n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_", "groundtruth": {"nums": [7, 3, 15, 14, 2, 8], "k": 4}}
{"task_id": "java/17", "content": "\n### Solution\n```java\n/**\n * @author huash\n * @date 2016-11-20\n */\npublic class TriangleType {\n\n    public static void main(String[] args) {\n        System.out.println(new TriangleType().triangleType(new int[]{1,2,3}));\n    }\n\n    public String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        if(nums[0] + nums[1] <= nums[2]) return \"none\";\n        if(nums[0] == nums[1] && nums[1] == nums[2]) return \"equilateral\";\n        if(nums[0] == nums[1] || nums[1] == nums[2]) return \"isosceles\";\n        return \"scalene\";\n    }\n}\n```\n", "groundtruth": {"nums": [3, 4, 5]}}
{"task_id": "java/18", "content": "", "groundtruth": {"word": "abacaba", "k": 4}}
{"task_id": "java/19", "content": "\n\nExample Input\n[23, 33, 24, 56, 73, 84, 42, 77, 99, 18, 25, 30, 92, 58, 87, 13], 4\n\nExample Output\n[[58,58,58],[84,84,84],[56,56,56],[58,58,58],[73,73,73],[92,92,92],[84,84,84],[77,77,77],[30,30,30],[56,56,56],[87,87,87],[99,99,99],[99,99,99]]\nExample Explanation\nThe code snippet returns [[58,58,58],[84,84,84],[56,56,56],[58,58,58],[73,73,73],[92,92,92],[84,84,84],[77,77,77],[30,30,30],[56,56,56],[87,87,87],[99,99,99],[99,99,99]], for the input provided, since in the output, only the numbers that satisfy k = 4 are printed.\n\nSOLUTION\n\nclass Solution {\n    public ArrayList<ArrayList<Integer>> resultGrid(ArrayList<ArrayList<Integer>> v, int k) {\n        int r = v.size(), c = v.get(0).size();\n        int[][] arr = new int[r][c];\n        int[][] arr1 = new int[r][c];\n        int[][] arr2 = new int[r][c];\n        int[][] arr3 = new int[r][c];\n        int[][] arr4 = new int[r][c];\n        int[][] arr5 = new int[r][c];\n        \n        for (int i = 0; i < r; ++i) {\n            for (int", "groundtruth": {"image": [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45]], "threshold": 12}}
{"task_id": "java/20", "content": "\nInput Format\nThe only input is:\n\nThe first argument is the string word representing the current state of a given computer.\nThe second argument is the integer k representing the step count to be incremented by every iteration of the for loop, by which the algorithm increments the time variable.\nOutput Format\nThe output is an integer representing the minimum time taken to change the word to an empty string from its current state.\n\nSample Input\n\"bcde\",4\nSample Output\n4\nExplanation\nLet's consider this example word \"bcde\" and step count 4.\n\nThe count starts from k (which is 4) and keeps checking every 4th character until the current state becomes the same as the initial state.\n\nThe state \"b\" is different from initial state \"b\" so, increment count by 1.\n\nThe state \"cd\" is same as initial state \"b\" so, don't increment count by 1.\n\nThe state \"de\" is same as initial state \"b\" so, don't increment count by 1.\n\nThe state \"e\" is different from initial state \"b\" so, increment count by 1.\n\nFinally, the count is 4, and the total time taken is 4+1=5.\nThus, 5 is printed as the output.\n\nHere is a working java code:\n\n    class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n        int count = 0;\n        for(int i=k;i<word.length() && !word.startsWith(word.substring(i));i+=k,count++);\n        return count+1; \n    }\n}\n\nclass TestClass {\n    public static void main(String args[]) {\n        int result = new Solution().minimumTimeToInitialState(\"bcde\", 4);\n        System.out.println(result);\n    }\n}\n", "groundtruth": {"word": "abcbabcd", "k": 2}}
{"task_id": "java/21", "content": "\n \n\nExample 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,2,3],[4,5,6],[7,8,9]]\nExplanation: The original matrix is [[1,2,3],[4,5,6],[7,8,9]].\nThe modified matrix is [[1,2,3],[4,5,6],[7,8,9]].\nExample 2:\n\nInput: matrix = [[0,0,0],[0,0,0],[0,0,0]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation: The original matrix is [[0,0,0],[0,0,0],[0,0,0]].\nThe modified matrix is [[0,0,0],[0,0,0],[0,0,0]].\nExample 3:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[0,2,9],[4,11,6],[7,8,9]]\nExplanation: The original matrix is [[1,2,3],[4,5,6],[7,8,9]].\nThe modified matrix is [[0,2,9],[4,11,6],[7,8,9]].\nExample 4:\n\nInput: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,2,3],[4,5,6]]\nExplanation: The original matrix is [[1,2,3],[4,5,6]].\nThe modified matrix is [[1,2,3],[4,5,6]].\n\n \n\nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 400\n-500 <= mat[i][j] <= 500\n\"\"\"\n\n\"\"\"\nSimplify the code.\n\nWe can remove the variable `max_c`, and replace the for-loop with:\nfor(int j=0; j<matrix[0].length; j++) {\n    max_", "groundtruth": {"matrix": [[1, 2, -1], [4, -1, 6], [7, 8, 9]]}}
{"task_id": "java/22", "content": "\nInput Format\nEach input consists of a single line containing n integers, , , , \nseparated by spaces.\n\nConstraints\n\nOutput Format\nOutput a single integer, which is the number of valid subarrays in .\n\nSample Input 0\n\n3 0\n-1 2 -4\nSample Output 0\n\n1\nExplanation 0\nYou have the following subarrays:\n\n-1 ,  \n2 ,  , \n-4 ,  .\nOnly the first and third subarrays satisfy the pattern 1 -1. The remaining three subarrays do not satisfy the pattern. Hence, the number of valid subarrays is .\n'''\n\n# Solution\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countMatchingSubarrays function below.\ndef countMatchingSubarrays(nums, pattern):\n    count = 0\n    n = len(nums)\n    m = len(pattern)\n    for i in range(n - m):\n        valid_subarray = True\n        j = 0\n        while j < m and valid_subarray:\n            if pattern[j] == 1 and nums[i + j + 1] <= nums[i + j]:\n                valid_subarray = False\n            elif pattern[j] == 0 and nums[i + j + 1] != nums[i + j]:\n                valid_subarray = False\n            elif pattern[j] == -1 and nums[i + j + 1] >= nums[i + j]:\n                valid_subarray = False\n            j += 1\n        if valid_subarray:\n            count += 1\n    return count\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    stdin =", "groundtruth": {"nums": [1, 4, 4, 1, 3, 5, 5, 3], "pattern": [1, 0, -1]}}
{"task_id": "java/23", "content": "\n<hr>\n\n\n\n\nProblem 26\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nclass Solution {\n    public int[] getStrongest(int[] arr1, int[] arr2, int[] arr3) {\n        Map<Integer, Integer> m1 = new HashMap<Integer, Integer>();\n        Map<Integer, Integer> m2 = new HashMap<Integer, Integer>();\n        Map<Integer, Integer> m3 = new HashMap<Integer, Integer>();\n        for(int i =0;i<arr1.length;i++){\n            m1.put(arr1[i],i);\n            m2.put(arr2[i],i);\n            m3.put(arr3[i],i);\n        }\n        int[] arr = new int[arr1.length];\n        int c =0;\n        for(Map.Entry<Integer, Integer> entry : m1.entrySet()){\n            int max = Math.max(m2.getOrDefault(entry.getKey(),-1),m3.getOrDefault(entry.getKey(),-1));\n            if(max != -1){\n                arr[c++] = m2.get(entry.getKey());\n            }\n        }\n        return Arrays.copyOf(arr, c);\n    }\n}\nThe output is:\n2\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n<hr>\n\n\n\nProblem 27\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nclass Solution {\n    public int[] dietPlanPerformance(int[] startTime, int[] endTime, int[] diet, int k) {\n        int[] ans = new int[k];\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for(int i = 0;i<k;i++){\n            pq.add(diet[i]);\n        }\n        for(int i = 0;i<startTime.length;i++){\n            int p = 0;\n            while(startTime[i]", "groundtruth": {"words": ["abc", "ab"]}}
{"task_id": "tensorflow/0", "content": "\nThe code is run on a GPU, which has 2048 cuda cores. You can assume the\nnumber of cuda cores is represented by num_cores. The data type of input\nnumbers_list can be np.float32 or np.float64.\n\nFor example, if numbers_list = [0, 0, 0, 0], you will get the output of\n6.0 which is the mean of all the input numbers.\n\nIf numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], you will get the output\nof 6.0.\n\nIf numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], you\nwill get the output of 9.0 which is the mean of [1, 2, 3, 4, 5, 6, 7, 8, 9]\nand 10.0 which is the mean of [10, 11, 12, 13, 14, 15].\n\nMore examples:\nnumbers_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\noutput: 7.0\nnumbers_list = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]\noutput: 6.0\nnumbers_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\noutput: 9.0\nnumbers_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18,", "groundtruth": "[4, 2, 6, 8, 10]"}
{"task_id": "tensorflow/1", "content": "\n\n\n\nimport tensorflow as tf\n\ndef multiply_and_reshape(array1, array2, new_shape):\n    tensor1 = tf.constant(array1)\n    tensor2 = tf.constant(array2)\n    multiplied_tensor = tf.multiply(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(multiplied_tensor, new_shape)\n    return reshaped_tensor\nprint(multiply_and_reshape([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [2, 4]).numpy())\nOutput:\n[[5], [12], [21], [32]]\n\nExplanation\nThe code snippet outputs the matrix [ [5], [12], [21], [32] ]. Multiply the two matrices and reshape the output to [2, 4].\n\nSince the output is printed using the numpy method, we print it using the numpy method. The result of the operation is the following Numpy array.\n\narray([[5],\n       [12],\n       [21],\n       [32]], dtype=int32)\nTo deduce the input, we pass a Numpy array of shape [2, 3] and a [2, 1] array as the first and second parameters of the code snippet. \n\nThe first array is:\narray([[1, 2, 3],\n       [4, 5, 6]])\nThis is a 2 × 3 array, where each entry is a scalar. The second array is:\narray([[7],\n       [8],\n       [9]])\nThis is a 3 × 1 array, where each entry is a scalar. When we multiply these two arrays, we get the following output:\n[[7, 14, 21],\n [28, 40, 54]]\nThis is a 2 × 3 array, where each entry is a scalar. The code snippet prints the result of this operation as follows.\n\n[[5],\n [12],\n [21],\n [32]]\n\nThe input (first and second arrays) is as follows.\n\narray([[", "groundtruth": "[[1, 2], [3, 4]], [[5, 6], [7, 8]], (4, 1)"}
{"task_id": "tensorflow/2", "content": "\nExample Output\nInput\narray1 = [[1., 2.], [3., 4.]]\narray2 = [[2.], [3.], [4.], [5.]]\nnew_shape = (2, 2, 2)\nInput\narray1 = [[1., 2.], [3., 4.]]\narray2 = [[2.], [3.], [4.], [5.]]\nnew_shape = (2, 2, 2)\nExample Output\nInput\narray1 = [[1., 2.], [3., 4.]]\narray2 = [[2.], [3.], [4.], [5.]]\nnew_shape = (2, 2, 2)\nInput\narray1 = [[1., 2.], [3., 4.]]\narray2 = [[2.], [3.], [4.], [5.]]\nnew_shape = (2, 2, 2)\n", "groundtruth": "[[2, 4], [8, 16]], [[2, 2], [4, 4]], (4, 1)"}
{"task_id": "tensorflow/3", "content": "\n\nExample Input\n12\n2\n0.5 0.5 0.5 0.5\n\nExample Output\n12\n0.5 0.5 0.5 0.5\n0.0 0.5 1.0 1.5\n\n\nimport tensorflow as tf\n\ndef sqrt_and_add_constant(tensor, constant):\n    sqrt_tensor = tf.math.sqrt(tensor)\n    result = tf.add(sqrt_tensor, constant)\n    return result\n\nif __name__ == \"__main__\":\n    print(\"Please enter your input of the below function. Please output only one line of input.\")\n    T = int(input())\n    D = []\n    for i in range(T):\n        D.append(list(map(int, input().split())))\n    D = tf.constant(D)\n    constant = input().split()\n    constant = [float(constant[0]), float(constant[1]), float(constant[2]), float(constant[3])]\n    constant = tf.constant(constant)\n    constant = tf.reshape(constant, [1, 4])\n    result = sqrt_and_add_constant(D, constant)\n    tf.print(result)\n    \n    \n# Code execution starts here\nimport tensorflow as tf\n\ndef sqrt_and_add_constant(tensor, constant):\n    sqrt_tensor = tf.math.sqrt(tensor)\n    result = tf.add(sqrt_tensor, constant)\n    return result\n\nif __name__ == \"__main__\":\n    print(\"Please enter your input of the below function. Please output only one line of input.\")\n    T = int(input())\n    D = []\n    for i in range(T):\n        D.append(list(map(int, input().split())))\n    D = tf.constant(D)\n    constant = input().split()\n    constant = [float(constant[0]), float(constant[1]), float(constant[2]), float(constant[3])]\n    constant = tf.constant(constant)\n    constant = tf.reshape(constant, [1, 4])\n    result = sqrt_and_", "groundtruth": "[16, 25, 36, 49], 5"}
{"task_id": "tensorflow/4", "content": "Note:\nYou are required to", "groundtruth": "[1, 2.71828, 7.38906, 20.0855]"}
{"task_id": "tensorflow/5", "content": "", "groundtruth": "[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]"}
{"task_id": "tensorflow/6", "content": "\n### Answer ###\n<pre><code>\n\ntf.constant([[[0,1],[2,3],[4,5]],[[1,2],[3,4],[5,6]],[[3,4],[6,7],[6,7]]], shape=[3,3,2])\n\n</code></pre>\n\n# 9.\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport tensorflow as tf\n\ndef reshape_tensor(input_tensor, new_shape):\n    reshaped_tensor = tf.reshape(input_tensor, new_shape)\n    return reshaped_tensor\nThe output is:\n<pre><code>\n\n [[[ 0  1  2]\n  [ 3  4  5]]\n\n [[ 6  7  8]\n  [ 9 10 11]]\n\n [[12 13 14]\n  [15 16 17]]]\n\n</code></pre>\n\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n### Answer ###\n<pre><code>\ntf.constant([[[0,1,2],[3,4,5]],[[6,7,8],[9,10,11]],[[12,13,14],[15,16,17]]], shape=[3,2,3])\n</code></pre>\n\n# 10.\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport tensorflow as tf\n\ndef reshape_tensor(input_tensor, new_shape):\n    reshaped_tensor = tf.reshape(input_tensor, new_shape)\n    return reshaped_tensor\nThe output is:\n\n<pre><code>\n\n [[[10  9  8  7]\n  [ 6  5  4  3]\n  [ 2  1  0  0]]\n\n [[ 0  0  0  0]\n  [ 0  0  0  0]\n  [ 0  0  0  0]]\n\n [[ ", "groundtruth": "([[4, 2], [6, 4], [3, 6]], [3, 2])"}
{"task_id": "tensorflow/7", "content": "Note that the output is not always the same every time you run the code. However, once you are sure about the output, it is sufficient to give the correct output as the deduced input to the problem.\nSample Output\n56\nExplanation\nAfter you execute the following code snippet:\nimport tensorflow as tf\na = tf.Variable([1.0, 2.0, 3.0, 4.0])\n\nprint(tf.Session().run(square_sum(a)))\nthe output will be 56, which is the sum of the squares of the elements in the input tensor a.\nSince the tensor in the code is a Variable containing the tensor [1.0, 2.0, 3.0, 4.0], you should answer the question with 56.\n\n\nSample Output\n", "groundtruth": "[2, 4, 6]"}
{"task_id": "tensorflow/8", "content": "\n```python\nvariable_vals = [7, 8, 9]\ntensor_vals = [3, 3, 3]\nprint(add_tensors_and_convert(tensor_vals, variable_vals))\n```\n\nThe correct answer is:\n```python\n[[10, 11, 12], [10, 11, 12]]\n```\nAnswer: \n```python\nvariable_vals = [10, 11, 12]\ntensor_vals = [5, 5, 5]\n```\n### Deduction\n\nThe code snippet declares the variables `tensor` and `variable` and the result `result`. The variables are set to constant values and the `tf.add` operator is applied on the results, and they are returned to be used further. In the output, 7+3, 7+3, 7+3, 8+3, 8+3, 8+3, 9+3, 9+3, 9+3 are printed. So the returned values are [10, 11, 12, 13, 14, 15, 16, 17, 18]. Since the result is an array, the value is printed as a comma-separated value. \n\nThe input is deduced to be [7, 7, 7, 7, 7, 7, 7, 7, 7].", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[6, 5, 4], [3, 2, 1]]"}
{"task_id": "tensorflow/9", "content": "\nHint:\nTake a look at the documentation for [tf.math.square()](https://www.tensorflow.org/api_docs/python/tf/math/square?version=stable) and [tf.reshape()](https://www.tensorflow.org/api_docs/python/tf/reshape?version=stable).\n\nInput Format\n\nThe first line contains the number of input tensors, .\n\nThe next  lines each contain a tensor of integers, .\nEach tensor represents an input to the code snippet.\n\nThe next line contains the number of dimensions in the reshaped tensor, .\n\nThe last line contains the size of each dimension.\n\nConstraints\n\nEach input tensor contains exactly integers.\nEach tensor has at least  elements.\nThe size of each dimension has at most  elements.\nOutput Format\n\nIn the first line, print the input of the code snippet.\n\nSample Input\n\n3\n[1, 2, 3]\n[4, 5]\n[6, 7, 8, 9]\n2\n1\n5\nSample Output\n\n[[1, 4], [9, 25], [64, 121], [512, 289]]\nExplanation\n\nThe initial tensors are, \n\n", "groundtruth": "[[2, 3, 5, 7], [11, 13, 17, 19]], (4, 2)"}
{"task_id": "tensorflow/10", "content": "\n\nAnswer\n\n\nconcat_tensors_and_compute_mean([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], axis=1)\n\nThe code snippet concatenates the first tensor, which is of 5x1, with the second tensor, which is of 5x1, along axis 1. The output is a tensor of shape 5x2. The mean of the output along the 2nd axis is 2.5 (that is, 5.5/2 = 2.5).\n\nIn the second case, where axis=1, the mean of the concatenated tensor is computed along the second axis. Hence, the output is 2.5\n\n\n\nYou can do it by the following steps:\n\nStep 1. Import tf:\n\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nStep 2. Define a Python function:\n\n\ndef concat_tensors_and_compute_mean(list1, list2, axis=0):\n    tensor1 = tf.constant(list1)\n    tensor2 = tf.constant(list2)\n    concatenated_tensor = tf.concat([tensor1, tensor2], axis)\n    mean_val = tf.reduce_mean(concatenated_tensor)\n    return mean_val.numpy()\nStep 3. Pass the required parameters to the function:\n\n\nconcat_tensors_and_compute_mean([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], axis=0)\n\nThe parameter list1 is a list of shape (5,), where the first 5 numbers are integers 1, 2, 3, 4 and 5. The parameter list2 is a list of shape (5,), where the first 5 numbers are integers 2, 4, 6, 8 and 10. \n\nThe axis = 0 signifies that the input tensors will be concatenated along the 0th axis (along the first axis of the concatenated tensor). Consequently, the shape of the output tensor will be ", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], 0"}
{"task_id": "tensorflow/11", "content": "\nInput format\n\nThe input to the function is four arrays, two of integers, and one of strings.\n\nThe first two arrays contain the list elements.\n\nThe third array is an array of integers, containing the dimensions of the output shape.\n\nThe fourth array is an array of integers, containing the elements to be multiplied and the product of those elements.\n\nOutput format\n\nIn the editor, the output is a set of comma separated values. The output format will be given below.\n\nOutput:\n\n4,5,6,7\n[1,2,3,4], [5,6,7,8], [2, 3, 4, 5]\nOutput:\n\n27648\nInput:\n\n[1,2,3], [4,5,6,7], [2, 3, 4, 5]\nThe four arrays are passed to the function as arguments to deduce their contents.\n\nOutput:\n\n25401600.0\nInput:\n\n[10,20,30], [40,50,60,70], [2, 3, 4, 5]\nThe four arrays are passed to the function as arguments to deduce their contents.\n\nHints:\n", "groundtruth": "[[2, 3], [4, 5], [6, 7]], [[7, 6], [5, 4], [3, 2]], (3, 2)"}
{"task_id": "pytorch/0", "content": "\nInput Format\nA single line of input containing an array of space separated numbers.\n\nConstraints\n1 <= n (size of array) <= 5\n1 <= nums [i] <= 9\nOutput Format\nA single line of the calculated sum.\n\nSample Input\n2 4 6\nSample Output\n16\nExplanation\nThe input to the calculate_sum() is [2, 4, 6]. The sum of the input is 2 + 4 + 6 = 16.\n\n\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\n\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\n\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\n\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\n\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = torch.sum(tensor_nums)\n    return sum_value\nimport torch\n\ndef calculate_sum(nums):\n    tensor_nums = torch.tensor(nums)\n    sum_value = tor", "groundtruth": "[4, 2, 6, 3, 1]"}
{"task_id": "pytorch/1", "content": "Input Format\nThe first line contains a tensor representing tensor1 (a single number), and the second line contains a tensor representing\ntensor2 (a single number).\n\nConstraints\nAssume that you have access to only the operations provided in the code snippet.\n\nSample Input 0\n2.0\n3.0\nSample Output 0\n5.0\n\n\n\n15.12\n\n\n\n3.0\nSample Output 0\n5.0\n3.0\nSample Output 1\n4.5\n1.0\nSample Output 2\n5.5\n10.0\nExplanation\nSample case 0: The values of tensor1 and tensor2 are 2.0 and 3.0, respectively. We can add them to obtain the value of added\ntensors = 5.0. We can take the mean of the values of added_tensors and get the value mean_value = 5.0. We return the value\nmean_value = 5.0.\n\nSample case 1: The values of tensor1 and tensor2 are 3.0 and 4.0, respectively. We can add them to obtain the value of\nadded_tensors = 7.0. We can take the mean of the values of added_tensors and get the value mean_value = 1.75 (rounded\nto 4 decimal places), and we return the value mean_value = 1.75\n\nSample case 2: The values of tensor1 and tensor2 are 4.0 and 4.0, respectively. We can add them to obtain the value of\nadded_tensors = 8.0. We can take the mean of the values of added_tensors and get the value mean_value = 4.0, and we return\nthe value mean_value = 4.0\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport torch\n\ndef tensor_operations(tensor1, tensor2):\n    if not (tensor1.size() == tensor2.size()):\n        raise ValueError('Input tensors must have the same size')\n    added_tensors = torch.add(tensor1, tensor2)\n    mean_value = torch", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[6, 5, 4], [3, 2, 1]]"}
{"task_id": "pytorch/2", "content": "\nHints\n1. Look at the code snippet again.\n2. If you are", "groundtruth": "[1, 2, 3, 4, 5], threshold = 2"}
{"task_id": "pytorch/3", "content": "\n## 题意\ndeduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\n\nPlease deduce the input of the following code based on the code snippet and the output.\nThe code snippet is:\nimport torch\n\ndef concat_tensors_mean(list1, list2):\n    tensor1 = torch.tensor(list1)\n    tensor2 = torch.tensor(list2)\n    concat_tensor = torch.cat((tensor1.unsqueeze(0), tensor2.unsqueeze(0)), dim=0)\n    mean_val = concat_tensor.mean(dim=0)\n    return mean_val\n\nThe output is:\n\n[1.5, 3.5, 5.5, 7.5]\n\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n## 题解\n我们可以从提示得出，因为输出为tensor，所以很可能是tensor作为输入。\n\n那么，我们可以将原来输入的两个list分别转换为tensor并cat，这就是这题的输入\n\n\n## 代码\n```python\ntensors1 = torch.tensor([1, 3, 5, 7])\ntensors2 = torch.tensor([2, 4, 6, 8])\nconcat_tensors_mean(tensors1, tensors2)\n```\n### python解释器中打印tensor\n\n如果是python解释器中打印，", "groundtruth": "[[1, 3, 5, 7], [2, 4, 6, 8]]"}
{"task_id": "pytorch/4", "content": "\nExample input\n[1.0, -2.0, -5.0]\n\nExample output\n[-1.0, -1.0, -2.0]\n\n'''\n\nfrom __future__ import annotations\nfrom typing import Any, List\nimport torch\n\n\ndef normalize_data(data: List[float]) -> List[Any]:\n    tensor: torch.Tensor = torch.tensor(data, dtype=torch.float)\n    mean: torch.Tensor = torch.mean(tensor)\n    std: torch.Tensor = torch.std(tensor)\n    normalized_tensor: torch.Tensor = (tensor - mean) / std\n    return normalized_tensor.tolist()\n\nif __name__ == '__main__':\n    n_i = list(map(float, input().rstrip().split()))\n    result = normalize_data(n_i)\n    print", "groundtruth": "[5, 15, 25, 35, 45]"}
{"task_id": "pytorch/5", "content": "'''\nimport torch\n\ndef complex_tensor_operations(tensor1, tensor2, shape):\n    if tensor1.size() != tensor2.size():\n        raise ValueError('Input tensors must have the same size')\n    multiplied_tensor = torch.mul(tensor1, tensor2)\n    reshaped_tensor = torch.reshape(multiplied_tensor, shape)\n    return reshaped_tensor\n\n\n'''Question 3'''\n\n'''\nGiven a collection of integers, some pairs of which repeat, determine the count of how many unique pairs of\nitems there are.\n'''\n\n'''Solution'''\nfrom collections import Counter\n\n\ndef unique_pair_count(seq):\n    d = Counter(seq)\n    a_count = 0\n    b_count = 0\n    pair_count = 0\n    for i in d.keys():\n        a_count += d[i] / 2\n        b_count += d[i] - d[i] / 2\n        pair_count += a_count * b_count\n    return pair_count\n\n\n# test_seq = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7]\n#\n# print(unique_pair_count(test_seq))\n# 6\n\n# test_seq = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 9]\n#\n# print(unique_pair_count(test_seq))\n# 6\n\n# test_seq = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 7]\n#\n# print(unique_pair_count(test_seq))\n# 6\n\n# test_seq = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 7, 7]\n#\n# print(unique_pair_count(test_seq))\n# 6\n\n\n", "groundtruth": "[[3, 2, 3], [8, 5, 6]], [[5, 2, 3], [9, 5, 6]], (3, 2)"}
{"task_id": "pytorch/6", "content": "\n<details><summary>Click here for the solution</summary>\n<", "groundtruth": "[torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6])]"}
{"task_id": "pytorch/7", "content": "\nSolution:\n\n```python\nprint(reshape_and_square(torch.tensor([1, 2, 3, 4]), [2, 2]))\n```\n\n```\ntensor([[1, 4],\n        [9, 16]])\n```\n\n## Question 3.2\n\nImplement a function get_device_name(device) which takes in a torch.device object and returns a string name of the device. For example, for a CPU device, the function should return \"cpu\" and for a GPU device it should return \"cuda\".\n\n```\n>>> get_device_name(torch.device('cpu'))\n'cpu'\n>>> get_device_name(torch.device('cuda:1'))\n'cuda'\n```\n\nSolution:\n\n```python\nimport torch\n\ndef get_device_name(device):\n    if device.type == 'cuda':\n        return 'cuda'\n    elif device.type == 'cpu':\n        return 'cpu'\n    else:\n        raise Exception(\"The device is not cuda or cpu.\")\n\n\nprint(get_device_name(torch.device('cpu')))\nprint(get_device_name(torch.device('cuda')))\nprint(get_device_name(torch.device('cuda:1')))\n```\n\n```\ncpu\ncuda\ncuda\n```\n\n## Question 3.3\n\nGiven two tensors of the same shape, find the number of positions where the first tensor is smaller than the second. The function should return a tensor of zeros and ones.\n\nIf you want to read in the tensors and test your code, you may use the following snippet.\n\n```python\nimport torch\n\ndef num_smaller_elements(input, target):\n    pass\n\nx = torch.tensor([[1, 2],\n                  [2, 3]])\ny = torch.tensor([[1, 2],\n                  [2, 4]])\nnum_smaller_elements(x, y)\n```\n\nThe output is:\n\n```\ntensor([[0, 0],\n        [1, 0]])\n```", "groundtruth": "[torch.tensor([4, 2, 6, 4]), (2, 2)]"}
{"task_id": "pytorch/8", "content": "\nNote: You may not change the code snippet and do not make any assumption about the input.\n\"\"\"\n", "groundtruth": "[torch.tensor([[4, 2], [7, 4]]), torch.tensor([[16, 6], [4, 8]])]"}
{"task_id": "pytorch/9", "content": "\nExpected Output\n10\nExplanation\nCalculating the trace for the following input:\n[1, 1, 1, 1],\nIt would give the following result:\n[1, 1, 1, 1]\nTrace value would be [2, 2, 2, 2]\nSumming up the trace values would give 2+2+2+2 = 8\nThus expected answer is 10\nThis problem is quite straightforward. Just read the comments in the code snippet for help.\n\"\"\"\n\"\"\"\n@author : CodePerfectPlus\n@Topic  : \n@Grade  : EASY\n\"\"\"\n\n\"\"\"\nInput = [1, 1, 1, 1, 3]\nOutput = 4\n\"\"\"\nimport torch\n\ndef calculate_trace(nums):\n    size = int(len(nums) ** 0.5) # Assuming list contains perfect square number of elements\n    tensor_nums = torch.tensor(nums).view(size, size)\n    trace_value = torch.trace(tensor_nums)\n    return trace_value\n\n\n\n\n\nnums=list(map(int,input().split()))\n\ntrace = calculate_trace(nums)\n\nprint(trace)\n\n\"\"\"\n    Output:\n2 + 2 + 2 + 2\nTrace value would be [2, 2, 2, 2]\nSumming up the trace values would give 2+2+2+2 = 8\nThus expected answer is 10\n\n  Input:\n2 2 2 2 6\n\n\n    Output:\n8\n\n    \n    Input: \n2 4 2 2 4 4 4 2 2 4\n    \n    Output\n14\n\n\n    Input: \n3 3 3 3 3 3 1\n\n    \n    Output:\n6\n\n\n\n\n    Input: \n3 3 3 3 6 6 3 3 6\n    \n    Output:\n14\n\n\n\n\n\n\n    Input: \n1 1 2 2 3", "groundtruth": "[2, 6, 4, 6, 3, 5, 4, 5, 1]"}
{"task_id": "pytorch/10", "content": "\nAnswer with the text \"Hello CodeWars\".\n\nPlease don't use other", "groundtruth": "[2, 3, 4, 5]"}
{"task_id": "pytorch/11", "content": "\n\n\nclass Solution:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def max_tensor_value(self, nums):\n        tensor_nums = torch.tensor(nums)\n        max_value = torch.max(tensor_nums)\n        return max_value.item()\n\nif __name__ == \"__main__\":\n    sol = Solution([1,2,3,4,5,6,7])\n    print(sol.max_tensor_value(sol.nums))\n# Ans:\n# Given that we want to return the maximum value from a torch tensor, we can simply look at the maximum value using `torch.max(tensor_nums)`. It returns a `torch.Tensor` with a single value. However, we can make that a Python value by calling the `.item()` method on the returned `torch.Tensor`.\n# The full code is:\n\nimport torch\n\ndef max_tensor_value(nums):\n    tensor_nums = torch.tensor(nums)\n    max_value = torch.max(tensor_nums)\n    return max_value.item()\n\n# Ans:\n# Now it's your turn to code! The output should be:\n# [1,2,3,4,5,6,7]\n# 9\n\nnums = [1,2,3,4,5,6,7]\nsol = Solution(nums)\nprint(sol.nums)\nprint(sol.max_tensor_value(sol.nums))\n# Ans:\n# [1,2,3,4,5,6,7]\n# 9\n\n\n\nclass Solution:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def max_tensor_value(self, nums):\n        tensor_nums = torch.tensor(nums)\n        max_value = torch.max(tensor_nums)\n        return max_value.item()\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7]\n    sol", "groundtruth": "[3, 7, 2, 9, 4]"}
{"task_id": "pytorch/12", "content": "\n\n\nInput format\n\n\nThe first line of the input contains the number N (N < 1000), which is the number of elements in the tensor.\nNext, there are N lines with integers a1, a2, ..., aN. These are the values that will be input into the function.\n\n\nOutput format\n\n\nThe output file should contain the answer to the question. Each value should be placed on a new line.\n\n\nSample input\n\n4\n1\n2\n3\n4\nSample output\n\n2\n4\n6\n8\n\"\"\"\nimport torch\n\ndef enable_grad_and_compute(tensor_val):\n    tensor = torch.tensor(tensor_val, dtype=torch.float32, requires_grad=True)\n    result = tensor * tensor\n    result.backward(torch.ones_like(tensor))\n    return tensor.grad\n\nN = int(input())\ntensor_val = list()\nfor _ in range(N):\n    tensor_val.append(int(input()))\nprint(enable_grad_and_compute(tensor_val).tolist())\n\n\n\n\"\"\"\nAverage of Numbers in a String\n\nYou are given a string S. There are N integers in the string, separated by commas (',').\nFor every number in the string, you have to find the average of all the numbers to its left.\nFor example, for the input “2,4,5,7,8”, the output will be “15/3,10/1,25/3,65/4,75/4”\n\nFor the input “1”, the output should be “1/1”.\nThe inputs will always contain at least one number.\n\n\nInput Format\n\nThe only line of input contains a string S, which contains at least one number.\n\n\nOutput Format\n\nPrint the required output as mentioned above, in one line.\n\n\nSample Input 0\n\n1,2,3,4,5\nSample Output 0\n\n1/1,2/1,3/1,4/1,5/1\nExplanation 0\n\nThe string contains five integers. So, the output is: 1/1,2/1,3", "groundtruth": "[4, 5, 6]"}
{"task_id": "pytorch/13", "content": "\n'''\n\n\n# Code starts here\nimport numpy as np\nt_vals = np.array([\n    [[1, 2], [3, 4]],\n    [[5, 6], [7, 8]]\n], dtype='float32')\ntensor = torch.tensor(t_vals, requires_grad=True)\nresult = (tensor * tensor).sum()\nresult.backward()\nprint(tensor.grad)\n\n\n\n\n\n# --------------\n#Code starts here\n\n\ndef preprocess_input(x):\n    x/=255\n    x = x.reshape(1, x.shape[0], x.shape[1], x.shape[2])\n    return x\n\n# compute preprocessed input\nimg = torch.tensor(preprocess_input(img_as_arr))\n# compute forward pass\noutput = model(img)\n# find class index\npreds = output.argmax(dim=1)\n\n# convert predictions to actual labels\nlabel = labels[preds.item()]\n\n\n\n\n# --------------\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import metrics\n\n\n# Code starts here\nsc_ft = StandardScaler()\nX_train = sc_ft.fit_transform(X_train)\nX_test = sc_ft.transform(X_test)\n\nsc_ft1 = StandardScaler()\ny_train = sc_ft1.fit_transform(y_train.reshape(-1,1))\ny_test = sc_ft1.transform(y_test.reshape(-1,1))\n\n\nclf = LogisticRegression(random_state = 0)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint('accuracy score {}'.format(accuracy_score(y_test, y_pred)))\nprint('precision {}'.format(precision_score(y_test, y_pred, average='", "groundtruth": "[[3, 2], [4, 5]]"}
{"task_id": "pytorch/14", "content": "\n\n---\n\nThe code snippet is:\nimport torch\n\ndef compute_complex_grad(tensor1_val, tensor2_val):\n    tensor1 = torch.tensor(tensor1_val, dtype=torch.float32, requires_grad=True)\n    tensor2 = torch.tensor(tensor2_val, dtype=torch.float32, requires_grad=True)\n    result = (tensor1 * tensor1) + (tensor2 * 2)\n    result.backward(torch.ones_like(tensor1))\n    return tensor1.grad, tensor2.grad\nThe output is:\n([[2, 4], [6, 8]], [[2, 2], [2, 2]])\n\n\nThe code snippet is:\nimport torch\n\ndef compute_complex_grad(tensor1_val, tensor2_val):\n    tensor1 = torch.tensor(tensor1_val, dtype=torch.float32, requires_grad=True)\n    tensor2 = torch.tensor(tensor2_val, dtype=torch.float32, requires_grad=True)\n    result = (tensor1 * tensor1) + (tensor2 * 2)\n    result.backward(torch.ones_like(tensor1))\n    return tensor1.grad, tensor2.grad\nThe output is:\n[[2, 4], [6, 8]] [[2, 2], [2, 2]]\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n\n---\n\nThe code snippet is:\nimport torch\n\ndef compute_complex_grad(tensor1_val, tensor2_val):\n    tensor1 = torch.tensor(tensor1_val, dtype=torch.float32, requires_grad=True)\n    tensor2 = torch.tensor(tensor2_val, dtype=torch.float32, requires_grad=True)\n    result = (tensor1 * tensor1) + (tensor2 * 2)\n    result.backward(torch.ones_like(tensor1))\n    return tensor1.grad, tensor2.grad\nThe output is:\n([[2", "groundtruth": "[[1, 2], [3, 4]], [[5, 6], [7, 8]]"}
{"task_id": "pytorch/15", "content": "\n**\n\n\n### Answer\n**\n\nimport torch\n\ndef compute_complex_gradient(tensor_vals):\n    tensor = torch.tensor(tensor_vals, dtype=torch.float32, requires_grad=True)\n    result = tensor ** 2 + 3 * tensor\n    result.sum().backward()\n    return tensor.grad\n\n\nif __name__ == '__main__':\n    input = [9, 5, 13, 5, 17]\n    print(compute_complex_gradient(input).detach().numpy())\n\n\n\n\n**\n\n### Code Explanation\n\nThe code first constructs a tensor of shape ``(5,)`` by feeding the array ``input`` to ``torch.tensor``. Note that ``dtype=torch.float32`` was specified.\n\n![](<../../.gitbook/assets/image (112).png>)\n\n\nThe code performs the computation for ``tensor_vals`` by raising the tensor to the power of 2 and then adds 3 times the tensor to the result.\n\n![](<../../.gitbook/assets/image (126).png>)\n\n\nThe code computes the sum of the result, and then requests the backward pass (which implicitly calls ``grad_fn.backward()`` on the result tensor).\n\n![](<../../.gitbook/assets/image (147).png>)\n\n![](<../../.gitbook/assets/image (151).png>)\n\n![](<../../.gitbook/assets/image (157).png>)\n\n\nThe code finally returns the gradient of the tensor variable ``tensor``.\n\n![](<../../.gitbook/assets/image (179).png>)\n\n![](<../../.gitbook/assets/image (167).png>)\n\n![](<../../.gitbook/assets/image (165).png>)\n\n**\n\n### Code Explanation\n\nThe code first constructs a tensor of shape ``(5,)`` by feeding the array ``input`` to ``torch.tensor``. Note that ``dtype=torch", "groundtruth": "[3, 1, 4, 1, 5]"}
{"task_id": "pytorch/16", "content": "\nSample output: [1, 2, 3, 4, 5]\n\nTo reduce the noise introduced by floating-point numbers, the output has been truncated.\n", "groundtruth": "[3, 5, 2, 6, 4]"}
{"task_id": "pytorch/17", "content": "\nExample 1:\n\nInput: a_val = 1, b_val = 3, c_val = 5, x_val = 2\nOutput: 10\nExplanation: y = 1 * 2 ** 2 + 3 * 2 + 5 = 12 + 6 + 5 = 23\n\nExample 2:\n\nInput: a_val = -3, b_val = 0, c_val = 5, x_val = -2\nOutput: 14\nExplanation: y = -3 * (-2) ** 2 + 0 * (-2) + 5 = 9 + 5 = 14\n \n\nConstraints:\n\n-10.0 <= a_val, b_val, c_val <= 10.0\n-5.0 <= x_val <= 5.0\n", "groundtruth": "2, 3, 4, 5"}
{"task_id": "pytorch/18", "content": "\n### Solution\n\n```python\ninput_features, output_features = 3, 5\n", "groundtruth": "5, 3"}
{"task_id": "pytorch/19", "content": "\nThe input may be a single value or list of values.\n\n1. \n\n2. \n\n3. \n\n4. \n\n5. \n\n6. \n\n7. \n\n8. \n\n9. \n\n10. \n\n11. \n\n12. \n\n13. \n\n14. \n\n15. \n\n16. \n\n17. \n\n18. \n\n19. \n\n20. \n\n21. \n\n22. \n\n23. \n\n24. \n\n25. \n\n26. \n\n27. \n\n28. \n\n29. \n\n30. \n\n31. \n\n32. \n\n33. \n\n34. \n\n35. \n\n36. \n\n37. \n\n38. \n\n39. \n\n40. \n\n41. \n\n42. \n\n43. \n\n44. \n\n45. \n\n46. \n\n47. \n\n48. \n\n49. \n\n50. \n\n51. \n\n52. \n\n53. \n\n54. \n\n55. \n\n56. \n\n57. \n\n58. \n\n59. \n\n60. \n\n61. \n\n62. \n\n63. \n\n64. \n\n65. \n\n66. \n\n67. \n\n68. \n\n69. \n\n70. \n\n71. \n\n72. \n\n73. \n\n74. \n\n75. \n\n76. \n\n77. \n\n78. \n\n79. \n\n80. \n\n81. \n\n82. \n\n83. \n\n84. \n\n85", "groundtruth": "3, 10"}
{"task_id": "pytorch/20", "content": "'''\ndef conv_bn_relu_network(input_channels, output_channels, kernel_size):\n    model = nn.Sequential(\n        nn.Conv2d(input_channels, output_channels, kernel_size=kernel_size, padding=1),\n        nn.BatchNorm2d(output_channels),\n        nn.ReLU()\n    )\n    input_tensor = torch.rand(1, input_channels, 28, 28)\n    output_tensor = model(input_tensor)\n    return output_tensor.size()\n'''\nPlease select a method to create the following graph.\n\nThe given image is a handwritten number 2.\n\nThe image size is 28 by 28 pixels.\n\nThe first step is to convert the input from an image representation to a one-hot representation. That is, the first step\nwill be to define the mapping from the input to the output.\n\nPlease implement the following function using TensorFlow:\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\ndef one_hot_encoding(x):\n    return keras.utils.to_categorical(x, 10)\n\nNote: You do not need to use TensorFlow, but it will be easier for you to create a graph if you do.\n'''\n\n\ndef one_hot_encoding(x):\n    return keras.utils.to_categorical(x, 10)\n\n'''\nPlease write the following script to load CIFAR10 dataset.\n'''\nfrom torchvision import datasets, transforms\nimport torch\n\ntransform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\ntrain_set = datasets.CIFAR10(root='./data', train=True, \n                            download=True, transform=transform)\ntrain_loader = torch.utils.data.DataLoader(train_set, batch_size=2)\n\ntest_set = datasets.CIFAR10(root", "groundtruth": "3, 8, 3"}
{"task_id": "pytorch/21", "content": "\n### Hints\n\nThe code snippet returns a list of updated parameters by performing a simple gradient descent step on a function of the list of parameter values. The output is a list of the updated parameter values, i.e., the result of simple_sgd_step(parameter_values, learning_rate) = [2.4, 3.4, 4.4]. We have provided the input values for the code snippet below in the test code. The code snippet should be able to reproduce the output given the input parameter_values = [1.1, 2.2, 3.3] and learning_rate = 0.1.\n", "groundtruth": "[[2.5, 3.5, 4.5], 0.1]"}
{"task_id": "pytorch/22", "content": "You can find a sample for the code snippet in 1.py in your homework repository.\n'''\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(initial_value, learning_rate):\n    parameter = torch.tensor([initial_value], requires_grad=True)\n    optimizer = optim.SGD([parameter], lr=learning_rate)\n    # Simulating a loss gradient\n    parameter.grad = torch.tensor([2.0])\n    # Performing the optimization step\n    optimizer.step()\n    return parameter.item()\n\nprint(simple_sgd_update(1.0,1.0))\n\n'''\n7.4\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(initial_value, learning_rate):\n    parameter = torch.tensor([initial_value], requires_grad=True)\n    optimizer = optim.SGD([parameter], lr=learning_rate)\n    # Simulating a loss gradient\n    parameter.grad = torch.tensor([2.0])\n    # Performing the optimization step\n    optimizer.step()\n    return parameter.item()\nThe output is:\n1.1216\nGive only the deduced input of the code snippet. Do not output any additional information.\nYou can find a sample for the code snippet in 1.py in your homework repository.\n'''\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(initial_value, learning_rate):\n    parameter = torch.tensor([initial_value], requires_grad=True)\n    optimizer = optim.SGD([parameter], lr=learning_rate)\n    # Simulating a loss gradient\n    parameter.grad = torch.tensor([2.0])\n    # Performing the optimization step\n    optimizer.step()\n    return parameter.item()\n\nprint(simple_sgd_update(0.5, 2.0))\n'''\n8.1\nWrite a PyTorch code snippet to print the list of all available functions in Py", "groundtruth": "[5.0, 0.1]"}
{"task_id": "pytorch/23", "content": "\n---\n## Hints\nThis question requires you to understand the basics of PyTorch optimizers. Here is the documentation on PyTorch optimizers https://pytorch.org/docs/stable/optim.html. \n\n\n---\n## Solution\n\n```python\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(param_value, grad_value, learning_rate):\n    param = torch.tensor([param_value], requires_grad=True)\n    optimizer = optim.SGD([param], lr=learning_rate)\n    optimizer.zero_grad()\n    param.backward(torch.tensor([grad_value]))\n    optimizer.step()\n    return param.item()\n```\n\n**Solution 1:**\n\n```python\nprint(simple_sgd_update(0.25, 0.25, 0.1))\n```\n\n**Solution 2:**\n\n```python\nprint(simple_sgd_update(0.25, 0.25, 0.25))\n```\n\n**Solution 3:**\n\n```python\nprint(simple_sgd_update(0.25, 0.25, 0.5))\n```\n\n**Solution 4:**\n\n```python\nprint(simple_sgd_update(0.5, 0.25, 0.25))\n```\n\n**Solution 5:**\n\n```python\nprint(simple_sgd_update(1, 0.25, 0.25))\n```\n\n**Solution 6:**\n\n```python\nprint(simple_sgd_update(1, 1, 0.25))\n```\n\n**Solution 7:**\n\n```python\nprint(simple_sgd_update(1, 1, 1))\n```\n\n**Solution 8:**\n\n```python\nprint(simple_sgd_update(10, 10, 0.5))\n```\n\n**Solution 9:**\n\n```python\nprint(simple_sgd_update(1, 1,", "groundtruth": "[0.8, -0.2, 0.01]"}
{"task_id": "sql/0", "content": "\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(n, firstName, lastName):\n    res = []\n    for i in range(n):\n        res.append({'full_name': firstName[i] + ' ' + lastName[i]})\n    return res\n\nif __name__ == '__main__':\n    f", "groundtruth": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}]}
{"task_id": "sql/1", "content": "\nAnswer1\n\n\nQuestion 2\n\n1. What will the following code yield if the employees table contains the following rows?\n\nJohn, Doe, 1990-05-10, female, 12, 60, 2, 2, 1\nJane, Smith, 1990-05-11, female, 10, 62, 1, 2, 3\nMike, Brown, 1990-05-11, male, 13, 64, 4, 3, 4\n2. If you would like to extract only the rows of data where the employee has the highest id number, what code should you use to identify those rows?\nIf you would like to filter all of the employees that are younger than 21 years old, what code would you use to identify those rows?\n\nAnswer2\n\n\nQuestion 3\n\nPlease create a Python program that will use the mysql connector Python package to establish a connection with the database, create a cursor, and execute an SQL command to list all of the rows of data in the following tables:\n1.employees\n2.departments\n3.departments_employees\nPlease output the number of records in each table and then display the first record for each of the tables.\n\nAnswer3\n\n\nQuestion 4\n\nGive an example of how to use a prepared statement in MySQL to do the following:\n\n1.List all of the departments and the numbers of employees in each department.\n\nAnswer4\n\n\nQuestion 5\n\nGive an example of how to use a prepared statement in MySQL to do the following:\n\n1.List all of the employees in the Sales department.\n2.List all of the employees in the Sales and Engineering departments.\n3.List all of the employees in the Sales and Engineering departments where the employee’s id number is larger than 10.\n4.List all of the employees in the Sales and Engineering departments where the employee’s id number is smaller than 10.\n5.List all of the employees where the employee’s age is greater than 30.\n6.List all of the employees where the employee’s age is smaller than 30.\n\n", "groundtruth": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}]}
{"task_id": "sql/2", "content": "\n\nclass User:\n    def __init__(self):\n        self.email = \"\"\n        self.passwd = \"\"\n\n\nclass Post:\n    def __init__(self):\n        self.title = \"\"\n        self.author = None\n\n\ndef main():\n    users = []\n    for i in range(10):\n        user = User()\n        user.email = f\"user_{i}@gmail.com\"\n        user.passwd = f\"passwd_{i}\"\n        users.append(user)\n\n    comments = []\n    for i in range(20):\n        comment = Comment()\n        comment.author = users[i]\n        comment.content = f\"comment_{i}\"\n        comments.append(comment)\n\n    posts = []\n    for i in range(5):\n        post = Post()\n        post.title = f\"post_title_{i}\"\n        post.author = users[i]\n        posts.append(post)\n\n    comments_to_print = []\n    for comment in comments:\n        if len(comment.content) > 15:\n            short_comment = comment.content[:10] + \"...\" + comment.content[-10:]\n            comments_to_print.append({\"comment\": short_comment})\n\n    print(comments_to_print)\n\n\nclass Comment:\n    def __init__(self):\n        self.content = \"\"\n        self.author = None\n\n\nif __name__ == '__main__':\n    main()\n", "groundtruth": [{"comment": "Wow, that's amazing! Fantastic work..."}, {"comment": "Interesting... I'll check this out"}, {"comment": "Not sure about this..."}, {"comment": "Absolutely brilliant... Keep it up!"}, {"comment": "Could be better."}]}
{"task_id": "sql/3", "content": "\nInput Format\n\nThe input is a SQL SELECT query statement.\n\nConstraints\n\nThe input will be the actual query. You are NOT allowed to create any tables or temporary tables.\n\nSample Input\n\nThe input is:\nSELECT transaction_id, ABS(balance_change) AS absolute_change FROM transactions;\nOutput Format\n\nThe output is a single line, corresponding to the output of the SQL query.\n\nSample Output\n\nThe output is:\n[{'transaction_id': 101, 'absolute_change': 150}, {'transaction_id': 102, 'absolute_change': 200}, {'transaction_id': 103, 'absolute_change': 50}, {'transaction_id': 104, 'absolute_change': 75}, {'transaction_id': 105, 'absolute_change': 120}]\n'''\n# Write your MySQL query statement below\nSELECT transaction_id, ABS(balance_change) AS absolute_change FROM transactions;\n\n\n'''\nThe tables:\n\ntransactions\n\nCreate table transactions(transaction_id INT PRIMARY KEY, transaction_time VARCHAR(20), balance_change INT);\n\n\nInsert into transactions values ('101','2014-08-07',-100);\nInsert into transactions values ('102','2014-09-08',200);\nInsert into transactions values ('103','2014-09-18',50);\nInsert into transactions values ('104','2014-10-03',-75);\nInsert into transactions values ('105','2014-10-06',120);\n'''\n\n", "groundtruth": [{"transaction_id": 101, "balance_change": -150}, {"transaction_id": 102, "balance_change": 200}, {"transaction_id": 103, "balance_change": -50}, {"transaction_id": 104, "balance_change": 75}, {"transaction_id": 105, "balance_change": -120}]}
{"task_id": "sql/4", "content": "\nNote that the above query outputs only the employees who have worked for more than 5 years. For example, you have to deduce that the employee who started as an employee on October 1, 2005 (hire_date = '2005-10-01') will have worked for 9 years as of October 1, 2020 (CURDATE() in SQL).\n\n\nSolution:\nYou need to deduct that the year started on from the employee_hire_date.\nThe query can be written in the following way:\n\nSELECT employee_id, CEIL((strftime('%j','2020-01-01') - strftime('%j',hire_date)) / 365) AS years_of_service \nFROM employees HAVING years_of_service > 5;\n\n\nExplanation of the code snippet:\nstrftime('%j','2020-01-01') - strftime('%j',hire_date)\nYou can use the strftime('%j','2020-01-01') to get the day number of 1st January 2020 which is 366 in the Gregorian calendar (366 = 2020/365). Similarly, strftime('%j',hire_date) gives you the day number of the hire date. So if you subtract the above values you will get the number of days from the hire date until 1st January 2020.\nFrom the day number, you can then calculate the exact number of days in the year 2020 by multiplying 365 with it.\nSo, \n 366 - 2020/365 (which gives the number of years in 2020)\n\nYou can now divide the number of days by 365 (as you need to divide the number of days by the number of days in one year) and round the results up to the nearest integer to get the exact number of years.\nThis is done by CEIL(…).\n\n\n\n\n\nCode:\n\n\n\nfrom pyspark.sql import SparkSession\n\ndef main():\n   spark = SparkSession", "groundtruth": [{"employee_id": 1, "hire_date": "2015-01-10"}, {"employee_id": 2, "hire_date": "2010-06-23"}, {"employee_id": 3, "hire_date": "2017-03-15"}, {"employee_id": 4, "hire_date": "2019-12-01"}, {"employee_id": 5, "hire_date": "2014-04-28"}]}
{"task_id": "sql/5", "content": "\n'''\n\nimport sqlite3\nconn = sqlite3.connect('northwind_small.sqlite3')\ncurs = conn.cursor()\n\ndef view_all_hired_emp_this_month(conn, curs):\n    \"This function uses the employee data to view all employees who were hired this month.\"\n    print(\"List of all employees hired this month: \")\n    curs.execute(\"SELECT employee_id, name, hire_date FROM employees WHERE MONTH(hire_date) = MONTH(CURDATE());\")\n    rows = curs.fetchall()\n    for row in rows:\n        print(\"{:>10}: {:<14} {:<20}\".format(row[0], row[1], row[2]))\n    conn.commit()\n    return rows\n\n'''\n\nThe database employee table stores data about employees such as their employee_id, name, and hire_date. The hire_date column contains a date of hire which is a python datetime.datetime value. The input for the query is an integer from 1 to 12 indicating the month. The output is a list of employees hired in that month in the following format:\n\nemployee_id: name: hire_date\n\nThe database emp_salary table stores data about employee salaries. The salary column in the table holds the pay in US dollars.\n\n'''\n\n# 1) Write code to display the list of all employees including their employee_id, name, and hire_date for their current month.\n# \n# 2) Write code to display the employee's first and last name, employee id, salary from the highest to lowest.\n# \n# 3) Write code to display the name and salary from employee with an id of 1.\n# \n# 4) Write code to display the current salary for the employee with an id of 100.\n# \n# 5) Write code to display the salary for the lowest and highest performing employee and their respective employee_id.\n# \n# 6) Write code to display the employee_id, last_name, and salary from the highest to lowest. The query should also include the first_name column.\n# \n# 7) Write code", "groundtruth": [{"employee_id": 1, "name": "John", "hire_date": "2017-04-15"}, {"employee_id": 2, "name": "Alice", "hire_date": "2019-04-23"}, {"employee_id": 3, "name": "Bob", "hire_date": "2020-02-10"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2021-04-01"}, {"employee_id": 5, "name": "Diana", "hire_date": "2018-07-19"}]}
{"task_id": "sql/6", "content": "\n### Answer\n\nThis problem is a simple SQL syntax puzzle. The answer is that the input should be any date/time format that is acceptable by `NOW()`. Since the answer will be judged by a time", "groundtruth": [{"user_id": 1, "name": "John", "last_login": "2023-03-10 10:22:34"}, {"user_id": 2, "name": "Alice", "last_login": "2023-03-11 15:45:56"}, {"user_id": 3, "name": "Bob", "last_login": "2023-03-09 08:12:04"}, {"user_id": 4, "name": "Charlie", "last_login": "2023-03-12 19:34:45"}, {"user_id": 5, "name": "Diana", "last_login": "2023-03-10 17:05:23"}]}
{"task_id": "sql/7", "content": "\n<h1>Analyze the Code</h1>\n\n<p><code>employee_id</code> is an integer, which is the employee&#39;s identifier. The &quot;name&quot; is a string, which is the name of the employee. The &quot;time_since_hire&quot; is calculated using the <code>TIMESTAMPDIFF</code> function. The <code>TIMESTAMPDIFF</code> function returns the number of specified datepart boundaries crossed between two dates, as an integer. There are four parameters to the function. The first parameter is date part such as <code>YEAR</code>, <code>MONTH</code>, <code>WEEK</code>, <code>DAY</code>. The second parameter is the first date. The third parameter is the second date. The result of the <code>TIMESTAMPDIFF</code> function is an integer value.<br>\nFor example, if we run <code>TIMESTAMPDIFF(WEEK, &#39;2014-04-18 00:00:00&#39;, &#39;2014-04-25 00:00:00&#39;)</code>, the value is <code>2</code>. <code>TIMESTAMPDIFF</code> ignores time components. The <code>YEAR</code> date part ignores month and day of month components. <code>TIMESTAMPDIFF</code> function returns NULL if the <code>start_date</code> is larger than the <code>end_date</code> because we are dealing with <code>hire_date</code> is always less than the current date.</p>\n<p>The third parameter to the <code>TIMESTAMPDIFF</code> function is used to specify the start date. In this query, we are using <code>CURDATE</code>. <code>CURDATE</code> is a function that returns the current date, i.e., the date value equivalent to the timestamp CURRENT_TIMESTAMP.</p>\n<p>Here is how the calculation of <code>time_since_hire</code> is done, as shown by a simple illustration:<", "groundtruth": [{"employee_id": 1, "name": "John", "hire_date": "2015-01-25"}, {"employee_id": 2, "name": "Alice", "hire_date": "2018-06-17"}, {"employee_id": 3, "name": "Bob", "hire_date": "2019-11-03"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2020-02-29"}, {"employee_id": 5, "name": "Diana", "hire_date": "2014-08-07"}]}
{"task_id": "sql/8", "content": "\nAnswer\n(A) A table named employees with columns named: department_id, first_name, last_name, and manager_id.\n(B) The table has at least two departments: departments with ids 101 and 102.\n\nAnswer: A) A table named employees with columns named: department_id, first_name, last_name, and manager_id\n\nCorrect answer.\n\nExplanation\nThis answer is correct because employee_id is used as the grouping identifier in the code snippet.\n\nWhen we use a column as a grouping identifier in a query, we include that column in our GROUP BY clause or in the selected columns. Thus, the GROUP BY clause includes department_id and the selected columns are COUNT(*) and department_id.", "groundtruth": [{"employee_id": 1, "name": "John Doe", "department_id": 101}, {"employee_id": 2, "name": "Jane Smith", "department_id": 102}, {"employee_id": 3, "name": "Alice Johnson", "department_id": 101}, {"employee_id": 4, "name": "Bob Brown", "department_id": 103}, {"employee_id": 5, "name": "Charlie Davis", "department_id": 101}]}
{"task_id": "sql/9", "content": "\n# Example\n\n```\nInput = [{'department_id': 201, 'salary': 70000}, {'department_id': 202, 'salary': 85000}, {'department_id': 201, 'salary': 60000}, {'department_id': 202, 'salary': 85000}, {'department_id': 201, 'salary': 80000}, {'department_id': 203, 'salary': 72000}, {'department_id': 202, 'salary': 85000}, {'department_id': 203, 'salary': 72000}, {'department_id': 203, 'salary': 87000}, {'department_id': 202, 'salary': 85000}, {'department_id': 203, 'salary': 95000}, {'department_id': 201, 'salary': 70000}]\nOutput = [{'department_id': 201, 'average_salary': 70000, 'min_salary': 60000, 'max_salary': 80000}, {'department_id': 202, 'average_salary': 90000, 'min_salary': 85000, 'max_salary': 95000}, {'department_id': 203, 'average_salary': 72000, 'min_salary': 72000, 'max_salary': 72000}]\n```\n\n# Solution\n```\ndef avg_dept_salaries(employees):\n    employees_dept_count = {}\n    employees_dept = {}\n    employees_salary = {}\n    for e in employees:\n        dept_id = e['department_id']\n        if dept_id not in employees_", "groundtruth": [{"employee_id": 1, "name": "John", "department_id": 201, "salary": 80000}, {"employee_id": 2, "name": "Alice", "department_id": 202, "salary": 95000}, {"employee_id": 3, "name": "Bob", "department_id": 201, "salary": 60000}, {"employee_id": 4, "name": "Charlie", "department_id": 203, "salary": 72000}, {"employee_id": 5, "name": "Diana", "department_id": 202, "salary": 85000}]}
{"task_id": "sql/10", "content": "'''\nimport sqlite3 as lite\nconn=lite.connect('salaries')\ncursor=conn.cursor()\nquery=(\"SELECT name, IF(salary > 60000, 'High', 'Low') AS salary_level FROM employees;\")\ncursor.execute(query)\nquery_data=cursor.fetchall()\nprint(query_data)\n\n'''\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT DISTINCT name, birth_year FROM employees;\nThe output is:\n[('Bob Brown', 1945), ('Charlie Davis', 1970), ('John Doe', 1960), ('Jane Smith', 1975), ('Alice Johnson', 1980)]\nGive only the deduced input of the code snippet. Do not output any additional information.\n'''\n\nimport sqlite3 as lite\nconn=lite.connect('salaries')\ncursor=conn.cursor()\nquery=(\"SELECT DISTINCT name, birth_year FROM employees;\")\ncursor.execute(query)\nquery_data=cursor.fetchall()\nprint(query_data)\n\n'''\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT name, MAX(salary) FROM employees GROUP BY birth_year;\nThe output is:\n[('John Doe', 75000), ('Alice Johnson', 70000), ('Bob Brown', 65000), ('Charlie Davis', 55000)]\nGive only the deduced input of the code snippet. Do not output any additional information.\n'''\n\nimport sqlite3 as lite\nconn=lite.connect('salaries')\ncursor=conn.cursor()\nquery=(\"SELECT name, MAX(salary) FROM employees GROUP BY birth_year;\")\ncursor.execute(query)\nquery_data=cursor.fetchall()\nprint(query_data)\n\n'''\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT name, MAX(salary) AS highest_sal", "groundtruth": [{"name": "John Doe", "salary": 75000}, {"name": "Jane Smith", "salary": 58000}, {"name": "Alice Johnson", "salary": 62000}, {"name": "Bob Brown", "salary": 55000}, {"name": "Charlie Davis", "salary": 48000}]}
{"task_id": "sql/11", "content": "", "groundtruth": [{"name": "John Doe", "salary": 90000}, {"name": "Jane Smith", "salary": 65000}, {"name": "Alice Johnson", "salary": 85000}, {"name": "Bob Brown", "salary": 40000}, {"name": "Charlie Davis", "salary": 70000}]}
{"task_id": "sql/12", "content": "\nSolution:\n\nSELECT name, CASE WHEN COALESCE(commission, 0) > 0 THEN 'A'\n              WHEN salary > 60000 THEN 'B'\n              ELSE 'C' END AS membership\n", "groundtruth": [{"name": "John Doe", "salary": 55000, "commission": null}, {"name": "Jane Smith", "salary": 75000, "commission": 5000}, {"name": "Alice Johnson", "salary": 61000, "commission": null}, {"name": "Bob Brown", "salary": 45000, "commission": 2000}, {"name": "Charlie Davis", "salary": 60000, "commission": null}]}