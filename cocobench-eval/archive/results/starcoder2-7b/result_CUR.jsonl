{"task_id": "cpp/0", "content": "\nExample 1:\nInput:\ninput_string = \"abacadabacdad\"\nOutput:\n\nExplanation:\n\nThis is the frequency map:\n'a' 1\n'b' 2\n'c' 4\n'd' 2\nSo the result would be:\n\na: 4\nb: 2\nc: 4\nd: 2\n\nSo we will take the largest ones, which is 4. But there are multiple of them so we will take the last ones that are left after taking the smaller ones. We will take 'c' and 'd'. So the result would be \"cd\".\nExample 2:\nInput:\ninput_string = \"a\"\nOutput:\n\nExplanation:\n\nWe only have one 'a' so that is the answer.\nExample 3:\nInput:\ninput_string = \"ac\"\nOutput:\n\nExplanation:\n\nSince there are 2 'a's, but one of them is duplicate we ignore it and we only have one 'c'. So that is the answer.\n\nHint:\nYou may need to implement 3 custom classes to get the information that you need.\n'''/Python/1013 - Partition Array Into Three Parts With Equal Sum.py\n'''\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\n\nFormally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] +... + A[i] == A[i+1] + A[i+2] +... + A[j-1] == A[j] + A[j-1] +... + A[A.length - 1])\n\n \n\nExample 1:\n\nInput: A = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\nExample 2:\n\nInput: A = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\nExample ", "groundtruth": {"s": "aabcbbca"}}
{"task_id": "cpp/1", "content": "\nExample 1:\nInput: nums = [3,3,3,3,5,5,5,2,2,7]\nOutput: 4\nExplanation: Choosing nums[1] = 3, nums[4] = 5 and nums[8] = 2 will give us 3 + 5 + 2 = 10 in total.\nNote that you cannot choose more than three integers.\nExample 2:\n\nInput: nums = [3,3,3,3,5,5,5,2,2,7,7,7]\nOutput: 4\nExplanation: Choosing nums[0] = 3, nums[4] = 5, and nums[8] = 7 will give us 3 + 5 + 7 = 15 in total.\nNote that you cannot choose more than three integers.\n\nclass Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        unordered_map<int, int> m;\n        for (int & n : nums) ++m[n];\n        int count = 0;\n        for (auto [k, v] : m)\n            count += v / 2;\n        return count;\n    }\n};\n\n给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。\n\n请返回 nums 的动态和的最大值。\n\n \n\n示例 1：\n\n输入：nums = [1,1,1,1,1]\n输出：10\n解释：动态和最大为 max(runningSum) = max(1, 1, 1, 1, 1) = 1 + 1 + 1 + 1 + 1 = 5 。\n注意，动态和可以通过使用数组中的每一个元素恰好一次，在数组的最左端或最右端形成子数组。\n示例 2：\n\n输入：nums = [1,2,3,4]\n输出：10\n解释：动态和最大为 max(runningSum) = max(1, 2, 3, 4) = 1 + 2 + 3 + 4 = 10 。\n示例 3：\n\n输入：nums =", "groundtruth": {"nums": [3, 2, 6, 1, 4]}}
{"task_id": "cpp/2", "content": "\nConstraints\n\nn ≤ 100,000 where n is the length of nums\nnums is a permutation of [1, 2, 3,..., n]\nExample 1\nInput\nCopy\n\n6\n[1, 3, 2, 4, 6, 5]\nOutput\nCopy\n\n3\nExplanation\nThe optimal solution is to select 2, 4, and 5. Each element can be increased by at most 1. The longest increasing subsequence has a length of 3.\n\nExample 2\nInput\nCopy\n\n3\n[2, 1, 2]\nOutput\nCopy\n\n2\n\nExample 3\nInput\nCopy\n\n1\n[1]\nOutput\nCopy\n\n1\nExplanation\nThe longest increasing subsequence has a length of 1.\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\n    public:\n        int maxSelectedElements(vector<int>& nums) {\n            int n = nums.size();\n            vector<int> dp(n+2, 1);\n            int ans = 1;\n            for(int i = 1; i <= n; i++){\n                dp[nums[i-1]+1] = max(dp[nums[i-1]]+1, 1);\n                dp[nums[i-1]] = max(dp[nums[i-1]-1]+1, 1);\n                ans = max(ans, max(dp[nums[i-1]], dp[nums[i-1]+1]));\n            }\n            return ans;\n        }\n};\n\nint main(){\n    Solution s;\n    return 0;\n}\n/LeetCode/1310.cpp\n/* https://leetcode.com/problems/xor-queries-of-a-subarray/\nGiven the array arr of positive integers and the array queries where queries[i] = [Li, Ri], for each query i compute the XOR of elements from Li to Ri (that is, arr[Li] xor arr[Li+1] xor... xor arr[Ri] ). Return an array containing the result for the given queries.\n\nExample 1:\n\nInput: arr = [1,3,4,8], queries = [[0,1],[1", "groundtruth": {"nums": [1, 4, 7, 10]}}
{"task_id": "cpp/3", "content": "\nWe need only the deduced input and do not require any other auxiliary information.\n\nExample:\nInput:\n[\"Solution\",\"longestCommonPrefix\",\"longestCommonPrefix\",\"longestCommonPrefix\"]\n[[],[\"0\",\"11\"],[\"12\",\"123\"],[\"13\",\"13\"]]\n\nOutput:\n[null,3,0,1]\n\nExplanation:\nSolution s = new Solution();\ns.longestCommonPrefix([\"0\",\"11\"]); // return 3, because the longest common prefix is \"0\"\ns.longestCommonPrefix([\"12\",\"123\"]); // return 0, because the longest common prefix is \"\"\ns.longestCommonPrefix([\"13\",\"13\"]); // return 1, because the longest common prefix is \"1\"\nNote:\n1 <= arr1.length, arr2.length <= 100\n1 <= arr1[i].length, arr2[j].length <= 20\narr1[i] and arr2[j] consist of digits.\n1 <= num1 <= num2 <= 10^15\n*/\n\nclass Trie {\npublic:\n    Trie* next[10];\n    bool isEnd = 0;\n\n    Trie() {\n        fill(next, next+10, (Trie*)NULL);\n    }\n\n    ~Trie() {\n    //    cout<<\"Destructor\\n\";\n        for (int i=0; i<10; ++i) {\n            if (next[i]!=NULL) {\n                delete next[i];\n            }\n        }\n    }\n\n    void insert(string word) {\n        Trie* Node=this;\n        for(char c: word){\n            int i=c-'0';\n            if(Node->next[i]==NULL)\n                Node->next[i]=new Trie();\n            Node=Node->next[i];\n        }\n        Node->isEnd=1;\n    }\n    \n    int commonPrefix(string s) {\n        Trie* Node = this;\n        int len=0;\n        for(char c : s){\n            int i = c - '0';\n            if(Node->next[i]==NULL) return len;\n            Node = Node->next[i];\n            len++;\n        }\n        return len;\n        \n    }\n};\n\nclass Solution {\npublic:\n    int longestCommonPrefix(vector", "groundtruth": {"arr1": [1, 10, 100], "arr2": [1000]}}
{"task_id": "cpp/4", "content": "Example 1:\nInput: words = [\"a\",\"b\",\"ab\"]\nOutput: 2\nExample 2:\nInput: words = [\"bc\",\"ab\",\"a\"]\nOutput: 1\n*/\nclass Solution {\npublic:\n\n    int isPrefixAndSuffix(string str1,string str2){\n\n        if(str1.size()<=str2.size()){\n            int j=0,i=0;\n            while(i<str1.size()){ //&& j<str2.size()){\n             //   cout<< \"First while  str1[i] \" <<str1[i]<< \" str2[j] \" <<str2[j]<< endl;\n                if(str1[i++]!=str2[j++])\n                    return 0;\n                 if(i==str1.size())break;\n            }\n\n            i=str1.size()-1;j=str2.size()-1;\n            while(i>=0){ //&& j>=str2.size()-str1.size()){\n                cout<< \"Second while str1[i] \" <<str1[i]<< \" str2[j] \" <<str2[j]<< endl;\n                if(str1[i--]!=str2[j--])\n                    return 0;\n                   if(i<0)break;\n            }\n           //   cout<< \"->>> ans  == 1  str1  \" << str1 <<  \" str2 \"<< str2<<  endl;\n              return 1;\n        }\n        return 0;\n\n    }\n\n    int countPrefixSuffixPairs(vector<string>& words) {\n        // sort(words.begin(),words.end());\n        int ans=0;\n        for(int i=0;i<words.size()-1;i++){\n            for(int j=i+1;j<words.size();j++){\n                // cout<< \"main func words[i] \" <<words[i]<< \" words[j] \" <<words[j]<< endl;\n                ans+=isPrefixAndSuffix(words[i], words[j]);\n            }\n\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    int countPrefixSuffixPairs(vector<string>& words) {\n        int res = 0;\n        for (int i = 0; i < words.size(); i++) {\n           ", "groundtruth": {"words": ["pa", "papa", "ma", "mama"]}}
{"task_id": "cpp/5", "content": "*/\n#include<bits/stdc++.h>\n#define inf 1e18\n#define pb push_back\n#define fr(a,b) for(int i = a; i < b; i++)\n#define rev(a,b) for(int i = a; i >=b; i--)\n#define mp(a,b) make_pair(a,b)\n#define ff first\n#define ss second\n#define endl \"\\n\"\n#define debug(x) cout << #x << \" \" << x << endl;\nusing namespace std;\n#define ll long long int\n\nclass Solution {\npublic:\n    bool prime[10000000];\n    vector<int>dx{0,1,1,1,0,-1,-1,-1};\n    vector<int>dy{1,1,0,-1,-1,-1,0,1};\n    map<int,int>mp;\n    void sieve() {\n    int n=999999;\n    \n    memset(prime, true, sizeof(prime));\n    for (int p = 2; p * p <= n; p++) {\n        if (prime[p] == true) {\n            for (int i = p * p; i <= n; i += p)\n                prime[i] = false;\n        }\n    }\n    }\n    void solve(int i,int j,int n,int m,vector<vector<int>>& v,int s,vector<vector<bool>>&vis,int k) {\n        if(i<0 || j<0 || i>=n || j>=m)\n            return;\n        s=10*s+v[i][j];\n        if(s>10 && prime[s]) {\n            mp[s]++;\n        }\n        solve(i+dx[k],j+dy[k],n,m,v,s,vis,k);\n    }\n    int mostFrequentPrime(vector<vector<int>>& v) {\n        sieve();\n        int n=v.size(),m=v[0].size();\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m;j++) {\n                vector<vector<bool>>vis(n,vector<bool>(m,0));\n               ", "groundtruth": {"mat": [[9, 7, 8], [4, 6, 5], [2, 8, 6]]}}
{"task_id": "cpp/6", "content": "\nExample 1:\n\nInput: words = [\"abc\",\"abcabc\",\"abcabcabc\"]\nOutput: 10\nExplanation: The five valid strings that can be constructed are: \"abc\", \"abcabc\", \"abcabcabc\", \"abcabc\" + \"abc\", \"abcabcabc\".\nThe strings \"abcabc\" + \"abc\" and \"abc\" + \"abcabcabc\" are also valid, but only one of them is selected for pairing with the other words.\nThe answer is 10. \nExplanation: \nThere are 10 pairs (abc, abcabcabc), (abc, abcabc), (abc, abcabc), (abc, abc), (abcabc, abcabc), (abcabc, abc), (abcabcabc, abc), (abcabcabc, abcabcabc), (abcabcabc, abcabc), and (abcabcabc, abcabcabc).\n\n\nExample 2:\n\nInput: words = [\"aba\",\"ba\"]\nOutput: 4\nExplanation: There are four valid pairs: (\"aba\", \"aba\"), (\"aba\", \"ba\"), (\"ba\", \"aba\"), and (\"ba\", \"ba\").\nExample 3:\n\nInput: words = [\"a\",\"a\",\"a\",\"a\"]\nOutput: 0\nExplanation: No valid pairs can be constructed.\n\ng> words) {\n        int n=words.size();\n        int ans=0;\n        for(int i=0;i<n;i++){\n            string s=words[i];\n            for(int j=0;j<words.size();j++){\n                if(s==words[j]) ans++;\n            }\n        }\n        return ans;\n    }\n};\n/Count Subsequences That Satisfy the Given Sum Condition.cpp\nGiven an array words of strings and an integer s, return the number of strings in the array that can be concatenated together and form a string that has a length of less than or equal to s. If there are zero strings, return 0.\n\nA string cat be concatenated with other strings if the last character of the first string matches the first character of the second string.\n\n \n\nExample 1:\n\nInput: words = [\"abc\",\"de\",\"fgh\"], s = 3\nOutput: 2\nExplanation: The two strings can be \"de\" and \"fgh\".", "groundtruth": {"words": ["pa", "papa", "ma", "mama"]}}
{"task_id": "cpp/7", "content": "\nExample\nThe following are some examples.\nexample1\nThe input:\nbottomLeft = [[3,1],[9,0],[1,0],[10,3]]\ntopRight =  [[9,5],[2,7],[4,6],[7,4]]\nThe output:\n1\nExplanation:\nThe squares are:\n[[3,1],[9,0],[1,0],[10,3]], [[9,0],[2,7],[4,6],[7,4]] and [[3,1],[9,5],[4,6],[10,3]], [[3,1],[9,5],[2,7],[10,3]], [[9,5],[2,7],[4,6],[7,4]]. The largest square among them is [[9,0],[2,7],[4,6],[7,4]] and its area is 4.\nexample2\nThe input:\nbottomLeft = [[3,3],[2,0],[1,1],[0,4]]\ntopRight =  [[0,4],[2,0],[1,1],[0,1]]\nThe output:\n0\nExplanation:\nNone of the squares intersects the others.\n*/\n#include <vector>\n\nusing namespace std;\n\nclass CodeWarsSquareAreas {\n    static long long getIntersection(int l1, int r1, int l2, int r2) {\n        if (l2 <= l1 && r2 >= r1) { return r1 - l1; }\n        if (l1 <= l2 && r1 >= r2) { return r2 - l2; }\n        if (l2 <= r1 && r2 >= r1) { return r1 - l2; }\n        if (l2 <= r1 && r2 >= l1) { return r2 - l1; }\n        return 0;\n    }\n    static long long largestSquareArea(vector<vector<int>>& bottomLeft, vector<vector<int>>& topRight) {\n        long long ans = 0;\n        for (int i = 0; i < bottomLeft.size(); ++i) {\n            for (int j = i + 1; j < topRight.size(); ++j) {\n                long long x = getIntersection(bottomLeft[i][0], topRight[i][0],", "groundtruth": {"bottomLeft": [[1, 1], [2, 2], [1, 2]], "topRight": [[3, 3], [4, 4], [3, 4]]}}
{"task_id": "cpp/8", "content": "'''/python_programs/55_Python_programs/093.py\n# Python code for program to find factorial \n# of large numbers \n \n# A simple function that multiplies n \n# terms one by one \ndef multiplyTerms(x, n): \n \n    # Initialize result \n    f = 1\n  \n    # Multiply f with x n  \n    # times \n    for i in range(1, n + 1): \n        f = f * x \n  \n    return f \n  \n# Function for finding factorial \n# of a large number \ndef factorial(n): \n    fact = [0] * 500 \n  \n    # Initialize first digit as 1 \n    fact[0] = 1 \n    fact_size = 1\n  \n    # Multiply to get the factorial \n    for i in range(2, n + 1): \n        fact_size = multiplyTerms(i, fact_size, fact) \n          \n    for i in range(fact_size - 1, -1, -1): \n        print(fact[i], end = \"\") \n  \n# Driver Code \nn = 999\nfactorial(n) \n/python_programs/6_Python_programs/078.py\n#Python Program to get list of files in a directory\n# get list of all files in directory\nimport os\npath_string = input(\"Enter the file path : \")\nfiles = os.listdir(path_string)\nprint(\"Files in directory: \",files)\n# get list of all files in directory ending in.txt\nfiltered_files = [file for file in files if file.endswith(\".txt\")]\nprint(\"File in directory ending in.txt: \",filtered_files)\n/python_programs/12_Python_programs/054.py\n# Python program to reverse a list in-place\n \ndef reverse_list(elements):\n    i = 0\n    j = len(elements) - 1\n \n    # Traverse towards the middle\n    # swapping elements at the\n    # start and end.\n    while i<j:\n        elements[i], elements[j] = elements[j], elements[i]\n \n        # move pointers\n        i += 1\n        j -= 1\n \n# Driver code\nelements = [10, 20, 5, 40, 30]\n", "groundtruth": {"nums": [1, 3], "changeIndices": [1, 1, 1, 2, 1, 1, 1]}}
{"task_id": "cpp/9", "content": "\nExample 1:\n\nInput: nums = [5,1,3,2,2,5], changeIndices = [3,2,2,3,1,1,3,4,2,3,4,2,5,6,5,3,6,5,3]\nOutput: 7\nExplanation: The optimal solution is to assign the integers from [5,2,4,5,3] to the remaining cells.\n*/\n\n\nclass Solution {\npublic:\n    vector<vector<bool>> seen;\n    \n    vector<int> pre;\n    int dp(vector<int>& A, int i, int j){\n        int x = pre[j]-pre[i-1];\n        if(x > A[i-1]){\n            return 10000000;\n        }\n        if(seen[i][j]){\n            return 0;\n        }\n        seen[i][j] = true;\n        if(i == A.size() || j == pre.size()){\n            return dp(A, i, j-1)+j-i;\n        }\n        return min(dp(A, i, j-1)+j-i, dp(A, i+1, j));\n        \n    }\n    int earliestAcq(vector<vector<int>>& edges, int N) {\n        pre.resize(10001);\n        for(int i = 0; i < edges.size(); i++){\n            pre[edges[i][0]]++;\n            pre[edges[i][1]]++;\n        }\n        for(int i = 1; i <= 10000; i++){\n            pre[i] += pre[i-1];\n        }\n        sort(pre.begin(), pre.end());\n        \n        seen.resize(10001);\n        for(auto&v:seen){\n            v.resize(10001, false);\n        }\n        return dp(pre, 0, N-1);\n    }\n};\n/334.Increasing Triplet Subsequence.cpp\n/*\nGiven an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n\n \n\nExample 1", "groundtruth": {"nums": [0, 0, 1, 2], "changeIndices": [1, 2, 1, 2, 1, 2, 1, 2]}}
{"task_id": "cpp/10", "content": "'''\n\n#leetcode submit region begin(Prohibit modification and deletion)\nfrom typing import List\n\n\nclass Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:\n        h = len(grid)\n        w = len(grid[0])\n        ans = 0\n        for i in range(1, h):\n            grid[i][0] += grid[i - 1][0]\n        for j in range(1, w):\n            grid[0][j] += grid[0][j - 1]\n        for i in range(1, h):\n            for j in range(1, w):\n                grid[i][j] += grid[i - 1][j] + grid[i][j - 1] - grid[i - 1][j - 1]\n                if grid[i][j] <= k:\n                    ans += 1\n        return ans\n\n\n# leetcode submit region end(Prohibit modification and deletion)\n\ns = Solution()\ns.countSubmatrices([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2)\n/src/273.integer-to-english-words.py\n'''\nA non-negative integer is called an Integer if it is matched by the regular expression \"^\n(0|[1-9]\\d*)$\".\n\nGiven an Integer, can you write an algorithm to output the name of it in English? Output\nmust be lowercase.\n\nExample 1:\n\nInput: 123\nOutput: \"one hundred twenty three\"\nExample 2:\n\nInput: 12345\nOutput: \"twelve thousand three hundred forty five\"\nExample 3:\n\nInput: 1234567\nOutput: \"one million two hundred thirty four thousand five hundred sixty seven\"\nExample 4:\n\nInput: 1234567891\nOutput: \"one billion two hundred thirty four million five hundred sixty seven\nthousand eight hundred ninety one\"\n'''\n\n#leetcode submit region begin(Prohibit modification and deletion)\nfrom functools import reduce\nfrom typing import List\n\nimport", "groundtruth": {"grid": [[7, 2, 9], [1, 5, 0], [2, 6, 6]], "k": 20}}
{"task_id": "cpp/11", "content": "\nI only want to know the deduction based on the code snippet.\n\nThe only possible output in my case is “5”. But the output I got is “12”, “14” …. Can you suggest what’s wrong here?\n\n\n */\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main() {\n\tint t;\n\tcin>>t;\n\twhile(t--) {\n\t\tint n;\n\t\tcin>>n;\n\t\tstring s[n],s1[n],s2[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tcin>>s[i];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tcin>>s1[i];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tcin>>s2[i];\n\t\tint m1[n][3],m2[n][3];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<3;j++) {\n\t\t\t\tm1[i][j]=0;\n\t\t\t\tm2[i][j]=0;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tif(s[i][j]=='Y') {\n\t\t\t\t\tm1[i][0]++;\n\t\t\t\t\tif(s1[i][j]=='Y')\n\t\t\t\t\t\tm1[i][1]++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm1[i][2]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tif(s[i][j]=='N') {\n\t\t\t\t\tm2[i][0]++;\n\t\t\t\t\tif(s1[i][j]=='Y')\n\t\t\t\t\t\tm2[i][1]++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2[i][2]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint a=0,b=0,c=0,anss=INT_MAX;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;", "groundtruth": {"grid": [[0, 1, 0, 1, 0], [2, 1, 0, 1, 2], [2, 2, 2, 0, 1], [2, 2, 2, 2, 2], [2, 1, 2, 2, 2]]}}
{"task_id": "cpp/12", "content": "\n*/\n\nclass Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n        vector<int> arr1Sorted, arr2Sorted, arr1, arr2;\n        int n=nums.size();\n        arr1Sorted.push_back(nums[1]);\n        arr2Sorted.push_back(nums[2]);\n        arr1.push_back(nums[1]);\n        arr2.push_back(nums[2]);\n        for(int i=3; i<n; i++) {\n            auto ub1=upper_bound(arr1Sorted.begin(), arr1Sorted.end(), nums[i]);\n            auto ub2=upper_bound(arr2Sorted.begin(), arr2Sorted.end(), nums[i]);\n            int greater1=arr1Sorted.end()-ub1;\n            int greater2=arr2Sorted.end()-ub2;\n            if(greater1>greater2 || (greater1==greater2 && arr1Sorted.size()<=arr2Sorted.size())) {\n                arr1Sorted.insert(ub1, nums[i]);\n                arr1.push_back(nums[i]);\n            }\n            else {\n                arr2Sorted.insert(ub2, nums[i]);\n                arr2.push_back(nums[i]);\n            }\n        }\n        arr1.insert(arr1.end(), arr2.begin(), arr2.end());\n        return arr1;\n    }\n};\n/*\n\nGiven a singly linked list, determine if it is a palindrome.\n\nExample 1:\n\nInput: 1->2\nOutput: false\nExample 2:\n\nInput: 1->2->2->1\nOutput: true\nFollow up:\nCould you do it in O(n) time and O(1) space?\n\n*/\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        //O(n) time and O(n) space\n        /*\n        if(!head)\n            return true;\n        if(!head->next)\n            return true;\n        vector<int>", "groundtruth": {"nums": [5, 14, 3, 1, 2]}}
{"task_id": "cpp/13", "content": "\nExample 1:\nInput: happ = [4,4,1,5], k = 3\nOutput: 12\nExplanation:\nThe deduced input is: 4,4,1,5,3\nThe corresponding output is: 12\nExample 2:\nInput: happ = [1,6,5,3,4,3], k = 2\nOutput: 13\nExplanation:\nThe deduced input is: 1,6,5,3,4,3,2\nThe corresponding output is: 13\nConstraints:\n1 <= happ.length <= 100\n0 <= happ[i] <= 100\n0 <= k <= happ.length\n'''\n\nclass Solution:\n    def maximumHappinessSum(self, happ: List[int], k: int) -> int:\n        happ.sort()\n        length = len(happ)\n        for i in range(k):\n            happ[length-1-i] -= i\n        return sum(happ)/582. Kill Process.py\n'''\nGiven n processes, each process has a unique PID (process id) and its PPID (parent process id).\n\nEach process only has one parent process, but may have one or more children processes. This is just like a tree structure. Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.\n\nWe use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.\n\nNow given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.\n\nExample 1:\nInput: \npid =  [1, 3, 10, 5]\nppid = [3, 0, 5, 3]\nkill = 5\nOutput: [5,10]\nExplanation: \n           3\n         /   \\\n        1     5\n             /\n            10\nKill 5 will also kill 10.\nNote:\nThe given kill id is guaranteed to be", "groundtruth": {"happiness": [1, 1, 1, 1], "k": 2}}
{"task_id": "cpp/14", "content": "\nNote: \nThe return value can be any one of the 4 following:\n[\"\"]\n[\"\"]\n[\"abcd\"]\n[\"\"]\n\n\n*/\n\nclass Solution {\npublic:\n    static bool cmp(string a,string b){\n        if(a.size()<b.size())return true;\n        if(a.size()==b.size() && a<b)return true;\n        return false;\n    }\n    vector<string> shortestSubstrings(vector<string>& arr) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        int n=arr.size();\n        vector<string>ans(n,\"\");\n        vector<vector<string>>substring(n);\n        map<string,int>m;\n        for(int i=0;i<n;i++){\n            int k=arr[i].size();\n            for(int j=0;j<k;j++){\n                string sub=\"\";\n                for(int l=j;l<k;l++){\n                    sub+=arr[i][l];\n                    bool found = false;\n                    for (const auto& str : substring[i]) {\n                        if (str == sub) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (found) continue;\n                    m[sub]++;\n                    substring[i].push_back(sub);\n                }\n            }\n            sort(substring[i].begin(),substring[i].end(),cmp);\n        }\n        for(int i=0;i<n;i++){\n            for(auto it:substring[i]){\n                if(m[it]==1){\n                    ans[i]=it;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n};/0301_1399_count-largest-group/solution.java\n/*\n319.\tBulb Switcher\nhttps://leetcode.com/problems/bulb-switcher/\n\nThere are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the i-th round, you toggle every i bulb. For the n-th round, you only toggle the last bulb.", "groundtruth": {"arr": ["abc", "bcd", "abcd"]}}
{"task_id": "cpp/15", "content": "*//*\nThis question is asked by Snapchat.\n\nGiven an integer n, return all the structurally unique BST's (binary search trees), \nwhich has exactly n nodes of unique values from 1 to n.\n*/\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> helper(int n) {\n        vector<TreeNode*> tree_vec;\n        if(n == 0) {\n            tree_vec.push_back(nullptr);\n            return tree_vec;\n        }\n        for(int i = 1; i <= n; i++) {\n            int left = i - 1, right = n - i;\n            vector<TreeNode*> left_vec = helper(left);\n            vector<TreeNode*> right_vec = helper(right);\n            for(auto l : left_vec) {\n                for(auto r : right_vec) {\n                    TreeNode* root = new TreeNode(i);\n                    root->left = l;\n                    root->right = r;\n                    tree_vec.push_back(root);\n                }\n            }\n        }\n        return tree_vec;\n    }\n    vector<TreeNode*> generateTrees(int n) {\n        return helper(n);\n    }\n};/*\nThere are n chips arranged in a row. They are color coded, \nconsecutively from 1 to n.\n\nYou are also given an integer k.\n\nRearrange the colors of the chips such that the k^th - \nchip in the row has color k.\n\nReturn the smallest possible cost to do so.\n\nThe cost assigned to each chip is determined by the number of \ndifferent color chips positioned to the left and right of the \ncurrent chip in the row (including the current chip).\n\nYou may rearrange the colors of the chips in any order (including the order in which", "groundtruth": {"nums": [12, -2, -2, -2, -2], "k": 5}}
{"task_id": "cpp/16", "content": "/41. First Missing Positive/README.md\nGiven an unsorted integer array, find the smallest missing positive integer.\n\nExample 1:\n\nInput: [1,2,0]\nOutput: 3\nExample 2:\n\nInput: [3,4,-1,1]\nOutput: 2\nExample 3:\n\nInput: [7,8,9,11,12]\nOutput: 1\nNote:\n\nYour algorithm should run in O(n) time and uses constant extra space.\n/424. Longest Repeating Character Replacement/424. Longest Repeating Character Replacement.cpp\nclass Solution {\npublic:\n    int characterReplacement(string s, int k) {\n        vector<int> alpha(26);\n        int start=0;\n        int maxLen=0;\n        for(int i=0;i<s.size();i++){\n            int pos=s[i]-'A';\n            alpha[pos]++;\n            if(alpha[pos]>maxLen) maxLen=alpha[pos];\n            if(maxLen+k<i-start+1){\n                alpha[s[start]-'A']--;\n                start++;\n            }\n            if(maxLen+k==i-start+1){\n                maxLen=0;\n                start++;\n            }\n        }\n        return maxLen+k;\n    }\n};\n/398. Random Pick Index/398. Random Pick Index.cpp\nclass Solution {\npublic:\n    Solution(vector<int>& nums) {\n        this->nums=nums;\n    }\n    \n    int pick(int target) {\n        if(this->nums.size()==0) return 0;\n        \n        vector<int> ind;\n        int max_ind=INT_MIN;\n        for(int i=0;i<this->nums.size();i++){\n            if(nums[i]==target) ind.push_back(i);\n            if(nums[i]==target){max_ind=max(max_ind,i);}\n        }\n        \n        return ind[rand()%ind.size()];\n    }\n    \nprivate:\n    vector<int> nums;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * int param", "groundtruth": {"nums": [1, 4, 2, 3], "queries": [[0, 1]]}}
{"task_id": "cpp/17", "content": "\nConstraints:\n\nThe string's' consists only of lowercase English letters and '?' characters.\nThe length of's' is between 1 and 100, inclusive.\n\n/Array/1143. Longest Common Subsequence.md\nhttps://leetcode.com/problems/longest-common-subsequence/\n\nGiven two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.\n\n \n\nExample 1:\n\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\nExample 2:\n\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\nExample 3:\n\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m = len(text1)\n        n = len(text2)\n        \n        # Create a dp 2d array to store the result for all possible combinations of substrings from the input text.\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        \n        # Iterate over all possible starting indices i and j.\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                # If the character at index i - 1 in text1 matches the character at index j - 1 in text2,\n                # the maximum subsequence will be 1 plus the subsequence found in the previous iteration.\n                if text1[i - 1] == text2[", "groundtruth": {"s": "a?a?"}}
{"task_id": "cpp/18", "content": "\nConstraints:\n1 <= nums.length <= 2000\n1 <= nums[i], k <= 1000\n*/\n\nclass Solution\n{\npublic:\n  int sumOfPower(vector<int> &nums, int k)\n  {\n    int n = nums.size();\n    const int mod = 1e9 + 7;\n    vector<vector<long long>> dp(n + 1, vector<long long>(k + 1, 0));\n    dp[0][0] = 1;\n    for (int pos = 1; pos <= n; pos++)\n    {\n      for (int len = pos; len >= 1; len--)\n      {\n        for (int sum = nums[pos - 1]; sum <= k; sum++)\n        {\n          dp[len][sum] = (dp[len][sum] + dp[len - 1][sum - nums[pos - 1]]) % mod;\n        }\n      }\n    }\n    long long ans = 0;\n    for (int len = 1; len <= n; len++)\n      ans = (ans + dp[len][k] * power(2, n - len)) % mod;\n    return ans;\n  }\n\n  long long power(long long a, long long b)\n  {\n    long long res = 1;\n    while (b)\n    {\n      if (b & 1)\n        res = (res * a) % mod;\n      a = (a * a) % mod;\n      b >>= 1;\n    }\n    return res;\n  }\n};\n/*\nGiven a string S of '0's, '1's, and '?'s, find and return the least number of flips required to make S a strictly increasing sequence.\n\nIf there is no way to increase S by exactly one flip, return -1.\n\nStrictly increasing sequence means that each element in the sequence is strictly greater than all elements before it.\n\n \n\nExample 1:\n\nInput: \"01?\"\nOutput: 1\nExplanation: We flip the first '0' to get \"01?\".\nExample 2:\n\nInput: \"011101?\"\nOutput: 2\nExplanation: We flip the first '0' and the last '?'. Then, we finally have \"011111\".\nExample", "groundtruth": {"nums": [1, 2, 3], "k": 3}}
{"task_id": "cpp/19", "content": "*/\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubstrings(string s, char c) {\n        long long cnt = 0;\n        for(int i = 0; i < s.size(); ++i)\n            cnt += (s[i] == c);\n        return cnt * (cnt + 1) / 2;\n    }\n};\n\nint main(){\n\tSolution solution;\n\tcout << solution.countSubstrings(\"aba\", 'b') << endl;\n}/code/576_out_of_boundary_paths.cpp\n/*\nThere is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.\n\nExample 1:\nInput:m = 2, n = 2, N = 2, i = 0, j = 0\nOutput: 6\n\nExample 2:\nInput:m = 1, n = 3, N = 3, i = 0, j = 1\nOutput: 12\n\nNote:\nGiven m, n and N are in the range of [1, 500].\nGiven i and j are in the range of [0, n-1].\n*/\n\n// 动态规划（超时）\n#include <bits/stdc++.h>\nusing namespace std;\nclass Solution {\npublic:\n    int findPaths(int m, int n, int N, int i, int j) {\n        // base case\n        if (N == 0 || i < 0 || i >= m || j < 0 || j >= n) {\n            return 0;\n        }\n\n        // 状态转移方程\n        // 1. 不能向前移动\n        // 2. 向前移动会导致行/列越界，不能前进\n        // 3. 向右移动时，行不变，列加1\n        // 4. 向下", "groundtruth": {"s": "zzz", "c": "z"}}
{"task_id": "cpp/20", "content": "*/\n/*\nYou are given a 0-indexed 2D integer array grid of size m x n, where (r, c) represents the position (r, c) in the m x n grid and its value is the number written on this cell.\n\nTwo cells are connected horizontally if they are in the same row and share at least one column.\nTwo cells are connected vertically if they are in the same column and share at least one row.\nTwo cells are connected diagonally if they are diagonally adjacent cells in the 4 directions (i.e. the distance between them is 1).\n\nAn artistic rectangle is defined to be a set of four cells that are connected horizontally, vertically, and/or diagonally. A diagonal is counted as horizontally or vertically if it connects two cells in different rows and/or columns.\n\nReturn the number of artistic rectangles in grid.\n\nNote that the four cells within an artistic rectangle must belong to the same row or the same column.\n\n \n\nExample 1:\n\n\nInput: grid = [[1,2],[3,4]]\nOutput: 1\nExplanation: There is only one artistic rectangle in the grid with the four cells in positions (0, 0), (0, 1), (1, 0), and (1, 1).\nExample 2:\n\n\nInput: grid = [[1,2,3],[3,2,1]]\nOutput: 2\nExplanation: There are two artistic rectangles in the grid with the four cells in positions (0, 0), (0, 1), (0, 2), and (1, 1), as shown above.\nThe rectangle with the four cells in positions (0, 1), (0, 2), (1, 0), and (1, 1) is not artistic since it is not connected horizontally. \nExample 3:\n\n\nInput: grid = [[1,2,3,4,5],[8,9,10,11,6],[7,12,13,14,15],[16,17,18,19,20],[17,21,22,23,24]]\nOutput: 2\nExplanation: There are two artistic rectangles in the", "groundtruth": {"word": "dabdcbdcdcd", "k": 2}}
{"task_id": "numpy/0", "content": "\"\"\"\n\ndef reshape_and_transpose(arr):\n    reshaped_arr = np.reshape(arr, (3, 2))\n    transposed_arr = np.transpose(reshaped_arr)\n    return transposed_arr\"\"\"\nGiven the below code,\n\nimport numpy as np\n\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([100, 200, 300, 400])\n\nthe code prints:\n\n101 202 303 404\nPlease deduce the output of the following code based on the code snippet and the output.\n\nThe code snippet is:\narr = np.empty((2, 4), dtype=int)\narr[0] = 100\narr[1] = 200\n\nprint(arr[1] + arr[0])\n\nThe output is:\n101 202 303 404\nGive the deduced output of the code snippet. Do not output any additional information.\n\"\"\"\n\narr = np.empty((2, 4), dtype=int)\narr[0] = 100\narr[1] = 200\n\nprint(arr[1] + arr[0])\n\"\"\"\nAssume there are 5 files named a.txt, b.txt, c.txt, d.txt, e.txt\n\nThe first file (a.txt) contains the numbers:\n7\n2\n5\n4\n8\n\nThe second file (b.txt) contains the numbers:\n6\n2\n8\n3\n7\n\nThe third file (c.txt) contains the numbers:\n5\n2\n7\n3\n4\n\nThe fourth file (d.txt) contains the numbers:\n5\n9\n3\n6\n8\n\nThe fifth file (e.txt) contains the numbers:\n2\n4\n3\n5\n9\n\nWrite a python program that merges all the numbers from these 5 files in a single text file.\n\nFor example, if we run the program, the output of the program should contain the below numbers.\n7\n2\n5\n4\n8\n6\n", "groundtruth": [1, 2, 3, 4, 5, 6]}
{"task_id": "numpy/1", "content": "\nThe answer is: np.array([1,2,3,4,5,6,7,8]).\n\n\n```{r}\ndf.questions[200]\ndf.solutions[200]\n```\n\n## Q201\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport numpy as np\n\ndef add_and_stack(arr1, arr2):\n    arr1_plus_arr2 = arr1 + arr2\n    arr1_plus_arr2_stacked = np.vstack((arr1_plus_arr2, arr1))\n    return arr1_plus_arr2_stacked\nThe output is:\n([1, 2, 10], [5, 5, 13])\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nThe answer is: np.array([3,3])\n\n\n```{r}\ndf.questions[201]\ndf.solutions[201]\n```\n\n## Q202\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\ndef remove_and_combine(arr1, arr2):\n    arr2_removed_2nd = np.delete(arr2, 1)\n    arr2_removed_2nd_combined = np.concatenate((arr1, arr2_removed_2nd))\n    return arr2_removed_2nd_combined\nThe output is:\n[1, 2, 4, 4, 3]\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nThe answer is: np.array([2,4,3])\n\n\n```{r}\ndf.questions[202]\ndf.solutions[202]\n```\n\n## Q203\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport numpy as np\n\ndef create_arrays():\n    arr1 = np.arange(9).reshape(3,3)\n    arr2 = np.arange(36).reshape(3, 3, 4)\n   ", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/2", "content": "import numpy as np\n\ndef expand_transpose_squeeze(arr):\n    expanded_arr = np.expand_dims(arr, axis=0)\n    transposed_arr = np.transpose(expanded_arr, (0, 2, 1, 3))\n    squeezed_arr = np.squeeze(transposed_arr)\n    return squeezed_arr\n\ninput = [[1, 2, 3, 4], [5, 6, 7, 8]]\nresult = expand_transpose_squeeze(input)\nprint(result)[[[1 5]\n  [3 7]]\n\n [[2 6]\n  [4 8]]]\n### Question 5 20 points\n\nPlease write code to convert a string into a single list. The input of the code is the variable \"liststr\" and the output of the code is the variable \"strlist\".\n\nFor example, if the input of the code is the variable \"liststr = \"abcde\" \", then the output of the code is the variable \"strlist = [a, b, c, d, e] \". Please note that the output is a list and the values should be in order. For example, strlist = [a, b, c, d, e], not [a, c, b, d, e] or [e, a, b, c, d]\n\nPlease note that, for the input of the code, the values should be characters (string) and not integers. The values can be any alphabets.\n\n# Write your code here\n\nliststr = \"abcde\"\nstrlist = list(liststr)\nprint(strlist)\n\n\nliststr = \"abcdefg\"\nstrlist = list(liststr)\nprint(strlist)['a', 'b', 'c', 'd', 'e']\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n### Question 6 20 points\n\nPlease write code to merge \"A\" and \"B\" and assign the output to \"AB\" and print \"AB\" based on the following code:\nimport numpy as np\n# Write your code here. You can use numpy.concatenate\nA = np.array([0, 1])\nB =", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/4", "content": "\nHint\nFor the input, try a few values and you will get the result.\n\ndef concat_and_product(arr1, arr2):\n    combined_arr = np.vstack((arr1, arr2))\n    product = np.prod(combined_arr)\n    return product\n\n\ninput\narray([ 38424371, 26915681, 26915746]),\narray([ 53045842, 43417632, 50845320, 57908016, 35513228])\n\n\nimport numpy as np\n\ndef concat_and_product(arr1, arr2):\n    combined_arr = np.vstack((arr1, arr2))\n    product = np.prod(combined_arr)\n    return product\n\ninput = array([ 38424371, 26915681, 26915746]),\n\narray([ 53045842, 43417632, 50845320, 57908016, 35513228])\n\nprint(concat_and_product(input[0], input[1]))# Question: 3\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport numpy as np\n\ndef check_even(num):\n    return not np.bitwise_and(num,1)\n\ndef count_even(arr):\n    total = 0\n    for num in arr:\n        total += check_even(num)\n    return total\n\nThe output is:\n3\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nHint\nFor the input, try a few values and you will get the result.\n\ndef check_even(num):\n    return not np.bitwise_and(num,1)\n\ndef count_even(arr):\n    total = 0\n    for num in arr:\n        total += check_even(num)\n    return total\n\ninput = [0,", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/5", "content": "\nimport numpy as np\n\ndef create_exp_rounded(start, stop, num):\n    lin_arr = np.linspace(start, stop, num)\n    exp_arr = np.exp(lin_arr)\n    rounded_arr = np.round(exp_arr, 2)\n    return rounded_arr\n\ncreate_exp_rounded(0, 1.39, 5)# 4. How would you calculate the standard deviation of the array given below?\n\nimport numpy as np\nmy_array = np.array([3, 5, 8, 2, 6, 7, 9])\n\nimport statistics\nprint(statistics.stdev(my_array))2.6255793144577013\n", "groundtruth": [0, 1, 5]}
{"task_id": "numpy/6", "content": "\n• The given array of the reshape function should be of shape (6, 1), but it is actually of shape (3, 2).\n\n• The given array of the transpose function should be of shape (2, 3), but it is actually of shape (3, 2).\n\n### Code\n\nThe code snippet for the deduced input is:\n\nimport numpy as np\n\ndef reshape_and_transpose(arr):\nreshaped_arr = np.reshape(arr, (3, 2))\ntransposed_arr = np.transpose(reshaped_arr)\nreturn transposed_arr\n\n• The correct answer is $[1,3,5],[2,4,6]$.\n\n### Answer\n\nIn the reshape function, the array arr has a shape of (6, 1), whereas the desired array's shape is (3, 2). Therefore, if you reshape the array to (3, 2), you will get an output of shape (3, 1). As a result, if you transpose the array, you will obtain an array with the shape (1, 3).\n\nGiven an array of the reshape function with the shape (3, 2), we must reshape the array to (3, 1). The desired output of the transpose function is (2, 3), which can be achieved by transposing the array (3, 1).\n\nThus, the correct deduced input is:\n\narr = np.array([1, 2, 3, 4, 5, 6]).reshape((3, 2))\narr = np.transpose(arr)\nprint(arr)\n\n### Explanation\n\nThis question is designed for learners who struggle to figure out how the code works. The following are the explanations for this question:\n\n• We will make the given array have the desired shape. Then, we transpose the resulting array.\n\n• The goal of this question is to analyze how the code works without worrying about the specific content in the array arr. This helps you practice your analysis skills instead of focus on the specific content in the given array.\n\n• To answer the question properly, you need to firstly understand the reshape function. The function takes the following four parameters:\n\n• array: The array to be reshaped.\n\n• newshape:", "groundtruth": [1, 2, 3, 4, 5, 6]}
{"task_id": "numpy/7", "content": "```\n\n## Question\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\n\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\nstacked_arr = np.hstack((arr1, arr2))\nsplit_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\nreturn (split_arr1, split_arr2)\nThe output is:\n\n([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nGive only the deduced input of the code snippet. Do not output any additional information.\n\n\n## Answer\n```\nnp.hstack((arr1,arr2))\nnp.split(np.hstack((arr1,arr2)), 2, axis=1)\n```\n## Code\n```python\nimport numpy as np\n\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\n```\n## Test Code\n```\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\nans1, ans2 = stack_and_split(arr1, arr2)\nprint(ans1)\nprint(ans2)\n```\n\n## Result\n```\n[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n```\n## Question\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\n\nimport numpy as np\n\ndef split_and_stack(arr1, arr2):\nsplit_arr1, split_arr2 = np.split(arr1, 2, axis=0)\nstacked_arr = np.vstack((split_arr1", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/8", "content": "\n(The correct answer is [[1, 5, 2, 6], [3, 7, 4, 8]].)\n\nYour answer:\nimport numpy as np\n\ndef expand_transpose_squeeze(arr):\n    expanded_arr = np.expand_dims(arr, axis=0)\n    transposed_arr = np.transpose(expanded_arr, (0, 2, 1, 3))\n    squeezed_arr = np.squeeze(transposed_arr)\n    return squeezed_arr\n\narr = [[1, 2], [3, 4], [5, 6], [7, 8]]\nprint(expand_transpose_squeeze(arr))# 6.3\nFind the index of the 5th largest number in the following code snippet based on the output of the program.\n\n(The correct answer is 2.)\n\nYour answer:# Use this code snippet\nimport numpy as np\nimport heapq\n\ndef n_largest_numbers(arr, n):\n    \"\"\"Return the n largest numbers of a list as a list.\n    If arr contains fewer than n numbers, return them all.\n    \"\"\"\n    largest_nums = heapq.nlargest(n, arr)\n    return largest_nums\n\n# The main part of the code\nnp.random.seed(42)\narr = np.random.randint(0, 100, size=(10))\nprint(arr)\nn_largest_numbers(arr, 5)# 6.4\nFind the input that leads to the following output based on the code snippet and the output.\n\nThe code snippet is:\n# This code runs but returns no meaningful output\nimport numpy as np\n\ndef my_function(x):\n    arr = np.array(x)\n    arr[1:-1] += 2 * arr[1:-1] + 3\n    arr += 2\n    return arr\nThe output is:\narray([ 6, 14, 22, 28, 36, 44, 48, 56, 60])\n\n(The correct answer is np.array([5, 11, 19, 26, 34, 42,", "groundtruth": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]}
{"task_id": "numpy/9", "content": "\nExample:\nif the deduced input of the code snippet is (arr1, arr2, arr3, constant),\narr1, arr2 and arr3 can be either [2, -4, 5] or [5, -1, 2]\nand constant can be either -1 or 1\n\nTest cases are as shown in the code template.\n*/\n\n#include <iostream>\n#include <assert.h>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> test_case_1{\n    {1, 2, 3},\n    {3, 4, 5},\n    {2, 1, -3}\n};\n\nvector<int> test_ans_1{-21, -7, 7};\n\nvector<vector<int>> test_case_2{\n    {2, 5, 3},\n    {-3, 1, 2},\n    {1, -2, 4}\n};\n\nvector<int> test_ans_2{-10, 16, 18};\n\nvoid print_vector(const vector<int>& vec) {\n    cout << \"[\";\n    for (size_t i = 0; i < vec.size(); ++i) {\n        cout << vec[i] << \", \";\n    }\n    cout << \"]\\n\";\n}\n\nclass Solution {\npublic:\n    vector<int> combineOperations(vector<int>& vec1, vector<int>& vec2, vector<int>& vec3, int constant) {\n        vector<int> res;\n        int len = vec1.size();\n        for (int i = 0; i < len; ++i) {\n            res.push_back(vec1[i] + vec2[i] - constant);\n        }\n        for (int i = 0; i < len; ++i) {\n            res[i] *= vec3[i];\n        }\n        return res;\n    }\n\n    void test1() {\n        cout << \"test1() \\n\";\n        vector<int> res = combineOperations(test_case_1[0], test_case_1[1], test_case_1[2], 0);\n        print_vector(res", "groundtruth": [[2, 4, 6], [1, 3, 5], [7, 9, 11], 5]}
{"task_id": "numpy/10", "content": "\nThe answer is 102.\n\nNote:\n\nYou are not necessary to worry about the time efficiency of this code snippet.\nYou can assume that: 1) arr1 is a row vector, which means arr1.shape = (1, n); 2) arr2 is a column vector, which means arr2.shape = (n, 1); 3) n is an integer between 1 and 5.\n```\n\n\n```python\nimport numpy as np\n\ndef power_sum(arr1, arr2):\n    powered_arr = np.power(arr1, arr2)\n    result_sum = np.sum(powered_arr)\n    return result_sum\n\nif __name__ == \"__main__\":\n    arr1 = np.array([[3, 7, 9]])\n    arr2 = np.array([[2, 6, 9]])\n    print(power_sum(arr1, arr2))\n\n```\nnding of your function. In order to do that, please do the following:\n\n1. Change your code according to your understanding, please do not change the syntax;\n\n2. Try your function for a given dataset in the notebook and submit your code accordingly.\n\nIf you do not know the syntax to solve the problem, you can call it a day.\n\n## Output Format\n\nPrint the following output for each of the test case:\n\nThe index value of the smallest element among the sublists (if it is present more than once, print the index values of all the smallest elements, sorted in ascending order)\n\nFor example, for test case 1, the output will be:\n\n3, 11\nFor test case 2, the output will be:\n\n8\nNote:\n\nYou can assume that each sublist does have one element, if the smallest element is present more than once.\n\n## Sample Test Cases\n\n### Sample Input 1\n\n```python\n3,5,[5,2,7,3],[3,1],[4,5]\n```\n\n### Sample Output 1\n\n```python\n3, 11\n```\n\n### Sample Input 2\n\n```python\n2,4,[2,5,1,3],[10,6,3,8]\n```\n\n### Sample Output 2", "groundtruth": [[2, 3, 4], [1, 2, 3]]}
{"task_id": "numpy/11", "content": "\nSolution: \n\nGiven the code snippet as input:\nimport numpy as np\n\ndef det_and_inv(matrix):\n    determinant = np.linalg.det(matrix)\n    if determinant == 0:\n        return 'Matrix is singular, cannot compute inverse.'\n    else:\n        inverse = np.linalg.inv(matrix)\n        return determinant, inverse\n\nThe output is:\n(-2.0, [[-3.5, 3.0], [2.0, -1.0]])\n\nThe program is executed with input as:\nimport numpy as np\ninput_matrix = np.array([[1.0, 2.0], [3.0, 4.0]])\n\nThe function det_and_inv returns the output:\ndeterminant, inverse_matrix = det_and_inv(input_matrix)\n\ndeterminant\n\nReturns -2.0\n\ninverse_matrix\n\nReturns [[-3.5, 3.0], [2.0, -1.0]]\n\nThe values for the variables input_matrix, determinant and inverse_matrix are the deduced input.### Problem 5 - Data Visualization\n\nFor this problem, you will use the file named \"insurance.csv\" as the input. This file contains the insurance data of 1338 individuals. Each row is the record of a single user. The first column is the age of the user in years, the second is the gender, the third is the BMI (Body mass index), the fourth is the number of children, the fifth is the smoking habit and the last is the charges of the user.\n\nThe goal of this problem is to visualize this data and investigate the possible relationship between the data. To achieve this goal, please use the data of BMI. You may visualize the data for BMI with a histogram, an ECDF plot and a boxplot. Additionally, please comment on whether there is any relationship between the BMI and smoking habit based on the visualization.\n\nThe code snippet is:\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('insurance.csv')\ndf.head()\nThe output is:\nAge       Sex     BMI  Children      Smoker    Charges\n0   19      female  27.90", "groundtruth": [[2, 6], [4, 7]]}
{"task_id": "numpy/12", "content": "\n\"\"\"\n\n__author__ = ''\n\nfrom functools import reduce\n\ndef sum_multiply_det(matrix1, matrix2, matrix3):\n    sum_matrix = matrix1 + matrix2\n    elementwise_multiplied = sum_matrix * matrix3\n    determinant = reduce(lambda a, b: a * b, [x for row in elementwise_multiplied for x in row])\n    return determinant\n\nif __name__ == \"__main__\":\n    matrix1 = [[-9, 22, -56], [60, -20, 15], [-14, -50, -40]]\n    matrix2 = [[33, -85, 18], [59, -50, 28], [-7, 35, 98]]\n    matrix3 = [[-8, 12, 24], [3, -17, 62], [18, 6, -83]]\n    print(sum_multiply_det(matrix1, matrix2, matrix3))#!/usr/bin/env python3\n\n\"\"\"\n\nYou've been provided the implementation for a function that solves the famous Fibonacci numbers problem.\nHowever, the code has a bug that makes it extremely inefficient.\nThe function has the signature fib(n), which returns the nth Fibonacci number.\n\nThe task is to find where the bug is located and then fix it so that the function works fast enough.\n\nPlease, do not output any additional information.\n\n\"\"\"\n\n__author__ = ''\n\n\ndef fib(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n\nif __name__ == \"__main__\":\n    n = 40\n    result = fib(n)\n    print(result)\n#!/usr/bin/env python3\n\n\"\"\"\n\nIn this challenge, you have to determine which one of the given lists is the largest and return it.\n\nYour code has to return the list as a string (for the example, return the list [1,2,4]).\n\n\"\"\"\n\n__author__ = ''\n\n\ndef find_the_largest_list", "groundtruth": [[[1, 2], [3, 4]], [[1, 0], [0, 1]], [[2, 0], [0, 2]]]}
{"task_id": "numpy/13", "content": "\nExplanation:\n\nThe input could be [1, 2, 3, 4, 5, 6, 7], which is the first case in the output.\n\nThe input could be [1, 1.5, 2, 3, 4, 5, 6, 6.5, 7], which is the second case in the output.import numpy as np\ndef split_median(arr):\n    # Write your code here\n    half = len(arr) // 2\n    median_first_half = np.median(arr[:half])\n    median_second_half = np.median(arr[half:])\n    return median_first_half, median_second_half\n\na = split_median([1, 2, 3, 4, 5, 6, 7])\nb = split_median([1, 1.5, 2, 3, 4, 5, 6, 6.5, 7])\nprint(a, b)\n\n# hint, if you know the median value, you can know what the input values are.", "groundtruth": [9, 3, 5, 1, 8, 7]}
{"task_id": "numpy/14", "content": "\nExample:\n\nIn [1]: print(min_max_masked(np.array([0, 4, 8, 7, 9, 1]), 10))\n[0, 4, 8, 7, 9, 1]\n[1, 4, 8, 7, 9, 1]\n[2, 4, 8, 7, 9, 1]\n[3, 4, 8, 7, 9, 1]\nOut[2]: [4, 8, --, 7, --, 9, --]\n\nMy answer is:\n[0,4,8,7,9,1] \n[1,4,8,7,9,1]\n[2,4,8,7,9,1]\n[3,4,8,7,9,1]\n\n```\nUpvotes: 0 username_4: As the error message itself says: \"UnboundLocalError: local variable 'arr' referenced before assignment\" the actual error is in the **np.argmin(arr)**, **np.argmax(arr)**, and **~mask** sections.\n\n```\ndef min_max_masked(arr, threshold):\n    min_val = np.min(arr)\n    max_val = np.max(arr)\n    min_index = np.argmin(arr)\n    max_index = np.argmax(arr)\n    mask = arr >= threshold\n    masked_arr = np.ma.masked_array(arr, ~mask)\n    return min_val, max_val, min_index, max_index, masked_arr\n\n```\n\nSince arr is the **input** parameter and has not been defined in the function you get the error. The input parameter is **referenced before assignment**.\n\nI would try to rewrite the code a bit and define all the parameters beforehand. This way the assignment for the parameters wouldn't throw an error.\n\n```\ndef min_max_masked(arr, threshold):\n    min_val = None\n    max_val = None\n    min_index = None\n    max_index = None\n    mask = None\n    masked_arr = None\n    min_val = np.min(arr)\n    max_val = np.max(", "groundtruth": [4, 8, 1, 7, 3, 9, 2]}
{"task_id": "numpy/15", "content": "\nAnswer:\n'''\nThe input is [10, 20, 30]\n''''''\nGiven a tree where the root node has to be maximum of the nodes\n\nExample:\n\nInput: root = 15\n       / \\\n      20 18\n       \\ / \\\n       19 21\nOutput: 20\n\nInput: root = 15\n       /   \\\n      20   18\n       \\     \\\n       19   21\nOutput: 20\n'''\n\nclass Node():\n    def __init__(self, value=None):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def get_max_node(self):\n        if self.value > self.right.value and self.value > self.left.value:\n            return self\n        elif self.right.value > self.left.value:\n            return self.right.get_max_node()\n        else:\n            return self.left.get_max_node()\n\nroot = Node(15)\nroot.left = Node(20)\nroot.right = Node(18)\nroot.left.right = Node(19)\nroot.right.right = Node(21)\n\nprint(root.get_max_node().value)\n'''\nGiven 3 non-negative integers a, b and c representing 3 sides of a triangle, find the minimum area of rectangle \nwhose 3 sides are equal to given 3 sides.\nInput Format:\nThe first line contains an integer 'T' which denotes the number of test cases. Then 'T' test cases follow.\nFirst line of each test case contains three space separated integers a,b and c denoting the sides 'a', 'b' and 'c' of a \ntriangle respectively.\nOutput Format\nOutput the area of the rectangle round off to the nearest integer.\nConstraints:\n1<=t<=10^5\n0<=a<=10^5\n0<=b<=10^5\n0<=c<=10^5\n\nSample Input:\n2\n24 24 24\n3 4 5\nSample Output:\n384\n24\n\nExplanation:\nTest case 1: Minimum area rectangle possible with the given", "groundtruth": [5, 10, 15, 20, 25]}
{"task_id": "numpy/16", "content": "\nIf there is no valid input, output an empty string \"\".\n\nIt is guaranteed that the answer is unique.\n\nExample 1:\n\nInput:\n[3, 2, 1, 2]\nminVal = 2\nmaxVal = 2\nOutput: [2, 2]\nExplanation: All elements between minVal = 2 and maxVal = 2 are [2, 2].\n\nExample 2:\n\nInput:\n[3, 2, 1, 2]\nminVal = 2\nmaxVal = 3\nOutput: [2]\nExplanation: Only element between minVal = 2 and maxVal = 3 is [2].\n\nExample 3:\n\nInput:\n[2, 2, 2, 2]\nminVal = 2\nmaxVal = 3\nOutput: []\nExplanation: No elements between minVal = 2 and maxVal = 3, so the output is empty [].\n\nExample 4:\n\nInput:\n[5, 1, 2, 1, 5]\nminVal = 1\nmaxVal = 5\nOutput: [1, 2, 5]\nExplanation: All elements between minVal = 1 and maxVal = 5 are [1, 2, 5].\n\nExample 5:\n\nInput:\n[5, 1, 2, 1, 5]\nminVal = 1\nmaxVal = 6\nOutput: [1, 2, 5]\nExplanation: All elements between minVal = 1 and maxVal = 6 are [1, 2, 5].\n\nExample 6:\n\nInput:\n[5, 1, 2, 1, 5]\nminVal = 1\nmaxVal = 7\nOutput: [1, 2, 5]\nExplanation: All elements between minVal = 1 and maxVal = 7 are [1, 2, 5].\n\nExample 7:\n\nInput:\n[5, 1, 2, 1, 5]\nminVal = 1\nmaxVal = 8\nOutput: []\nExplanation: No elements between minVal = 1 and maxVal = 8, so the output is", "groundtruth": [[1, 2, 3, 4, 5, 6], 2, 5]}
{"task_id": "numpy/17", "content": "\nIn particular, do not output the modified array from the function (modified_arr is the output). You can verify this on your own by using print in the function body. If you output this, your answer will not be accepted.\n\nHint: use numpy.where(A, B, C) to replace the values satisfying A with value B. Do note that C is optional and only provides a replacement if the condition A is not True.\n\nThe function accepts 4 arguments and returns 2 values. The first value is a numpy array and the second value is a numpy array. The expected input values are: a) a numpy array of shape (4,), b) an integer value, c) 2 integer values. Note that the output values of the function are: a) a numpy array, b) a numpy array.\n\nYou can verify your answer using the following code snippet. The output should be exactly the same as the output of the given code snippet (apart from the values you deduce).\n\nimport numpy as np\n# Write your code here\narr = np.array([-10, 4, 7, 9])\noutput = replace_and_find_eq(arr, 5, 6, 9)\nprint(output)\n# Your output:\nOutput:([-1, 4, -1, 9], [4, 9])\n\n## Q444 (Optional): Write a Python code for finding out the percentage of days which have the temperature between 80 and 85.\n\nThe code snippet is:\nimport numpy as np\n\ndef find_pct(arr):\n    num = arr.shape[0]\n    output = (arr[np.logical_and(arr >= 80, arr <= 85)]).size\n    return (output / num) * 100\n\ndef find_pct_using_logical_and(arr):\n    output = (np.logical_and(arr >= 80, arr <= 85)).size\n    return (output / arr.shape[0]) * 100\n\nnum_days = 7\ntemperature_arr = np.array([73, 75, 77, 82, 80, 79, 79])\noutput = find_pct(temperature_arr)\nprint(\"The percentage", "groundtruth": [[3, 6, 1, 9, 3, 6], 4, 3, 9]}
{"task_id": "numpy/18", "content": "For example, if the deduced input is np.ones([5, 10]), the input should only be np.ones([5, 10]). Otherwise, you will get a zero for this problem.\nSample Input\nSample Output\nHint\n\nIf there is no value that can satisfy the given problem, the output should be None.\n\nThe input should be a NumPy array or None\nThe output should be a NumPy boolean\nIf the input is np.array([1, 1, 1, 1, 1]) and 1,1, the output should be np.array([False, True, False, True, False])\n'''\nimport numpy as np\n\ndef complex_logical_check(arr, cond_val1, cond_val2):\n    condition = np.logical_not(np.logical_or(np.logical_and(arr > cond_val1, arr < cond_val2), arr == cond_val1))\n    result = np.any(condition)\n    return result\n\narr = np.ones([5,10])\ncond_val1 = 1\ncond_val2 = 1\nres = complex_logical_check(arr, cond_val1, cond_val2)\nprint(res)\n\nif res is None:\n    raise AssertionError(\"Your output is None, please check your code again. Try to output more information to make debugging easier.\")\n'''\nQuestion\nYou have to complete the function to calculate the weighted average of the data. The data is stored in an n×2 numpy array. The first column contains the data while the second column contains the weights assigned to them.\n\nTo calculate the weighted average, use the following formula:\n\nweighted average = (data1 × weight1) + (data2 × weight2) + … + (data3 × weight3)\nWhere datai is the value at the ith index, weighti is the weight corresponding to the ith value and n is the number of values stored.\n\nFor example, data = np.array([[2, 1], [2, 1], [4, 2], [4, 2]]), the weighted average is 6.5.\n\nPlease note: the number of data elements are not the same. You only need to worry about the value of the weighted average.\n\nPlease do", "groundtruth": [[2, 4, 6, 8, 10], 4, 8]}
{"task_id": "numpy/19", "content": "```\n\n```\nimport numpy as np\n\ndef fft_and_ifft(arr):\n    fft_result = np.fft.fft(arr)\n    ifft_result = np.fft.ifft(fft_result)\n    absolute_values = np.abs(ifft_result)\n    return absolute_values\n```\n/LeetCode/1351. Count Negative Numbers in a Sorted Matrix.py\nclass Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        length = len(grid)\n        width = len(grid[0])\n        count = 0\n        for i in range(length):\n            for j in range(width):\n                if grid[i][j] < 0:\n                    count += 1\n        return count/CSES/Sorting And Searching/README.md\n#### 2. Apartments (Solved)\n\n- [x] 2. Apartments (https://cses.fi/problemset/task/2216)\n\n```\nGiven n apartments and m applicants, for each apartment there is a size of the apartment (number of rooms), and for each applicant, there is a size of the apartment that applicant wants.\nYour task is to match each applicant with a specific apartment, such that the total size of apartments is minimum.\nYour program should first print the total size, then print the indexes (from 1 to n) of the apartments that are used.\nIf there are multiple ways, you may print any of them.\n\nInput\nThe first input line contains integers n and m: the number of apartments and the number of applicants.\nThe next m lines describe the applicants.\nFor each applicant, the first integer is the size of the apartment that applicant wants, and the second integer is the size of the apartment.\n\nOutput\nFirst, print one integer: the minimum total size of apartments.\nThen, print n integers: the indexes of the apartments in any order.\nIf there are multiple ways, you may print any of them.\n\nConstraints\n1≤n,m≤200\n1≤w,b≤10^9\n\nExample\nInput:\n3 2\n1 2\n4 1\nOutput:", "groundtruth": [2, 6, 4, 7, 3, 1]}
{"task_id": "numpy/20", "content": "\nWe only need to deduce the input from the code snippet to get the expected output.\n\n\"\"\"\n\n#\n# NOTE: THE FOLLOWING INPUT VALUES WILL BE PROVIDED BY OUR REPL.IT EXECUTOR.\n#\n\nimport numpy as np\n\ndef fft_2d_shift(arr):\n    fft_result = np.fft.fft2(arr)\n    shifted_fft = np.fft.fftshift(fft_result)\n    inv_shifted_fft = np.fft.ifftshift(shifted_fft)\n    ifft_result = np.fft.ifft2(inv_shifted_fft)\n    absolute_values = np.abs(ifft_result)\n    return absolute_values\n\n#\n# PUT YOUR CODE HERE\n#/Codesignal/Challenges/InterviewPractice/hasPathWithGivenSum.py\n\"\"\"\nhttps://app.codesignal.com/interview-practice/task/aH8k54jNQnL2W6P5p\n\nYou are given a binary tree t. Your task is to check whether it contains a path that the sum of values is equal to the given number sum.\n\nExample\n\nFor\n\nt = {\n    \"value\": 4,\n    \"left\": {\n        \"value\": 1,\n        \"left\": {\n            \"value\": -2,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }\n    },\n    \"right\": {\n        \"value\": 3,\n        \"left\": {\n            \"value\": 1,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {\n            \"value\": 2,\n            \"left\": {\n                \"value\": -2,\n                \"left\": null,\n                \"right\": null\n            },\n            \"right\": {\n                \"value\": -3,\n                \"left\": null,\n                \"right\": null\n            }\n        }\n    }\n}\nand sum = 7, the output should be hasPathWithGivenSum(t, sum) = true.\n\nHere is what this tree looks like:\n    4\n   / \\\n  1   3\n /   / \\\n-2  1   2\n  \\     / \\\n    -3 -2 -3", "groundtruth": [[2, 6, 4], [7, 3, 1], [5, 8, 9]]}
{"task_id": "numpy/21", "content": "Note:\n\nYou can find the python numpy.fft.fft documentation here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft.html\nThe return type of numpy.fft.fft is numpy.ndarray, you can find the numpy.ndarray documentation here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html\n\"\"\"\nfrom typing import Tuple\nimport numpy as np\n\ndef fft_high_pass_filter(arr: np.ndarray, threshold: float) -> np.ndarray:\n    \"\"\"\n    Perform a high pass filter with a threshold to an input array\n    Args:\n    arr: The input array\n    threshold: The threshold for the FFT filter. The absolute value of the\n        output will be less than this number\n\n    Returns: The filtered array\n    \"\"\"\n    assert np.ndim(arr) == 1, \"The input array must be one-dimensional\"\n\n    fft_result = np.fft.fft(arr)\n    fft_result[np.abs(fft_result) < threshold] = 0\n    ifft_result = np.fft.ifft(fft_result)\n    filtered_values = np.abs(ifft_result)\n    return filtered_values\n\n\ndef fft_high_pass_filter_solution(arr: np.ndarray, threshold: float) -> np.ndarray:\n    \"\"\"\n    Return the filtered array given the input array, the threshold and the\n    numpy.fft.fft function\n\n    Args:\n    arr: The input array\n    threshold: The threshold for the FFT filter. The absolute value of the\n        output will be less than this number\n\n    Returns: The filtered array\n    \"\"\"\n    fft_result = np.fft.fft(arr)\n    fft_result[np.abs(fft_result) < threshold] = 0\n    ifft_result = np.fft.ifft(fft_result)\n    filtered_values = np.abs(ifft_result)\n\n    return filtered_values\n\nif __name__ == '__main__':\n    print(fft_high_pass_filter_solution([0.0, 5.0, 0.0, 6.0, 0.0, 0.0], 0.1))\"\"\"\nGiven a string str. You need to reverse the order of characters in each word of the string str.\nInput\n", "groundtruth": [[2, 6, 4, 7, 3, 1], 5]}
{"task_id": "numpy/22", "content": "'''\n\nimport numpy as np\n\ndef sort_and_find_indices(arr):\n    sorted_arr = np.sort(arr)\n    max_index = np.argmax(sorted_arr)\n    min_index = np.argmin(sorted_arr)\n    return {'sorted_array': sorted_arr,'max_index': max_index,'min_index': min_index}\n\n'''\n2004. Find the Maximum Number of K-Complement Pairs\n\nYou are given a list of integers nums and an integer k.\n\nTwo integers nums[i] and nums[j] form a k-complement pair if and only if |nums[i] - nums[j]| == k.\n\nReturn the maximum number of k-complement pairs in the list nums.\n\nExample 1:\nInput: nums = [1,2,3,4], k = 1\nOutput: 2\nExplanation: The highest number of complement pairs we can form are as follows:\n- 1 and 2\n- 3 and 4\nTherefore, the maximum number of pairs is 2.\nExample 2:\nInput: nums = [3,1,5,7], k = 2\nOutput: 0\nExplanation: There are no pairs that can be formed with values that differ by 2.\n\nConstraints:\n\n1 <= nums.length <= 200\n1 <= nums[i] <= 104\n1 <= k <= 104\n'''\n\ndef find_max_complement_pairs(nums, k):\n  # We count the number of k-complement pairs formed between adjacent elements\n  # in the array, by taking the difference between two adjacent elements\n  # and counting the number of times the difference in the number of k.\n  # We take the highest number of k-complement pairs, which will be the\n  # answer.\n  complement_pairs = 0\n  for i in range(1, len(nums)):\n    if abs(nums[i] - nums[i - 1]) == k:\n      complement_pairs += 1\n  return complement_pairs\n\n'''\n2005. Decode the Slanted Ciphertext\n\nYou are given a string s and a string key of length 25 where key[i] is the ith character in key, and an integer k", "groundtruth": [2, 6, 4, 7, 3, 1]}
{"task_id": "numpy/23", "content": "\nThe correct answer is: [2, 2, 1, 1, 1, 0]\n\nProblem 4 (500 pts)\nConsider a random variable $$Z = X + Y$$ where X and Y are i.i.d. random variables.\n\nPlease deduce the PDF of the variable Z using the definition.\n\nThe output is in the format {PDF: [P(z=-5), P(z=-4), …, P(z=0)], z_values: [-5, -4, …, 0]}, e.g. the probability of z = -5 is P(z=-5) = 0.001.\n\nThe correct answer is: {PDF: [0.001, 0.01, 0.019999999999999996, 0.039999999999999994, 0.05999999999999999, 0.07999999999999998, 0.09999999999999997, 0.11999999999999996, 0.1399999999999999, 0.15999999999999997, 0.17999999999999996, 0.19999999999999996, 0.21999999999999994, 0.23999999999999993, 0.2599999999999999, 0.2799999999999999, 0.2999999999999998, 0.31999999999999984, 0.339", "groundtruth": [[0, 6, 4], [7, 0, 1], [5, 3, 0]]}
{"task_id": "numpy/24", "content": "\nExplanation:\nAs we see, the code snippet is a function that accepts two arrays and a scalar value as input, and it returns a dictionary with two elements: sorted_arr is an array after sorting the concatenated array arr1 and arr2 and insert_index_for_value is the index where value should be inserted in the sorted_arr array.\n\nBased on the input that you are provided in the question, the code snippet should output a sorted array of [1, 2, 3, 4, 6, 7] and insert_index_for_value should be 4.\n\nSolution in Python:\nfrom __future__ import annotations\n\ndef concatenate_sort_searchsorted(arr1: list[int], arr2: list[int], value: int) -> dict[str, list[int]]:\nconcatenated_arr = np.concatenate((arr1, arr2))\nsorted_arr = np.sort(concatenated_arr)\ninsert_index = np.searchsorted(sorted_arr, value)\nreturn {\n'sorted_array': sorted_arr, 'insert_index_for_value': insert_index\n}\nThe code snippet accepts two lists and a value and returns a dictionary with two elements. The values for the two elements of the dictionary are sorted_arr which is an array after sorting the concatenated array arr1 and arr2 and insert_index_for_value which is the index where value should be inserted in the sorted_arr array.\n\nThe searchsorted method is used to find the index of a value in a sorted array. It will return the index where the value should be inserted.\n\nThe concatenate method is used to concatenate two arrays into a single array.\n\nThe sort method is used to sort the elements of an array.\n\nBased on the input you have, the output will be {\n'sorted_array': [1, 2, 3, 4, 6, 7], 'insert_index_for_value': 4\n}.\n\nTherefore, the input is [1, 2], [3, 4, 6], 7 as 7 will be inserted at index 4 of the sorted array.\n\nHence, the answer is [1, 2].\n\nTime complexity: O(n log(n)) where n is the length of the", "groundtruth": [[2, 6, 4], [7, 3, 1], 5]}
{"task_id": "numpy/25", "content": "'''\n\ninput = [2.0, 1.8, 4.1, 1.2, 2.4, 6.9, 4.5, 7.3, 5.6, 5.7, 5.5, 4.9, 8.8, 3.3, 3.4, 5.1, 9.8, 1.3, 6.4, 7.5, 5.9, 6.8, 2.5, 3.9, 2.8, 8.2, 9.5, 5.4, 1.7, 5.8, 2.7, 3.2, 7.7, 5.0]\n\ndef combine_clip_round(arr1, arr2, min_val, max_val, decimals):\n    combined_arr = np.concatenate((arr1, arr2))\n    unique_arr = np.unique(combined_arr)\n    clipped_arr = np.clip(unique_arr, min_val, max_val)\n    rounded_arr = np.round(clipped_arr, decimals=decimals)\n    return rounded_arr\n\ndef main():\n    print(combine_clip_round(np.array(input)[:len(input)//2], np.array(input)[len(input)//2:], 1, 5, 1))\n    \nmain()\n\n'''\nThe code snippet is:\nimport numpy as np\n\ndef reverse_and_add(arr1, arr2):\n    reversed_arr1 = np.flip(arr1)\n    reversed_arr2 = np.flip(arr2)\n    result_arr = reversed_arr1 + reversed_arr2\n    return result_arr\nThe output is:\n[20., 18., 14.2, 12.2, 14.1]\n\nGive only the deduced input of the code snippet. Do not output any additional information.\n'''\n\narr1 = [1.0, 1.2, 4.1, 1.8, 2.4]\narr2 = [1.5, 8.1, 4.6, 1.9, 1.2]", "groundtruth": [[1.1, 2.5, 3.8], [2.5, 4.9, 6.2], 2, 5, 1]}
{"task_id": "numpy/26", "content": "'''\n\narr1 = input()\narr2 = input()\n# -*- coding: utf-8 -*-\n'''\n@Author: hankcs\n'''\nfrom functools import reduce\n\n'''\n请写一个程序，输入两个字符串，对其进行字典序比较，输出大小。\n'''\n\ns1 = ind:\n    if int(ord(i)) < int(ord(j)):\n        return -1\n    elif int(ord(i)) > int(ord(j)):\n        return 1\n    else:\n        return 0\n\n\ndef com(l1, l2):\n    if len(l1) > len(l2):\n        return com(l1[:len(l2)], l2)\n    elif len(l1) == len(l2):\n        return l1 > l2\n    else:\n        return com(l1, l2[len(l1):])\n\n\nprint(compare(s1, s2))\nprint(com(s1, s2))\nput()\ns2 = input()\n\n\ndef compare(s1, s2):\n    if len(s1) > len(s2):\n        return compare(s1[:len(s2)], s2)\n    elif len(s1) == len(s2):\n        return s1 > s2\n    else:\n        return compare(s1, s2[len(s1):])\n\n\ndef compare_or# -*- coding: utf-8 -*-\n'''\n@Author: hankcs\n'''\n\n'''\n在本次练习中，你需要编程实现两个函数。\n\n1.在函数 add_item(lst, v) 中，将整数 v 追加到列表 lst 中，即使 lst 为空。\n2.在函数 remove_item(lst, v) 中，将列表 lst 中所有出现的数字 v 都删除。注意，v 为一个列表，包含若干整数，你需要对这些值进行删除操作。\n'''\n\n\ndef add_item(lst, v):\n    return lst.append(v)\n\n\ndef remove_item(lst, v):\n    return [x for x in lst if x not in v]\n\n\nlst = [1, 2, 3]\nv = [1, 2, 5]\nadd_item(lst, ", "groundtruth": [[1, 2, 3], [3, 4, 5]]}
{"task_id": "numpy/27", "content": "\"\"\"\n\nimport numpy as np\n\narr1 = np.array([1,2,3,4,5,6])\narr2 = np.array([2,3,5,6,8,11])\nmin_val = 3\nmax_val = 10\n\nprint(complex_array_operation(arr1, arr2, min_val, max_val))\n\"\"\"\nYou can also use any other Python package, such as pandas or TensorFlow, to solve this problem.\n\nIf you are using a different programming language, please specify it on the solution post. If you use Google Colab, we will add any other libraries that are not part of the environment by default.\n\"\"\"/Week 5/Day 6/Q6.py\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\n\"\"\"\n# Assignment\nQuestion 6\nA small leakage occurs in a container that holds water. There are three containers, A, B, and C.\nContainer A contains the water that can be poured into container B, container B contains the water that can be poured into container C. \nThe height of each container is equal to the amount of water it contains. If we pour water into container A until container A becomes empty, \nhow many drops from container C will appear when we empty C into container B and B into A?\n\nInput the height of each container:\nContainer A: 5\nContainer B: 3\nContainer C: 10\n\"\"\"\n\nclass Container:\n    def __init__(self, container, water):\n        self.container = container\n        self.water = water\n    def filled(self):\n        return self.container - self.water\n\na = float(input(\"Enter Container A height: \"))\nb = float(input(\"Enter Container B height: \"))\nc = float(input(\"Enter Container C height: \"))\n\ndef pour(container, amount):\n    if container.container > amount:\n        container.water += amount\n        container.container -= amount\n    elif container.container == amount:\n        container.water = container.container\n        container.container = 0\n    else:\n        container.container = amount-container.container\n        container.water += container.container\n        container.container = 0\n\na_container = Container(a, 0", "groundtruth": [[7, 7.5, 3, 1.2, 9], [6.5, 10, 3, 7, 1.2], 2, 8]}
{"task_id": "java/0", "content": "\nThe number of nodes in the given binary tree will be between 1 and 10^5.\nEach node in the given binary tree will have value between 0 and 100.\n\n\n\"\"\"\n\n\nclass Solution:\n    def findTarget(self, root: TreeNode, k: int) -> bool:\n        if not root: return False\n        return self.find(root.left, k - root.val) or self.find(root.right, k - root.val) or (k == 2 * root.val and root.val)\n\n    def find(self, root, k):\n        if not root: return False\n        return root.val == k or self.find(root.left, k - root.val) or self.find(root.right, k - root.val)\n\"\"\"\n\nGiven a list of words, and an arbitrary alphabetical order, verify that the words are in order of the alphabetical order.\n\n\nA word is greater than another only if its alphabetical order is greater than the other word's alphabetical order.\n\nFor example:\n[\"apple\",\"app\"], the words are in order, so return true\n[\"app\",\"apple\"], the words are in order, so return true\n[\"apple\",\"apple\"], the words are the same, so return true\n[\"z\",\"a\"] the first word is greater than the second word, so return false.\n\n\n\"\"\"\n\n\nclass Solution:\n    def inOrder(self, s: List[str], a: List[str]) -> bool:\n        d = collections.defaultdict(list)\n        # 建字典\n        for i in a:\n            d[i[0]].append(i[1])\n\n        return self.check(s, d, 0, s[0])\n\n    def check(self, s: List[str], d: list, k: int, last: str):\n        if k == len(s): return True\n\n        for i in d[last]:\n            if i == s[k]:\n                if self.check(s, d, k + 1, i):\n                    return True\n        return False\n\"\"\"\nGiven two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\n(Formally, a closed interval [a, b] (with a <= b) denotes the", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/1", "content": "\nYou may deduce the input of the code snippet as below:\n1\n2\n3\n4\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] output = {0, 1}; // This is the only output\n        return output;\n    }\n}\n\nIn general, you can deduce an input with the following rules. If your final output is some complex data structure (e.g., linked list, tree, array, matrix), you can deduce the output by analyzing the final output and the way you manipulate the input and output. Or if your final output is a number or string, the rules below can be used to analyze the number and string.\n1. If there are multiple correct solutions, the answer is correct as long as the input that you use to generate the output satisfies the property of “correctness”. In other words, “correctness” is the first criteria for the input to be used in the test case. For example, if the input has the following format:\n[num0, num1, num2,...]\nThere are multiple correct solutions with the above format. If the correct solution is, e.g., [0, 1], 1, 1], the answer of such input would be [0, 1] and [1, 1], 1, 1] are both correct. But [1, 2], 1, 1] is not correct. Note that the correct answer is [0, 1] not [1, 1].\n\n2. If the answer does not contain any information outside the given format, the answer can be a list or a number or a string. For example, if the input has the following format:\n[num0, num1, num2,...]\nYou can deduce the answer as a number, e.g., 0. You can also deduce it as a list, e.g., [0].\n*/\npublic class Leetcode167TwoSum {\n    public static void main(String[] args) {\n//        int[] nums = new int[]{2,7,11,15};\n//        int target = 9;\n//        int[] nums = new int[]{3,2,4};\n//        int target = 6;\n//        int[] nums = new int[]{3,3};\n//", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/2", "content": "*/\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        int n = nums.length;\n\n        // Build the hash table\n        for (int i = 0; i < n; i++) {\n            numMap.put(nums[i], i);\n        }\n\n        // Find the complement\n        for (int i = 0; i < n; i++) {\n            int complement = target - nums[i];\n            if (numMap.containsKey(complement) && numMap.get(complement)!= i) {\n                return new int[]{i, numMap.get(complement)};\n            }\n        }\n\n        return new int[]{}; // No solution found\n    }\n}\n\n\n/*\n*\n* This is the time complexity of the code above. The first for loop runs in O(n) time and the second for loop runs in O(1) time in the worst case.\n*\n* Therefore, the entire method runs in O(n) time, which is linear in the size of the input.\n*\n*/(1) time in the worst case. Therefore, the time complexity is O(n).\n\n* Space Complexity: O(n) where n is the length of the input list. We need to store the original array to find out duplicates.\n\n*/import java.util.*;\npublic class AllDuplicates {\n    public List<Integer> findDuplicates(int[] nums) {\n        List<Integer> duplicates = new ArrayList<>();\n\n        for(int num: nums){\n            if(nums[Math.abs(num)-1] > 0) nums[Math.abs(num)-1] *= -1;\n            else duplicates.add(Math.abs(num));\n        }\n\n        return duplicates;\n    }\n}\n\n/*\n\n* Time Complexity: O(n) where n is the length of the input array. For every element in the array, there will be 1", "groundtruth": {"nums": [2, 7, 11, 15], "target": 9}}
{"task_id": "java/3", "content": "\nRelated Topics:\n  Stack\n */\n\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if(nums == null || nums.length == 0){\n            return nums;\n        }\n\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>(){\n            public int compare(int[] p1, int[] p2){\n                return p2[0] - p1[0];\n            }\n        });\n\n        for(int i = 0; i < k; i++){\n            pq.add(new int[]{nums[i], i});\n        }\n\n        int[] ans = new int[nums.length - k + 1];\n        ans[0] = pq.peek()[0];\n        for(int i = k; i < nums.length; i++){\n            pq.add(new int[]{nums[i], i});\n            while(pq.peek()[1] <= i - k){\n                pq.poll();\n            }\n            ans[i - k + 1] = pq.peek()[0];\n        }\n        return ans;\n    }\n}\n\n/Algorithms/437.java\n/**\nYou are given a binary tree in which each node contains an integer value.\n\nFind the number of paths that sum to a given value.\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\nThe tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n\nExample:\n\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n\nReturn 3. The paths that sum to 8 are:\n\n1.  5 -> 3\n2.  5 -> 2 -> 1\n3. -3 -> 11\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *", "groundtruth": {"nums": [1, 3, -1, -3, 5, 3, 6, 7], "k": 3}}
{"task_id": "java/4", "content": "\nThe deduced input of the code snippet is:\n2048\nFor further clarification, you may refer to the attached files.\nSolution\n\nFor all dimensions of 2D square boxes, find the maximum diagonal of the square box. For example, the diagonal of the 2-D square box (2, 2) is 2 * 2 = 4. The diagonal of the 2-D square box (3, 1) is 3 * 3 = 9.\n\nThe maximum diagonal of all dimensions of 2D square boxes is 9.\n\nThe area of the maximum diagonal is 1 * 9 = 9, which is the answer.\n\nGiven the input of the following code snippet is:\n\n2D square boxes = [ [2,2], [3,1] ]\nYou should give the output 9 as the answer, which represents that the maximum diagonal of the square box is (3, 1) with the area of 9.\n\nYou may refer to the attached files for further clarification.\n\nThe code snippet is:\nclass Solution {\n  public int areaOfMaxDiagonal(int[][] dimensions) {\n    int maxDiagonalSQ = 0;\n    int maxArea = 0;\n    for (int i = 0; i < dimensions.length; i++) {\n      int currentDiagonal =(dimensions[i][0] * dimensions[i][0]) + (dimensions[i][1] * dimensions[i][1]);\n\n      if (currentDiagonal > maxDiagonalSQ || (currentDiagonal == maxDiagonalSQ && maxArea<dimensions[i][1] * dimensions[i][0])) {\n        maxDiagonalSQ = currentDiagonal;\n        maxArea = dimensions[i][1] * dimensions[i][0];\n      }\n    }\n\n    return maxArea;\n  }\n}\nThe output is:\n9\nYou should give the deduced output 9 as the answer. Do not output any additional information.\n\nFor the code snippet above, the deduced output of the answer is 9.\n\nIn the code snippet above, the dimensions of the square box is [ [2, 2], [3, 1] ].\n\nFor the square box with the dimensions (2, 2), the diagonal is (2 * 2) + (2 * 2) = ", "groundtruth": [[9, 3], [8, 6]]}
{"task_id": "java/5", "content": "\nNotice\nThe queen will never attack any other chess piece.\nIt has to pass one or two pieces between the rook and the bishop in order to capture it.\nIf it captures the bishop by passing through the rook, it can capture it only once.\nAll the pieces are on the same diagonal, vertically, or horizontally.\nAll the pieces will always be within the 1-based coordinates system.\n\nYou can assume that there exists at least one way to capture the queen.\nIt’s guaranteed that the input will be valid.\n\nChallenge\nDo this problem in O(1) space complexity.\n\nExample\nExample 1:\nInput:\n1, 1, 4, 4, 2, 2\nOutput:\n2\nExplanation:\nIt takes two moves to capture the queen.\nNotice that we can only move one unit at a time.\n\nExample 2:\nInput:\n1, 1, 4, 4, 2, 4\nOutput:\n1\nExplanation:\nIt takes one move to capture the queen.\n\n*//Lintcode/75_Find Peak Element.cpp\n/*\n\n75. Find Peak Element\n\nThere is an integer array which has the following features:\n\nThe numbers in adjacent positions are different.\nA[0] < A[1] && A[A.length - 2] > A[A.length - 1].\nWe define a position P is a peek if:\n\nA[P] > A[P-1] && A[P] > A[P+1]\nFind a peak element in this array. Return the index of the peak.\n\nExample\nExample 1:\n\nInput: [1, 2, 1, 3, 4, 5, 7, 6]\nOutput: 1 or 6\nExample 2:\n\nInput: [1, 2, 3]\nOutput: 2\nNotice\n\nYour solution should be in logarithmic complexity.\n\nChallenge\nSolve it both recursively and iteratively.\n\n*/\n\n// Recursive: O(N)\n\nclass Solution {\npublic:\n    /**\n     * @param A: An integers array.\n     * @return: return any of peek positions.", "groundtruth": {"a": 1, "b": 1, "c": 8, "d": 8, "e": 2, "f": 3}}
{"task_id": "java/6", "content": "*/\n/LeetCode/Explore/The-Basics/Ways-To-Add-Parentheses.java\n/*\nTime complexity: O(4^n) -> O(n^4)\n*/\nimport java.util.*;\nclass Solution {\n    List<String> allExpr;\n    List<String> answer;\n    public List<String> addOperators(String num, int target) {\n        allExpr = new ArrayList<>();\n        dfs(num,target,0,\"\",\"\");\n        answer = new ArrayList<>();\n        for(String str: allExpr){\n            if(str.charAt(str.length() - 1)!= '+'){\n                break;\n            }\n            if(str.charAt(0)!= '+'){\n                answer.add(str.substring(1));\n            }else{\n                answer.add(str);\n            }\n        }\n        return answer;\n    }\n    \n    private void dfs(String num, int target, int sum, String str, String newNum){\n        if(num.isEmpty()){\n            if(sum == target){\n                allExpr.add(str);\n            }\n            return;\n        }\n        int n = num.length();\n        long numInt = 0L;\n        for(int i = 0; i < n; i++){\n            numInt = numInt * 10 + (num.charAt(i) - '0');\n            if(i == 0 && numInt > 2147483647){\n                return;\n            }\n            String numSub = String.valueOf(numInt);\n            dfs(num.substring(i+1), target, sum + numInt, str+numSub+\"+\",newNum+numSub);\n            dfs(num.substring(i+1), target, sum - numInt, str+numSub+\"-\",newNum+numSub);\n            dfs(num.substring(i+1), target, sum * numInt, str+numSub+\"*\",newNum+numSub);\n            \n            if(newNum.length()!= 0 && newNum.charAt(0) == '0'){\n                break;\n            }\n            if(num.charAt(0) == '0'){\n                break;\n            }\n        }\n    }\n}/LeetCode/Problems/1869.Longer-Contiguous-Segments-of-Ones-than-Zeros.java\nimport java.util.*;\nclass Solution {\n   ", "groundtruth": {"nums1": [1, 2, 1, 2], "nums2": [1, 1, 1, 1]}}
{"task_id": "java/7", "content": "\n\"\"\"\n\nfor i in range(6):\n    if i % 2 == 0:\n        continue\n    print(i)\n\n# answer: 1 3 5\n/LeetCode/python_src/85_MaximalRectangle.py\n\"\"\"\nGiven a 2D binary matrix filled with 0's and 1's,\nfind the largest rectangle containing only 1's and return its area.\n\nFor example, given the following matrix:\n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nReturn 6.\n\n\"\"\"\n\nclass Solution:\n    # @param {character[][]} matrix\n    # @return {integer}\n\n    def maximalRectangle(self, matrix):\n        # max is the current max value,\n        # num is the counter for number of current row\n        max = 0\n        m = len(matrix)\n        if m == 0:\n            return 0\n        n = len(matrix[0])\n        for i in range(m):\n            num = [0]*n\n            for j in range(n):\n                num[j] = matrix[i][j] if matrix[i][j] == 1 else 0\n            max = max if max > self.largestRectangleArea(num) else self.largestRectangleArea(num)\n        return max\n\n    def largestRectangleArea(self, height):\n        stack = []\n        max = 0\n        i = 0\n        while i < len(height):\n            if not stack or height[i] >= height[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                cur = stack.pop()\n                max = max if max > height[cur]*(i if not stack else (i-stack[-1]-1)) else height[cur]*(i if not stack else (i-stack[-1]-1))\n        while stack:\n            cur = stack.pop()\n            max = max if max > height[cur]*(len(height) if not stack else (len(height)-stack[-1]-1)) else height[cur]*(len(height) if not stack else (len(height)-stack[-1]-1))\n        return max\n/LeetCode/python_src/167_TwoSumII.", "groundtruth": {"nums": [1, 2, 2, 3, 1, 4]}}
{"task_id": "java/8", "content": "\nExample 2:\n\nInput: nums = [1,2,3,4,4,4,4,4]\nOutput: 16\nExplanation: All elements appear 4 times. If any element appears more than four times, it appears 4 times.\nExample 3:\n\nInput: nums = [0,1,2,2,3,1,4,0,1]\nOutput: 8\nExplanation: All elements except 0 appear 2 times each. 0 appears 1 time and 1,2,3 and 4 appear 1 time.\n\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 105\nAccepted\n36,657\nSubmissions\n72,921\n\"\"\"\n\nclass Solution(object):\n    def maxFrequencyElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def getHashVal(x):\n            return nums.count(x)\n\n        return sum(getHashVal(x) for x in range(min(nums),max(nums)+1))\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,4,4,4,4]\n    res = Solution().maxFrequencyElements(nums)\n    print(res)\n/Python/155_Min_Stack.py\n#!/usr/bin/env python\n# coding: utf-8\n\n# Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n# \n# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n# \n#  \n# Example 1:\n# Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n# Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n# Example 2:\n# Input: strs = [\"\"]\n# Output: [[\"\"]]\n# Example 3:\n# Input: strs = [\"a\"]\n# Output: [[\"a\"]]\n#  \n# \n# Constraints:\n# \n# 1 <= strs.length <=", "groundtruth": [1, 2, 3, 4, 5]}
{"task_id": "java/9", "content": "\n*/\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BeautifulIndices {\n\tpublic static void main(String[] args) {\n\t\tString s = \"baabaa\", a = \"aa\", b = \"b\";\n\t\tint k = 2;\n\t\tString s2 = \"acdefc\", a2 = \"c\", b2 = \"f\";\n\t\tint k2 = 4;\n\t\tString s3 = \"aabcdefghijklmnopqrstuvwxy\", a3 = \"a\", b3 = \"aa\";\n\t\tint k3 = 2;\n\t\tString s4 = \"babababababbababbbababababaabbbbabababbababababababababbb\", a4 = \"baba\", b4 = \"baba\";\n\t\tint k4 = 6;\n\t\tList<Integer> l1 = new BeautifulIndices().beautifulIndices(s, a, b, k);\n\t\tSystem.out.println(l1);\n\t\tList<Integer> l2 = new BeautifulIndices().beautifulIndices(s2, a2, b2, k2);\n\t\tSystem.out.println(l2);\n\t\tList<Integer> l3 = new BeautifulIndices().beautifulIndices(s3, a3, b3, k3);\n\t\tSystem.out.println(l3);\n\t\tList<Integer> l4 = new BeautifulIndices().beautifulIndices(s4, a4, b4, k4);\n\t\tSystem.out.println(l4);\n\t}\n\n\tpublic List<Integer> beautifulIndices(String s, String a, String b, int k) {\n\t\tString t = a + \"@\" + s + \"#\" + b;\n\t\tList<Integer> lps = new ArrayList<>();\n\t\tlps.add(0);\n\t\tfor(int i = 1; i < t.length(); ++i) {\n\t\t\tint ind = lps.get(i - 1);\n\t\t\twhile(ind > 0 && t.charAt(ind)!= t.charAt(i)) { ind = lps.get(ind - 1); }\n\t\t\tlps.add((t.charAt(ind) == t.charAt(i))? ind + 1 : 0);\n\t\t}\n\t\tList<Integer> ans =", "groundtruth": {"s": "abcd", "a": "a", "b": "a", "k": 4}}
{"task_id": "java/10", "content": "\nThe first line in the input is an array, each of which is the input of the class of \"minimumCost\" from Line 3 to Line 13 of the code snippet. You have to output the first line in the input, that is, the input of Line 2 of the code snippet.\n\nSample Input\n[3,7,9,1]\nSample Output\n3\n\"\"\"\n\nimport sys\nimport io\n\ndef main(str1):\n    #print(str1)\n    nums = eval(str1)\n    #print(nums)\n    first = nums[0]\n    min1 = sys.maxsize\n    min2 = sys.maxsize\n\n    for i in range(1, len(nums)):\n        if(min1 > nums[i]):\n            min2 = min1\n            min1 = nums[i]\n        elif(min2 > nums[i]):\n            min2 = nums[i]\n\n    print(first + min1 + min2)\n    #sys.stdout.flush()\n\ndef readlines():\n    for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n        yield line.strip()  # This yields the line with the newline at the end removed.\n\nif __name__ == '__main__':\n    # str1 = '[3,7,9,1]'\n    # main(str1)\n    lines = readlines()\n    for line in lines:\n        main(line)/Code/CodeRecords/2131/60782/306548.py\nclass node:\n    def __init__(self,l=None,r=None):\n        self.l=l\n        self.r=r\n\ndef zigzagLevelOrder(root):\n    tree = []\n    if not root:\n        return tree\n    q = []\n    q.append([root, 0])\n    while len(q):\n        [node, dep] = q.pop(0)\n        if len(tree) == dep:\n            tree.append([node.val])\n        else:\n            tree[dep].append(node.val)\n        if node.left:\n            q.append([node.left, dep+1])\n        if node.right:\n            q.append([node.right, dep+1])\n\n    ans = []\n    odd = 1\n    for i in tree:", "groundtruth": {"nums": [5, 4, 3]}}
{"task_id": "java/11", "content": "*/\n\nclass Main {\n  public static void main(String[] args) {\n    int[] arr = new int[] { 1, 4, 8, 3, 9 };\n    System.out.println(new Solution().canSortArray(arr));\n  }\n}\n\nclass Solution {\n  public boolean canSortArray(int[] v) {\n    int n = v.length;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n - 1; j++) {\n        int k = v[j], c = 0;\n        while (k > 0) {\n          k = k & (k - 1);\n          c++;\n        }\n        k = v[j + 1];\n        int c1 = 0;\n        while (k > 0) {\n          k = k & (k - 1);\n          c1++;\n        }\n        if (c == c1 && v[j] > v[j + 1])\n          swap(v, j, j + 1);\n      }\n    }\n    for (int i = 1; i < n; i++) {\n      if (v[i] < v[i - 1])\n        return false;\n    }\n    return true;\n  }\n\n  private void swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n/codingbat.com/Logic-1/dateFashion.java\n/*\nThe \"dateFashion\" function takes two values: the first value in the pair and the\nsecond value. If the first value is greater than 0 and less than 5, and the second value\nis greater than 0 and less than 5, return the value 20. If either of the values is\nless than 0 or greater than 5, return the value 0. In all other cases, return the value 10.\n\npublic int dateFashion(int you, int date)\nExample:\n\ndateFashion(5, 10)  --> 20\ndateFashion(5, 2)   --> 0\n\npublic int dateFashion(int you, int date) {\n\n}\n*/", "groundtruth": [3, 16, 8, 4, 2]}
{"task_id": "java/12", "content": "'''# The read4 API is already defined for you.\n# @param buf, a list of characters\n# @return an integer\n# def read4(buf):\n\nclass Solution(object):\n    def __init__(self):\n        self.buf4 = [0 for i in range(4)]\n\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Maximum number of characters to read (int)\n        :rtype: The number of characters read (int)\n        \"\"\"\n        nread = 0\n        while nread < n:\n            m = min(n - nread, 4)\n            # print nread, buf, buf4, m\n            read = self.read4(self.buf4)\n            if read!= 4:\n                return nread\n            buf[nread:nread + m] = self.buf4[:m]\n            nread += read\n            if m < 4 and read!= 4:\n                break\n        return nread# -*- coding: utf-8 -*-\n\n'''\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n\nFind all strobogrammatic numbers that are of length = n.\n\nFor example,\nGiven n = 2, return [\"11\",\"69\",\"88\",\"96\"].\n\nHint:\n\nTry to use recursion and notice that it should recurse with n - 2 instead of n - 1.\n'''\n\nimport unittest\n\n\nclass Solution:\n    def findStrobogrammatic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return self.find(n)\n\n    def find(self, n):\n        if n <= 0:\n            return ['']\n\n        # Find all of the strobograms for n=2\n        if n == 1:\n            return ['0', '1', '8']\n\n        part1 = self.find(n - 2)\n\n        # Generate all of the possible results of n\n        res = []\n        for p1 in part1:\n            for p2 in '018':\n                res.append(p2 + p1 + p2[::-1])\n        return res\n\n\nclass TestSolution(unittest.TestCase):\n   ", "groundtruth": [5, 5, 5, 10, 5]}
{"task_id": "java/13", "content": "\nNotice that, x<n, x>1, and y<n, y>1.\n\nYou may assume that, the input is consistent and the code can not be modified.\n/src/com/sachin/graph/practice/DijkstrasAlgo.java\npackage com.sachin.graph.practice;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.PriorityQueue;\n\npublic class DijkstrasAlgo {\n\n\tpublic static void main(String[] args) {\n\t\tHashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();\n\t\t\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\tlist.add(2);\n\t\tlist.add(1);\n\t\tmap.put(1, list);\n\t\t\n\t\tlist = new ArrayList<Integer>();\n\t\tlist.add(1);\n\t\tmap.put(2, list);\n\t\t\n\t\tArrayList<Integer> path = shortestPath(map,1,5);\n\t\tfor(int x:path){\n\t\t\tSystem.out.println(x);\n\t\t}\n\t\t\n\n\t}\n\n\tpublic static ArrayList<Integer> shortestPath(HashMap<Integer, ArrayList<Integer>> g, int source, int dest){\n        HashMap<Integer, Integer> dist = new HashMap<Integer, Integer>();\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n        \n        for(int i : g.keySet()){\n            dist.put(i, Integer.MAX_VALUE);\n        }\n        \n        dist.put(source, 0);\n        pq.add(source);\n        \n        HashMap<Integer, Integer> prev = new HashMap<Integer, Integer>();\n        \n        HashSet<Integer> visited = new HashSet<Integer>();\n        while(!pq.isEmpty()){\n            int val = pq.poll();\n            \n            for(int i: g.get(val)){\n                if(!visited.contains(i)){\n                    pq.add(i);\n                }\n            }\n        }\n        return null;\n    }\n}\n/src/com/sachin/string/practice/Permutation.java\npackage com.sachin.string.practice;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Permutation {\n\tpublic static void main(String[]", "groundtruth": {"n": 5, "x": 2, "y": 4}}
{"task_id": "java/14", "content": "*//771-JewelsandStones.py\nclass Solution(object):\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for j in J:\n            dic[j] = dic.get(j,0)+1\n        total = 0\n        for s in S:\n            if dic.has_key(s):\n                total+=1\n        return total\n# https://leetcode.com/problems/jewels-and-stones//796-RotateString.py\nclass Solution(object):\n    def rotateString(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: bool\n        \"\"\"\n        if len(A)==0 and len(B)==0:\n            return True\n        if len(A)==0 or len(B)==0:\n            return False\n        if len(A)!=len(B):\n            return False\n        for start in range(0,len(A)):\n            if A[start]!=B[0]:\n                continue\n            newA = A[start:] + A[:start]\n            if newA==B:\n                return True\n        return False\n# https://leetcode.com/problems/rotate-string/    for i in range(len(l)):\n            if i==0:\n                temp = l[0]\n            else:\n                if temp+1==l[i]:\n                    temp+=1\n                else:\n                    res.append([temp,l[i]-1])\n                    temp = l[i]\n        res.append([temp,n-1])\n        return res\n# https://leetcode.com/problems/range-addition-ii//790-RangeAddition.py\nclass Solution(object):\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(ops)==0:\n            return m*n\n        l = []\n        for [x,y] in ops:\n            l.append(x)\n            l.append(y)\n        res = []\n        temp = 0\n    0:\n                return [int(n1/n2", "groundtruth": {"nums": [-1, 3, 2, 4, 5], "k": 3}}
{"task_id": "java/15", "content": "*/\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& arr) {\n        int ans = 0;\n        int max_value = 0;\n        // map_num[i][j] represent the map from [i,j)\n        unordered_map<int, int> map_num;\n        map_num[0] = -1;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr[i] == 0) {\n                max_value = 0;\n                continue;\n            }\n            max_value += 1;\n            if (map_num.find(max_value)!= map_num.end()) {\n                ans = max(ans, i - map_num[max_value]);\n            } else {\n                map_num[max_value] = i;\n            }\n        }\n        \n        return ans;\n    }\n};\n/3Sum.cpp\n/* 3sum\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? \nFind all unique triplets in the array which gives the sum of zero.\n\nNotice that the solution set must not contain duplicate triplets.\n\nExample 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\n\nExample 2:\nInput: nums = []\nOutput: []\n\nExample 3:\nInput: nums = [0]\nOutput: []\n\n\nConstraints:\n0 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n*/\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        // the main idea:\n        // when we need 3 sum, we can reduce it to 2 sum and also we need to avoid duplicate combination\n        \n        sort(nums.begin(), nums.end());\n        vector<vector<int>> ans;\n        // key idea for solving it: 2 pointers\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i!= 0 && nums[i]", "groundtruth": {"nums": [1, 3, 2, 4]}}
{"task_id": "java/16", "content": "\nExample 1:\nInput: nums = [3,2,2,4], k = 2\nOutput: 3\nExplanation: Set each bit of the integer 3 to zero for two operations.\nThe result is 0011.\n\nExample 2:\nInput: nums = [3,5,0,3,4], k = 3\nOutput: 7\nExplanation: Set the first two bits to zero, then four bits to one.\nThe result is 0111.\n/281-Zigzag-Iterator/solution.py\nfrom collections import defaultdict\n\n# Design an Iterator class, which has:\n# A constructor that takes a list of intergers.\n# A method next() that returns the next smallest number in the list.\n# A method hasNext() that returns True if there is such a small number still left.\n# Note: Please remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details.\n\nclass ZigzagIterator:\n    # @constructor\n    def __init__(self, v1, v2):\n        self.dict = defaultdict(int)\n        self.dict[1] = v1\n        self.dict[2] = v2\n        self.c = 0\n        self.l = len(v1) + len(v2)\n\n    # @return an integer\n    def next(self):\n        v = self.dict[self.c % 2 + 1][self.dict[self.c % 2 + 1][self.c // 2]]\n        self.c += 1\n        return v\n\n    # @return a boolean\n    def hasNext(self):\n        if self.l > self.c:\n            return True\n        return False\n\n# Your ZigzagIterator object will be instantiated and called as such:\nobj = ZigzagIterator(v1, v2)\nwhile obj.hasNext():\n    print(obj.next())\n\n\nv1 = [1, 2]\nv2 = [3, 4, 5, 6]\n/1691-Maximum-Height-by-Stacking-Cuboids/readme.md\n1691. Maximum Height by Stacking Cuboids\nMedium\n\nYou are given", "groundtruth": {"nums": [7, 3, 15, 14, 2, 8], "k": 4}}
{"task_id": "java/17", "content": "\nExample 1:\n\nInput: nums = [10, 2, 2]\nOutput: \"scalene\"\nExplanation: This is a valid triangle.\nExample 2:\n\nInput: nums = [3, 4, 5]\nOutput: \"isosceles\"\nExplanation: This is a valid triangle.\nExample 3:\n\nInput: nums = [1, 1, 1]\nOutput: \"equilateral\"\nExplanation: This is a valid triangle.\nConstraints:\n\nnums.length == 3\n1 <= nums[i] <= 50\n\n\n\n思路：\n\n题目说明了 1<= nums[i] <= 50\n我们按照题目顺序排列，如果第1个加第2个大于第3个，那么肯定不能成为三角形。\n如果第1个加第2个等于第3个，那么就是等边三角形。\n如果第1个等于第2个，但是第1个和第3个不等，那么就是等腰三角形。\n如果第1个和第2个和第3个都不相等，那么就是等腰三角形。\n\n */\nfunc triangleType(_ nums: [Int]) -> String {\n    if nums[0] + nums[1] <= nums[2] {\n        return \"none\"\n    }\n    if nums[0] == nums[1] && nums[1] == nums[2] {\n        return \"equilateral\"\n    }\n    if nums[0] == nums[1] || nums[1] == nums[2] {\n        return \"isosceles\"\n    }\n    return \"scalene\"\n}\n/LeetCode/Leetcode.playground/Pages/735.Asteroid-Collision.xcplaygroundpage/Contents.swift\n/*:\n # [735. Asteroid Collision](https://leetcode.com/problems/asteroid-collision/)\n ## Problem\n We are given an array asteroids of integers representing asteroids in a row.\n For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n Find out the state of the asteroids after all collisions. If two asteroids meet, the", "groundtruth": {"nums": [3, 4, 5]}}
{"task_id": "java/18", "content": "\nThe expected input is:\n36\nNote:\nThe length of \"word\" is in the range [1, 2500].\nThe string consists of only lowercase English letters.\nYou must solve this problem on-line using only O(1) extra space.\n\n*/\n// greedy, easy\nclass Solution {\n    \n    public static boolean check(String copy, String word) {\n        \n        int m = copy.length(), n = word.length();\n        for (int i=0; i<m; i++) {\n            if (copy.charAt(i)!= word.charAt(i)) return false;\n        }\n        return true;\n    }\n    \n    public int minimumTimeToInitialState(String word, int k) {\n        \n        int res = 0;\n        String copy = new String(word);\n        \n        do {\n            res++;\n            if (copy.length() < k)  return res;\n            copy = copy.substring(k);\n        }\n        while (!check(copy, word));\n        \n        return res;\n        \n    }\n}\n/*\nGiven an array of n integers, find the sum of all absolute differences between each pair of adjacent elements.\n\nExample\nExample 1:\n\nInput:  [1,1,2,3,10]\nOutput: 20\nExplanation: For the given input, the sum of all absolute differences is \n|1 - 1| + |1 - 2| + |2 - 3| + |3 - 10| = 20. \nExample 2:\n\nInput: [1,3,5,7,9]\nOutput: 40\nExplanation: For the given input, the sum of all absolute differences is \n|1 - 3| + |3 - 5| + |5 - 7| + |7 - 9| = 40. \n\nChallenge\nTime complexity in O(n).\n\n*/\n//easy greedy\nclass Solution {\n    /*\n     * param arr: the array of the first sequence\n     * param brr: the array of the second sequence\n     * return: the min sum of the sum of the differences\n     */\n    public int twoArraysSum(int[] A, int[] B) {\n        // write your code here\n        int res=0;\n        Arrays.sort(A);\n        Arrays.sort(B);\n        int i=A", "groundtruth": {"word": "abacaba", "k": 4}}
{"task_id": "java/19", "content": "\nInput/Output\n\nExample 1:\n\nInput:\n[[7,15,11,11],\n[6,16,6,17],\n[7,25,2,8]]\n15\nOutput:\n[[7,15,11,11],\n[6,16,6,17],\n[7,25,2,8]]\nExplanation:\nThe input grid is shown above. Notice that the grid size is 3×4, and there are 5 different numbers in the grid. The average of the numbers in the range [[0,0] -> [[0,3]] is (7+15+11+11)/4 = 15, the same as the input. The averages of the numbers in each row and each column are also 15, so the output is [[15,15,15],[15,15,15],[15,15,15]].\n\nExample 2:\n\nInput:\n[[7,15,11,11],\n[6,16,6,17],\n[7,25,2,8]]\n23\nOutput:\n[[6,16,11,14],\n[6,16,6,15],\n[6,25,2,7]]\nExplanation:\nThis is an example with k = 23. The grid size is 3×4, and there are 7 different numbers in the grid. The average of the numbers in the range [[0,0] -> [[0,3]] is (7+15+11+11)/4 = 15.625, which is not a valid average. The average of the numbers in each row and each column are the following:\nAverage of the numbers in the range [[0,0] -> [[0,3]] is 15.\nAverage of the numbers in the range [[0,1] -> [[2,1]] is 16.\nAverage of the numbers in the range [[0,2] -> [[2,2]] is 14.\nAverage of the numbers in the range [[1,0] -> [[1,3]] is 16.\nAverage of the numbers in the range [[1", "groundtruth": {"image": [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45]], "threshold": 12}}
{"task_id": "java/20", "content": "\nInput:\n1\n2\n\nOutput:\n\"1\"\n\"2\"\n\nExplanation:\nTestcase 1: word = \"00000\", k = 1\nThe minimum time required to make it back to it's initial state is 4, using the following state transitions: \"00000\" -> \"00001\" -> \"00011\" -> \"00111\"\nTestcase 2: word = \"1110\", k = 2\nThe minimum time required to make it back to it's initial state is 4, using the following state transitions: \"1110\" -> \"1111\" -> \"1111\" -> \"1111\"/src/leetcode/editor/en/802.find-eventual-safe-states.java\n//You are given an undirected graph (the \"safe states\" are always part of the graph), which\n// contains a special node \"0\" called the \"entering state\"\n// (represented by the character 'E' in the input).\n//\n// The graph is represented as a string graph which is composed of characters\n// '1', '0' and 'E', where:\n//\n//\n// 1 represents a normal safe state;\n// 0 represents a dangerous state (you cannot enter into these states\n// but you can leave them);\n// E represents the \"entering state\".\n//\n//\n// All the states are connected by some direct or indirect edge and all edges are\n// directed from the starting state (E) to a terminal state (either 0 or 1).\n// More formally, if graph[i] == graph[j], then states i and j are connected\n// directly or indirectly by an edge.\n//\n// Return an array containing a list of all the safe states for the entering state.\n// The returning array must be sorted in ascending order, should not contain duplicate\n// values, and be guaranteed to be finished in less than 1000 calls to canEnter.\n//\n// A state is safe if you can reach it safely from the entering state by following\n// the edges of the graph.\n//\n//\n// Example 1:\n//\n// Input: graph = \"1E10101", "groundtruth": {"word": "abcbabcd", "k": 2}}
{"task_id": "java/21", "content": "\n*/\n\nclass Solution {\n\tpublic int[][] modifiedMatrix(int[][] matrix) {\n\t\tint[] max_c = new int[matrix[0].length];\n\t\tfor(int j=0; j<matrix[0].length; j++){\n\t\t\tfor(int i=0; i<matrix.length; i++){\n\t\t\t\tmax_c[j] = Math.max(max_c[j], matrix[i][j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(int r=0; r<matrix.length; r++){\n\t\t\tfor(int c=0; c<matrix[0].length; c++){\n\t\t\t\tif(matrix[r][c] == -1){\n\t\t\t\t\tmatrix[r][c] = max_c[c];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn matrix;\n\t}\n}\n/src/codewars/SocksLaundry.java\npackage codewars;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SocksLaundry {\n\t//TODO:\n\t/*\n\t * There is a laundromat which has n types of socks to be sorted.\n\t * These socks are always clean. \n\t * \n\t * When we go through the laundromat, we know the order of the socks in the trough.\n\t * \n\t * Each type of sock is laundered for m cycles, then we put the socks back on the trough.\n\t * \n\t * A trough is always laundered in a specific order.\n\t * \n\t * The order can be random or based on a pattern that repeats. \n\t * \n\t * The socks go from socks of the first type to the last.\n\t * \n\t * After each cycle we change the order of socks.\n\t * \n\t * So if we have n=3, m=3 socks.\n\t * \n\t * The pattern is always the same.\n\t * \n\t * {1,2,3},{1,3,2},{2,1,3},{2,3,1},{3,1,2},{3,2,1}\n\t * \n\t * So, if a pattern is {3,1,2}, and we start with trough like {1,2,3}, \n\t * \n\t * after the first launder cycle the trough", "groundtruth": {"matrix": [[1, 2, -1], [4, -1, 6], [7, 8, 9]]}}
{"task_id": "java/22", "content": "\nExplanation:\nFor the pattern [1,0,1,1], 2 subarrays can be built from the input array (4 subarrays in total).\nFor the pattern [1,1,1,0,0,0,1,1], 5 subarrays can be built from the input array (15 subarrays in total).\n\nConstraints:\nn == nums.length\nm == pattern.length\n1 <= n, m <= 1e5\n0 <= nums[i], pattern[i] <= 1\n\nSolution 1: \nMy first thought is to consider all possible subarrays from the given array nums to be built. \nThe number of these subarrays will be O(n * m), \nwhere n and m represent the length of the given arrays nums and pattern respectively. \nWe can construct every subarray by using its starting and ending indexes and \nfor each subarray, we can check whether it matches the given pattern or not by comparing nums[j] and pattern[j], \nwhere j represents the subarray's index.\n*/\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n        int res = 0;\n        for (int i = 0; i <= nums.size() - pattern.size(); i++) {\n            bool validSubarray = true;\n            for (int j = 0; j < pattern.size(); j++) {\n                if (pattern[j] == 1 && nums[i + j + 1] <= nums[i + j]) {\n                    validSubarray = false;\n                    break;\n                } else if (pattern[j] == 0 && nums[i + j + 1]!= nums[i + j]) {\n                    validSubarray = false;\n                    break;\n                } else if (pattern[j] == -1 && nums[i + j + 1] >= nums[i + j]) {\n                    validSubarray = false;\n                    break;\n                }\n            }\n            if (validSubarray) {\n                res++;\n            }\n        }\n        return res;\n    }\n};\n\nint main() {\n    Solution s;\n    vector<int> nums{1, 0, 1, 1};\n    vector<int", "groundtruth": {"nums": [1, 4, 4, 1, 3, 5, 5, 3], "pattern": [1, 0, -1]}}
{"task_id": "java/23", "content": "\nExpected:\n5\nActual:\n2\n\n\n\n*/\n\n\n\nclass Solution {\n    public int maxPalindromesAfterOperations(String[] words) {\n        int[] len = new int[words.length];\n        int[] freq = new int[26];\n        for(int i =0;i<words.length;i++){\n            len[i] = words[i].length();\n            for(int j = 0;j<words[i].length();j++){\n                freq[words[i].charAt(j)-'a']++;\n            }\n        }\n        int even = 0;   // even pairs\n        int odds =0;    // odd elements\n        int ans =0;\n        Arrays.sort(len);\n        for(int i =0;i<freq.length;i++){\n            if(freq[i]%2!=0){\n                odds++;\n                freq[i]--;\n            }\n            even += freq[i]/2;\n        }\n         \n        for(int i =0;i<len.length;i++){\n            if(len[i]%2!=0 && odds >0){\n                odds--;\n                len[i]--;\n            }\n            else if(len[i]%2!=0 && even>0){\n                even--;\n                odds++;\n                len[i]--;\n            }\n            if(len[i]%2==0 && even >= (len[i]/2)){\n                even -=(len[i]/2);\n                len[i] = 0;\n                \n            }\n            if(even < (len[i]/2)){\n                break;\n            }\n            ans++;\n        }\n        return ans;\n    }\n}\n(String word1, String word2) {\n        int n = word1.length();\n        int m = word2.length();\n        if(n!= m)return false;\n        char[] c1 = word1.toCharArray();\n        char[] c2 = word2.toCharArray();\n        Arrays.sort(c1);\n        Arrays.sort(c2);\n        for(int i = 0; i< n;i++){\n            if(c1[i]!= c2[i])\n                return false;\n        }\n        \n        return true;\n    }\n}\n/src/com/company/Anagram.java\npackage com.company;\n\nimport java.util.Arrays;\nimport java", "groundtruth": {"words": ["abc", "ab"]}}
{"task_id": "tensorflow/0", "content": "\n### Code of the Problem\n\n```python\n# Write your code here\n```\n\n\n## How to Submit\n\nThe detailed instruction of submission is given at this [link](https://www.hackerrank.com/interview/gsoc-submission-instructions).#include <iostream>\nusing namespace std;\nint gcd(int a, int b)\n{\n   if (b==0)\n      return a;\n   return gcd(b,a%b);\n}\nint main(){\n    int t;\n    int a[10],b[10];\n    scanf(\"%d\",&t);\n    for(int i=0;i<t;i++){\n        scanf(\"%d %d\",&a[i],&b[i]);\n    }\n    for(int i=0;i<t;i++){\n        cout<<gcd(a[i],b[i])<<endl;\n    }\n    return 0;\n}\ndef max_sum(list):\n    max_num = 0\n    for i in range(len(list) - 2):\n        for j in range(i + 1, len(list) - 1):\n            for k in range(j + 1, len(list)):\n                max_num = max(max_num, sum([list[i], list[j], list[k]]))\n    return max_num\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    list = [int(x) for x in input().strip().split()]\n    print(max_sum(list))\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int t,n,flag=0;\n    long long int arr[20]={0};\n    scanf(\"%d\",&t);\n    for(int i=0;i<t;i++){\n        scanf(\"%d\",&arr[i]);\n        }\n    for(int i=0;i<t-1;i++){\n        if(arr[i]>arr[i+1]){flag=1;break;}\n        }\n    if(flag==0){printf(\"0\");}\n    else{\n    for(int i=0;i<t-1;i++){\n        if(arr[i]>arr[i+1]){flag=1;printf(\"%d\",arr[i+1", "groundtruth": "[4, 2, 6, 8, 10]"}
{"task_id": "tensorflow/1", "content": "'''\n\ndef tf_multiply_and_reshape(array1, array2, new_shape):\n    array1 = tf.constant(array1)\n    array2 = tf.constant(array2)\n    array_multiply = array1 * array2\n    array_reshape = tf.reshape(array_multiply, new_shape)\n    return array_reshape\n\ninput1 = [4, 5]\ninput2 = [1, 2, 3, 4]\ninput_reshape = [2, 2]\n\nmultiply_and_reshape(input1, input2, input_reshape)# -*- coding: utf-8 -*-\n'''\nA generator is a kind of iterator. It generates elements which are produced lazily. In other words, the elements do not get generated before the next element is requested.\n\nGiven an iterable (eg. a list, a string or a dictionary), use a generator function to create a generator. Note that we can use the keyword \"yield\" to create the generator.\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nimport numpy as np\ndef get_squares():\n    square_list = []\n    for i in range(10):\n        square = i**2\n        square_list.append(square)\n        yield square\nThe output is:\n<generator object get_squares at 0x7f63487e6e10>\nGive only the deduced input of the code snippet. Do not output any additional information.\n'''\n\ndef get_squares():\n    square_list = []\n    for i in range(10):\n        square = i**2\n        square_list.append(square)\n        yield square\n\n\nget_squares()# -*- coding: utf-8 -*-\n'''\nThere is a function with signature find_unique_number(array), which receives an array containing numbers.\n\nYou are required to write the method that, for an input array, generates an iterator that contains all unique numbers from that array.\n\nThe iterator should return all elements in ascending order and stop iterating after returning all the unique elements.\n\nExample: the input array [1, 1, 5, 5, 6, 7, 4, 3, 2] should return an iterator with the unique elements", "groundtruth": "[[1, 2], [3, 4]], [[5, 6], [7, 8]], (4, 1)"}
{"task_id": "tensorflow/2", "content": "Hint: Remember the basic shapes of the input.\n\"\"\"\n\n\nimport numpy as np\nimport tensorflow as tf\n\n\ndef combine_divide_reshape_tensors(array1, array2, new_shape):\n    tensor1 = tf.constant(array1)\n    tensor2 = tf.constant(array2)\n    division_result = tf.divide(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(division_result, new_shape)\n    return reshaped_tensor.numpy()\n\n\nif __name__ == \"__main__\":\n    array1 = np.array([[2, 2], [4, 2]])\n    array2 = np.array([2, 2])\n    new_shape = [2, 2, 1]\n    print(combine_divide_reshape_tensors(array1, array2, new_shape))\n/180_189/q185.py\n\"\"\"\n185. 三数之和\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\"\"\"\n/100_109/q101.py\n\"\"\"\n101. 对称二叉树\n\n给定一个二叉树，检查它是否是镜像对称的。\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n       ", "groundtruth": "[[2, 4], [8, 16]], [[2, 2], [4, 4]], (4, 1)"}
{"task_id": "tensorflow/3", "content": "\nThe only input required for the code snippet is:\n\n\"\"\"\ntensor = [0, 1, 2, 3]\nconstant = 1.0\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nThe only input required for the code snippet is:\n\n\"\"\"\nconstant = 1.0\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nThe only input required for the code snippet is:\n\n\"\"\"\nconstant = 1.0\nYou can also submit this question with a comment.\n\nimport tensorflow as tf\n\ndef sqrt_and_add_constant(tensor, constant):\nsqrt_tensor = tf.math.sqrt(tensor)\nresult = tf.add(sqrt_tensor, constant)\nreturn result\n\ntensor = [0, 1, 2, 3]\nprint(sqrt_and_add_constant(tensor, 1.0))\n\"\"\"\nYou can also submit this question with a comment.\n\ntensor = [0, 1, 2, 3]\nconstant = 1.0\nprint(sqrt_and_add_constant(tensor, constant))\n\"\"\"\n\"\"\"\nYou can also submit this question with a comment.\n\nconstant = 1.0\nprint(sqrt_and_add_constant(tensor, constant))\n\"\"\"\n\"\"\"\nYou can also submit this question with a comment.\n\ntensor = [0, 1, 2, 3]\nconstant = 1.0\nprint(sqrt_and_add_constant(tensor, constant))\n\"\"\"", "groundtruth": "[16, 25, 36, 49], 5"}
{"task_id": "tensorflow/4", "content": "\n# Code Snippet:\n\nnumbers = [0, 1, 2, 3]\nprint(log_transformation(numbers))\n\nThe only input that I can deduce is that the type of tensor in the log_transformation function must be tf.constant([0.0, 1.0, 2.0, 3.0], dtype=tf.float32). If this is the case, it would return the float numbers 0.0, 1.0, 2.0, 3.0.\n'''\nnumbers = [0.0, 1.0, 2.0, 3.0]\nprint(numbers)# Exercise 68:\n'''\nQuestion\nConsider the code below:\n\n# Code Snippet:\nimport tensorflow as tf\n\nclass MyModel(tf.Module):\n  def __init__(self):\n    super(MyModel, self).__init__()\n    self.linear1 = tf.keras.layers.Dense(units=4, input_shape=[1])\n    self.linear2 = tf.keras.layers.Dense(units=4)\n    self.linear3 = tf.keras.layers.Dense(units=1)\n\n  def __call__(self, x):\n    x = self.linear1(x)\n    x = tf.nn.relu(x)\n    x = self.linear2(x)\n    x = tf.nn.relu(x)\n    x = self.linear3(x)\n    return x\nA tf.Module instance has a trainable attribute set to True. That means that it’s variables can be updated during training with backpropagation. On the contrary, the MyModel class has a trainable attribute set to False. This is because MyModel doesn’t have any variables.\n\nAfter the code snippet, two functions are added:  build() and call().\n\nYour goal is to make the model trainable. There are two ways of doing this:\n\nYou can make build() and call() trainable, or\nYou can set the trainable attribute of the MyModel class to True.\nThe code snippet will be executed as shown below:\n\ntf.saved_model.save(model, '/tmp/saved_model_dir')\nrestored_model = tf.saved_model.load('/tmp/saved_model_dir')\n", "groundtruth": "[1, 2.71828, 7.38906, 20.0855]"}
{"task_id": "tensorflow/5", "content": "'''\n\nimport tensorflow as tf\nimport numpy as np\n\ndef matrix_operations(matrix1, matrix2):\n    tensor1 = tf.constant(matrix1, dtype=tf.float32)\n    tensor2 = tf.constant(matrix2, dtype=tf.float32)\n    product = tf.linalg.matmul(tensor1, tensor2)\n    determinant = tf.linalg.det(product)\n    return determinant.numpy()\n\nmatrix1 = np.array(\n    [[5.11098, 8.88504],\n     [6.09244, 8.07412]],\n    dtype=np.float32)\nmatrix2 = np.array(\n    [[9.70241, 8.30871],\n     [8.19258, 7.63938]],\n    dtype=np.float32)\n\noutput = matrix_operations(matrix1, matrix2)\nprint(output)\n\n# Answer: matrix2 (the second input)'''\nhttps://www.interviewbit.com/problems/max-distance/\n\nGiven an array A of integers, find the maximum of j - i subjected to the constraint of A[i] <= A[j].\n\nIf there is no solution possible, return -1.\n\nExample :\n\nA : [3 5 4 2]\n\nOutput : 2 \nfor the pair (3, 4)\n'''\n\nclass Solution:\n    # @param A : tuple of integers\n    # @return an integer\n    def maximumGap(self, A):\n        if len(A) < 2:\n            return -1\n        \n        min_array = []\n        max_array = []\n\n        for a in A:\n            if len(min_array) < 2:\n                min_array.append(a)\n                max_array.append(a)\n            elif a > max(max_array):\n                max_array[-1] = a\n            elif a < min(min_array):\n                min_array.append(a)\n\n        gap = 0\n        if len(min_array) == 1:\n            return 0\n        elif len(max_array) == 1:\n            gap = max_array[0] - min_", "groundtruth": "[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]"}
{"task_id": "tensorflow/6", "content": "'''\nimport numpy as np\na = [np.arange(3*2).reshape(3,2)+i for i in range(4)]\nprint(a)\nb = [np.arange(2*3).reshape(2,3)+i for i in range(4)]\nprint(b)\nb = np.transpose(b,(2,0,1))\nprint(b)\nc = np.vstack(a)\nprint(c)\nd = np.concatenate(b,axis=2)\nprint(d)\ne = np.split(c,4,axis=0)\nprint(e)\nf = [np.concatenate(i,axis=1) for i in e]\nprint(f)\ng = np.split(f,4,axis=0)\nprint(g)\nh = [np.reshape(i,(2,3)) for i in g]\nprint(h)\nprint(np.concatenate(h,axis=1))\n\n'''\nWhat is the output of the following TensorFlow code?\n\nimport tensorflow as tf\n\nclass MyModule(tf.Module):\n  def __init__(self, init_value):\n    self.state = tf.Variable(init_value, trainable=True)\n    self.state.assign_add(2)\n\n  def multiply(self, mul_factor):\n    self.state.assign(self.state * mul_factor)\n\n  @tf.function\n  def run(self, input):\n    output = input * self.state\n    self.multiply(3)\n    return output\n\nmodule = MyModule(3.0)\nwith tf.GradientTape() as tape:\n  input_data = tf.constant(2.0)\n  result = module.run(input_data)\nresult_value = result.numpy()\nprint(result_value)\n\nFor this code, please answer the following questions:\nWhich of the following statements is correct?\nThe variable \"module\" is a module instance and therefore, the method \"run()\" is a function of the class \"MyModule\" and is marked with the decorator \"tf.function\". This means that the method \"run()\" can be executed when passing an input. Hence, \"module\" will be called without any input.\nThe input data is converted to a constant Tensor of the value 2", "groundtruth": "([[4, 2], [6, 4], [3, 6]], [3, 2])"}
{"task_id": "tensorflow/7", "content": "\nThe possible inputs of the code snippet are:\n[0, 1, 2, 3]\n[0, 1]\n[0, 1, 2]\n[0]\n\nWe have discussed that the correct input must be [0, 1, 2, 3].\nExplanation\nThe code snippet works as follows:\n\nSquared each element of the input tensor and stored the squared values in a new tensor (squared_tensor).\nSummed the squared elements of squared_tensor and stored the sum in sum_of_elements.\nThe final result is printed (sum_of_elements).\n\"\"\"\n/leetcode/30 Day Challenge/May/Week 3/Day 17 - Search in a Binary Search Tree.py\n\"\"\"\nSearch in a Binary Search Tree\nGiven the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.\n\nFor example,\n\nGiven the tree:\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\nAnd the value to search: 2\nYou should return this subtree:\n\n      2\n     / \\\n    1   3\nIn the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.\n\nNote that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def searchBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n\n        # find a node with the value equal to val\n        def dfs(node):\n            if not node:\n                return\n            elif node.val == val:\n                self.ans = node\n                return\n            dfs(node.left)\n            dfs(node.right)\n            return\n\n        dfs(root)\n        return self.ans\n/leetcode/30 Day Challenge/May", "groundtruth": "[2, 4, 6]"}
{"task_id": "tensorflow/8", "content": "from IPython.display import Image\nImage(filename='/content/tensor.png')\n# YOUR CODE HERE\nnp.array([2,2,2])+ np.array([5,5,5])\n\n\"\"\"\narray([7, 7, 7])\n\"\"\"", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[6, 5, 4], [3, 2, 1]]"}
{"task_id": "tensorflow/9", "content": "\nNote: Please upload the program that can directly run on the TensorFlow platform. This means that if you use the python file format, please modify the file name to end with \".py\" to avoid submission error.\n\nThere is no limit to the number of attempts. However, the answer after 3rd attempt will be accepted. \nYou can also discuss the answer with others.\n\nAfter your submission, you can view the submission status on the website. The detailed instruction can be viewed under the \"Code\" section. If you have problems with the submission, please contact the course organizer or TAs for help.\n\nHints:\n\nThere are many different ways to deduce the input of the code.\nHere is one possible method.\n\nThe shape of the reshaped tensor is [2,4], which means that the shape of the original tensor is [4,2].\nSince the square of any number is not less than 0, the elements of the original tensor must be integers. \nBecause the sum of 100 and 110 is not an even number, the elements of the original tensor are not 0,100,110.\n\nThe program is written in Python, and the output is in Python list format.\n\nPlease enter the list format answer. Do not include any other information. For example, if you output the list [1,2,3] to the input, please directly enter [1,2,3].\n\nThere is no limit to the number of attempts. However, the answer after 3rd attempt will be accepted. \nYou can also discuss the answer with others.\nAfter your submission, you can view the submission status on the website. The detailed instruction can be viewed under the \"Code\" section. If you have problems with the submission, please contact the course organizer or TAs for help.\n\n#your program:\ndef complex_tensor_reshape_and_square(input_list, shape):\n    import tensorflow as tf\n    initial_tensor = tf.constant(input_list)\n    squared_tensor = tf.math.square(initial_tensor)\n    reshaped_tensor = tf.reshape(squared_tensor, shape)\n    return reshaped_tensor.numpy()\ninput_list = [100,110,120,130]\nshape = [2,4]\n", "groundtruth": "[[2, 3, 5, 7], [11, 13, 17, 19]], (4, 2)"}
{"task_id": "tensorflow/10", "content": "\nThe first argument is the list1, the second argument is the list2.\n\nlist1=[1,2,3]\nlist2=[4,5,6]\naxis=0.\n\nThe output is:\n6.\n\"\"\"\n\n# Given list1=[1,2,3],list2=[4,5,6], the output will be the 6 if the axis is 0.\n\n# 22.\n# Code : Code Snippet 69\n# Input : \"1, 3, 6, 2, 5, 4, 3, 2, 1,\"\n# Output : 2\n\n\"\"\"\nCode snippet 69 :\n\n# Python code for the above snippet\nimport numpy as np\nimport pandas as pd\nlist_str = input()\nlist_obj = pd.Series(np.random.randn(9))\nlist_obj = list_obj.astype(int)\nlist_obj[0] = int(list_str)\nlist_str = list(list_obj)\n\nfor item in list_str:\n    if(list_str.count(item) == 1):\n        print(item)\n\nThe string received is \"1, 3, 6, 2, 5, 4, 3, 2, 1,\"\n\nWhat is the output of the code snippet?\n\"\"\"\n\n# In this case the output will be the number with the count of 1.\n# 1. 1\n\n# 23.\n# Code : Code Snippet 70\n# Input : \"a= 5.5, b= 7, c= 3.5\"\n# Output : 7\n\n\"\"\"\nCode snippet 70 :\n# Python code for the above snippet\nimport re\nmy_list = input()\nmy_list = my_list.replace(\" \",\"\")\nnum_arr = my_list.split(\",\")\nfor i in num_arr:\n    if re.match(\"[0-9.]+\",i):\n        val_arr = re.split(\"[=]\",i)\n        if (float(val_arr[0]) > 5.0) and (float(val_arr[1]) > 10.0):\n            print(val_arr[1", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], 0"}
{"task_id": "tensorflow/11", "content": "\nFor instance, if the input of the above code snippet is\n\nlist1 = [10, 20, 30]\nlist2 = [4, 5, 6]\nnew_shape = [3, 2]\nThe only output that you can give is\n\n[4, 5, 6]\nDo not output 4.\n\nYour submission will be judged using a special test case that we will create based on the above output.\n\"\"\"\nimport pytest\n\nimport numpy as np\n\nimport tensorflow as tf\n\n\ndef complex_operations(list1, list2, new_shape):\n    tensor1 = tf.constant(list1, dtype=tf.float32)\n    tensor2 = tf.constant(list2, dtype=tf.float32)\n    multiplied_tensor = tf.multiply(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(multiplied_tensor, new_shape)\n    product_of_elements = tf.reduce_prod(reshaped_tensor)\n    return product_of_elements.numpy()\n\"\"\"\nhttps://programmers.co.kr/learn/courses/30/lessons/60057\n\"\"\"\n\ndef solution(s):\n    answer = len(s)\n    for i in range(1, len(s) // 2 + 1):\n        # s[i:]를 i의 길이로 잘라내서 문자열변경하고 answer과 비교\n        answer = min(answer, len(make_new(s[i:], i)))\n    return answer\n\n\ndef make_new(s, n):\n    new_s = \"\"\n    # 문자열이 s의 길이의 배수가 아니면, 끝에 추가할 문자열로 채워넣자\n    if len(s) % n:\n        # 앞에서부터 n의 길이만큼 복사를 한번 반복\n        new_s = s + s[:(n - (len(s) % n))]\n    else:\n        new_s = s\n    # 앞에서부터 n의 길이만큼 복사를 한번 반복, 끝에 문자열 붙이자\n    return (s + new_s)[::n", "groundtruth": "[[2, 3], [4, 5], [6, 7]], [[7, 6], [5, 4], [3, 2]], (3, 2)"}
{"task_id": "pytorch/0", "content": "\nExample:\nIf the code snippet was\n\nprint(calculate_sum([2, 4, 6]))\nthen the correct input should be\n\n[2, 4, 6]\nNote: Please return a list containing only integers.\n/codeforces/Codeforces_Round_#491_Div_2/A_Wrong_Subtraction/Wrong_Subtraction.py\nimport sys\n\ndata = sys.stdin.read().strip()\nN, k = map(int, data.split())\n\nwhile k > 0:\n    if N % 10!= 0:\n        N -= 1\n        k -= 1\n    elif N % 10 == 0:\n        N /= 10\n        k -= 1\n\nprint(int(N))/codefights/Arcade/Intro/Is_Lucky.py\ndef isLucky(n):\n    n = str(n)\n    if len(n) % 2!= 0:\n        return False\n    return sum(int(i) for i in n[0:len(n) / 2]) == sum(int(i) for i in n[len(n) / 2:])\n/codefights/Interview_Practice/Strings/buildPalindrome/buildPalindrome.py\nimport math\n\ndef buildPalindrome(st):\n    s = list(st)\n    s.sort()\n    m = s[int(len(st)/2)] if len(st)%2!= 0 else ''\n    return ''.join(s) + m + ''.join(reversed(s))/codefights/Interview_Practice/Arrays/firstDuplicate/firstDuplicate.py\ndef firstDuplicate(a):\n    d = {}\n    for i in a:\n        if i in d:\n            return i\n        d[i] = True\n    return -1/codefights/Challenges/christmas_present_decoration/christmas_present_decoration.py\nimport sys\n\ndata = sys.stdin.read().strip()\nN = int(data)\n\nres = 0\n\nfor i in range(N, N * N + 1):\n    res += i\n\nprint(res)/codeforces/Codeforces_Round_#491", "groundtruth": "[4, 2, 6, 3, 1]"}
{"task_id": "pytorch/1", "content": "\nThe following are all acceptable outputs: \n- tensor1, tensor2\n- tensor1 = tensor2\n\n- tensor1 = torch.randn(3, 3, 3)\n- tensor2 = torch.randn(3, 3, 3)\n\n- tensor1, tensor2 = tensor1.clone(), tensor2.clone()\n\n- tensor1 = tensor2 = torch.randn(3, 3, 3)\n\n- tensor1 = torch.randn(3, 3, 3)\n- tensor2 = torch.randn(3, 3, 3)\n\n- tensor1, tensor2 = 3, 7\n\n- tensor1, tensor2 = 3, tensor2\n\n- tensor1, tensor2 = tensor1, 7\n\n- tensor1, tensor2 = tensor1, tensor2\n\nThe following are all unacceptable:\n- tensor1, tensor2 = tensor1, tensor2 - 1\n- tensor1, tensor2 = tensor1, tensor2[2:,...]\n- tensor1, tensor2 = tensor1[0:2, :], tensor2\n- tensor1, tensor2 = tensor1[0:2, :].clone(), tensor2[0:2, :].clone()\n# @title\ndef tensor_operations(tensor1, tensor2):\n    if not (tensor1.size() == tensor2.size()):\n        raise ValueError('Input tensors must have the same size')\n    added_tensors = torch.add(tensor1, tensor2)\n    mean_value = torch.mean(added_tensors.float())\n    return mean_value\n# @title\ntorch.manual_seed(7)\ntensor1, tensor2 = 3, 7\n# @title\ntorch.manual_seed(7)\ntensor1, tensor2 = 3, tensor2\n# @title\ntorch.manual_seed(7)\ntensor1, tensor2 = tensor1, 7\n# @title\ntorch.manual_seed(7)\ntensor1, tensor2 = tensor1, tensor2\n# @title\ntorch.manual_seed(7)\ntensor1, tensor2 = torch.randn(3, 3, 3), torch.randn(3, 3, 3)\n# @title\ntorch.manual", "groundtruth": "[[1, 2, 3], [4, 5, 6]], [[6, 5, 4], [3, 2, 1]]"}
{"task_id": "pytorch/2", "content": "*/\n\n\n#include <cstddef>\n\n#define MAX_SIZE (3200)\n#define MAX_INT (2147483647)\n#define MIN_INT (-2147483647)\n\nnamespace c {\n    typedef size_t int_t;\n    typedef unsigned short uint8_t;\n    typedef short int16_t;\n    typedef unsigned int uint32_t;\n    typedef int int32_t;\n\n    typedef void void_t;\n    class Tensor {\n    public:\n        inline uint8_t* data() const {\n            return data_;\n        }\n\n        inline int32_t stride(int index) const {\n            if (index < 0) {\n                return -1;\n            }\n            if (index >= ndim_) {\n                return 1;\n            }\n            return strides_[index];\n        }\n\n        inline int32_t stride(int32_t dim) const {\n            if (dim < 0) {\n                return -1;\n            }\n            if (dim >= ndim_) {\n                return 1;\n            }\n            return strides_[dim];\n        }\n\n        inline int32_t size(int32_t dim) const {\n            if (dim < 0 || dim >= ndim_) {\n                return 0;\n            }\n            return size_[dim];\n        }\n\n        inline int32_t ndim() const {\n            return ndim_;\n        }\n\n        void set_data_and_strides(uint8_t* data, int32_t* strides,\n                const int32_t* sizes) {\n            if (!data ||!strides) {\n                ndim_ = 0;\n                data_ = NULL;\n                strides_[0] = 1;\n                size_[0] = 0;\n                return;\n            }\n\n            data_ = data;\n            ndim_ = 1;\n            strides_[0] = 1;\n            size_[0] = 1;\n\n            for (int32_t dim = 0; dim < MAX_SIZE; dim++) {\n                int32_t stride = strides[dim];\n                int32_t size = sizes[dim];\n\n                if (stride == -1 || size == -1) {\n                    break;\n                }\n                ndim_++;\n                if (ndim_ > MAX_SIZE)", "groundtruth": "[1, 2, 3, 4, 5], threshold = 2"}
{"task_id": "pytorch/3", "content": "\nAns: List2\n\nFor a certain neural network model, you trained it with the following parameters in the following way and got the output results for the testing data:\nThe code snippet is:\nimport numpy as np\nimport torch\n\ninput_data = np.random.rand(2, 100)\ninput_data = torch.tensor(input_data)\nlayer1 = torch.nn.Linear(in_features=100, out_features=50)\nrelu_act = torch.nn.ReLU()\nlayer2 = torch.nn.Linear(in_features=50, out_features=30)\nrelu_act = torch.nn.ReLU()\nlayer3 = torch.nn.Linear(in_features=30, out_features=15)\nrelu_act = torch.nn.ReLU()\nlayer4 = torch.nn.Linear(in_features=15, out_features=1)\noutput_model = layer1(input_data)\noutput_model = relu_act(output_model)\noutput_model = layer2(output_model)\noutput_model = relu_act(output_model)\noutput_model = layer3(output_model)\noutput_model = relu_act(output_model)\noutput_model = layer4(output_model)\n\nThe output results are:\n[[0.1145]\n[0.0845]\n[0.1654]\n[0.1504]\n[0.1714]\n[0.0953]\n[0.1405]\n[0.1186]\n[0.1136]\n[0.0945]]\nYou are required to report the learning rate for the training procedure.\n\nAns: 0.001", "groundtruth": "[[1, 3, 5, 7], [2, 4, 6, 8]]"}
{"task_id": "pytorch/4", "content": "\nThe answer should follow this format:\ntensor([?])\n\nWe also require the following:\n\nCode written in python 3.7\n\nSample input/output\nWe show an example of sample input and expected output below:\n\n\nInput:\ndata = [0.0, 1.0, 2.0, 3.0, 4.0]\nOutput:\ntensor([-1.4142, -0.7071, 0.0, 0.7071, 1.4142])import torch\n\ndef normalize_data(data):\n    tensor = torch.tensor(data, dtype=torch.float)\n    mean = torch.mean(tensor)\n    std = torch.std(tensor)\n    normalized_tensor = (tensor - mean) / std\n    return normalized_tensor.tolist()\n\ndata = [0.0, 1.0, 2.0, 3.0, 4.0]\nnormalize_data(data)\nimport torch\ndata = [0.0, 1.0, 2.0, 3.0, 4.0]\ntensor = torch.tensor(data, dtype=torch.float)\nmean = torch.mean(tensor)\nstd = torch.std(tensor)\nnormalized_tensor = (tensor - mean) / std\nprint(normalized_tensor)tensor([-1.4142, -0.7071,  0.0000,  0.7071,  1.4142])\n### The Solution\nThe code snippet is:\n```\nimport torch\n\ndef normalize_data(data):\n    tensor = torch.tensor(data, dtype=torch.float)\n    mean = torch.mean(tensor)\n    std = torch.std(tensor)\n    normalized_tensor = (tensor - mean) / std\n    return normalized_tensor.tolist()\n```\n\nWe can deduce that the input tensor has to be a list.\n\nOutput:\n```\ntensor([-1.4142, -0.7071,  0.0000,  0.7071,  1.4142])\n```\nThe answer is therefore `tensor([?])`\n\n`normalize_", "groundtruth": "[5, 15, 25, 35, 45]"}
{"task_id": "pytorch/5", "content": "'''\n\ndef complex_tensor_operations(tensor1, tensor2, shape):\n    if tensor1.size()!= tensor2.size():\n        raise ValueError('Input tensors must have the same size')\n    multiplied_tensor = torch.mul(tensor1, tensor2)\n    reshaped_tensor = torch.reshape(multiplied_tensor, shape)\n    return reshaped_tensor\n\n\n# +\n'''\nQ. Please deduce the number of dimensions of the output of the code.\nThe code snippet is:\nimport torch\n\ndef complex_tensor_operations(tensor1, tensor2, shape):\n    if tensor1.size()!= tensor2.size():\n        raise ValueError('Input tensors must have the same size')\n    multiplied_tensor = torch.mul(tensor1, tensor2)\n    reshaped_tensor = torch.reshape(multiplied_tensor, shape)\n    return reshaped_tensor\nThe output is:\n[[ 15,  4],\n [9, 72],\n [25, 36]]\n'''\n\ndef complex_tensor_operations(tensor1, tensor2, shape):\n    if tensor1.size()!= tensor2.size():\n        raise ValueError('Input tensors must have the same size')\n    multiplied_tensor = torch.mul(tensor1, tensor2)\n    reshaped_tensor = torch.reshape(multiplied_tensor, shape)\n    return reshaped_tensor\n\n\n# +\n'''\nQ. Please write a class constructor that initializes instance variables self.x and self.y by assigning them values 0 and 1. \nThe code snippet is:\nimport torch\n\ndef complex_tensor_operations(tensor1, tensor2, shape):\n    if tensor1.size()!= tensor2.size():\n        raise ValueError('Input tensors must have the same size')\n    multiplied_tensor = torch.mul(tensor1, tensor2)\n    reshaped_tensor = torch.reshape(multiplied_tensor, shape)\n    return reshaped_tensor\nThe output is:\n[[ 15,  4],\n [9, 72],\n [25, 36]]\n'''\n\nclass MyClass:\n\n    def __init__(self):\n        self.x = 0\n        self.y = 1\n        \n    def complex_tensor_operations(tensor1, tensor2", "groundtruth": "[[3, 2, 3], [8, 5, 6]], [[5, 2, 3], [9, 5, 6]], (3, 2)"}
{"task_id": "pytorch/6", "content": "\nNote: It’s recommended to make an educated guess for the final input and then test your guess by running the code snippet. If the input is incorrect, you can still receive points even though you get a wrong answer.\n\nIf you feel that your answer is wrong or incomplete, you can click the “discuss” button and ask your peers or our teacher for help.\n'''\n\nimport torch\n\ndef concatenate_and_compute_mean(tensor1, tensor2):\n    concatenated_tensor = torch.cat((tensor1.unsqueeze(0), tensor2.unsqueeze(0)), dim=0)\n    mean_values = torch.mean(concatenated_tensor, dim=1)\n    return mean_values\n\ndef solution(tensor1, tensor2):\n    input_tensors = [tensor1, tensor2]\n    for i in range(3):\n        concatenated_tensor = torch.cat((input_tensors[i].unsqueeze(0), input_tensors[i+1].unsqueeze(0)), dim=0)\n        mean_values = torch.mean(concatenated_tensor, dim=1)\n        input_tensors.insert(i, mean_values)\n    return input_tensors[1]\n\n# The following line of code is for testing only. Please do not remove it.\nprint(solution(torch.tensor([1.0]), torch.tensor([2.0])))\n\n'''\nQ2: (10 points)\nPlease deduce the output of the following code based on the code snippet and the input below.\n\nThe code snippet is:\nimport torch\nfrom torch import nn\n\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.linear = nn.Linear(5, 1)\n        self.relu = nn.ReLU()\n\n    def forward(self, x):\n        out = self.linear(x)\n        out = self.relu(out)\n        return out\n\nmodel = Model()\nmodel.forward(torch.ones([2, 5]))\nThe input is:\n2\nGive only the deduced output of the code snippet. Do not output any additional information.\n\nNote: It’s recommended to make an educated guess for the final output and then test your guess by running the code snippet. If the output is incorrect, you can still receive points even", "groundtruth": "[torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6])]"}
{"task_id": "pytorch/7", "content": "'''\nimport torch\n\ndef reshape_and_square(tensor, shape):\n    reshaped_tensor = torch.reshape(tensor, shape)\n    squared_tensor = torch.pow(reshaped_tensor, 2)\n    return squared_tensor\n\nx = torch.FloatTensor([[2, 4], [6, 8]])\ntorch.reshape(x, (-1,)), a)\n\n# Output:\n# Hello, world! I'm a\n# Hello, world! I'm a\n/test33.py\n'''\nConsider the following code snippet:\na = \"I'm a\"\n\ndef fun():\n    a = \"Hello, world!\"\n    print(a)\n\nfun()\nprint(a)\nWhat is the output of the program?\n'''\na = \"I'm a\"\n\ndef fun():\n    a = \"Hello, world!\"\n    print(a)\n\nfun()\nprint(a)\n\n# Output:\n# Hello, world!\n# I'm a\n\n# The global variable a is not affected by the function fun,\n# since it is referenced by the name a and not as self.a in the function.\n\nclass Foo:\n    a = \"I'm a\"\n    def fun(self):\n        a = \"Hello, world!\"\n        print(a)\n\nf = Foo()\nf.fun()\nprint(a)\n\n# Output:\n# Hello, world!\n# I'm a\n\na = \"I'm a\"\n\ndef fun(a):\n    a = \"Hello, world!\"\n    print(a)\n\nfun(a)\nprint(a)\n\n# Output:\n# Hello, world!\n# I'm a\n\na = \"I'm a\"\n\ndef fun():\n    global a\n    a = \"Hello, world!\"\n    print(a)\n\nfun()\nprint(a)\n\n# Output:\n# Hello, world!\n# Hello, world!\n\n\na = \"I'm a\"\n\ndef fun():\n    def inner():\n        a = \"Hello, world!\"\n        print(a)\n    inner()\n    print(a)\n\nfun()\n\n# Output:\n# Hello, world!\n# I'm a\n\na = \"I'm a\"\n\ndef outer():\n   ", "groundtruth": "[torch.tensor([4, 2, 6, 4]), (2, 2)]"}
{"task_id": "pytorch/8", "content": "\nIf the code snippet is correct, print out the input:\n\n4\n\nIf it is not correct, print the answer:\n\n-1\n\"\"\"\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\n\n\nclass Solution:\n    @staticmethod\n    def transform(x):\n        if x == -1:\n            return np.zeros((1, 4), dtype=np.float)\n        # x is array\n        # y = one_hot encoding(x)\n        # return np.array(y).reshape(-1, 16)\n        return x\n#\n# # print(type(x))\n# print(Solution.transform(x).shape)\n# # 这里的y是OneHotLabel，所以应该是一个(n, 4)维度的数组，而不是(4,)\n# # 这个数组的每一列都包含一个one_hot编码的特征\n# print(np.array(Solution.transform(x)).shape)\n\n\nclass Dataset:\n    def __init__(self, data):\n        self.data = data\n\n    def __getitem__(self, item):\n        # print(\"item\", item)\n        # print(\"x\", self.data[item, :])\n        x = Solution.transform(self.data[item, :])\n        y = Solution.transform(self.data[item, 4]).reshape(-1, 1)\n        # print(x, y)\n        return x, y\n\n    def __len__(self):\n        return len(self.data)\n\n\nclass DNNClassifier:\n    def __init__(self, num_epoch, batch_size, learning_rate, hidden_layers, output_layer,\n                 device=\"cpu\"):\n        self.epochs = num_epoch\n        self.batch_size = batch_size\n        self.lr = learning_rate\n        self.hidden_layers = hidden_layers\n        self.output_layer = output_layer\n        self.device = device\n\n        self._net = nn.Sequential()\n        # self._net.to(device)\n        self.loss_f = nn.MSELoss()\n        self._net.to(self.device)\n        self.loss_f.to(self.device)\n\n        self._init_layers()\n\n        # self.loss_fn = nn.MSELoss()\n\n    def _init_layers(self):\n       ", "groundtruth": "[torch.tensor([[4, 2], [7, 4]]), torch.tensor([[16, 6], [4, 8]])]"}
{"task_id": "pytorch/9", "content": "'''\n```\n#### 4、字符串：\n##### 1) 翻转字符串\n##### 2) 字符串截取\n##### 3) 查找子字符串\n##### 4) 字符串合并\n##### 5) 字符串长度\n##### 6) 字符串替换\n##### 7) 单词翻转\n##### 8) 单词逆序\n##### 9) 汉字转拼音\n##### 10) 汉字首字母\n\n## 2. Pandas\n1、数据表格的建立与使用  \n#### 1）建立数据表格\n#### 2）数据表格的使用\n##### 2.1) 统计行数与列数\n##### 2.2) 打印前几行\n##### 2.3) 数据表格的某一列数据类型\n##### 2.4) 统计各列数据类别\n##### 2.5) 读取列名\n##### 2.6) 某列数据类型\n##### 2.7) 某列数据均值\n##### 2.8) 某列数据众数\n##### 2.9) 某列数据方差\n##### 2.10) 某列数据标准差\n##### 2.11) 某列数据的极差\n##### 2.12) 某列数据缺失数\n##### 2.13) 某列数据缺失率\n##### 2.14) 统计各列非缺失数据个数\n##### 2.15) 删除某一列\n##### 2.16) 删除所有列\n##### 2.17) 数据排序\n##### 2.18) 筛选特定范围内的行数据\n##### 2.19) 筛选特定范围内的数据\n##### 2.20) 根据索引筛选特定数据\n##### 2.21) 某列数据的索引序号\n##### 2.22) 多列数据的索引序号\n##### 2.23) 列向行索引\n##### 2.24) 多列向多行索引\n##### 2.25) 获取所有行某列数据\n##### 2.26) 筛", "groundtruth": "[2, 6, 4, 6, 3, 5, 4, 5, 1]"}
{"task_id": "pytorch/10", "content": "\nExplanation:\nThe deduced input is [10, 2, 3, 4].\nPlease read the question carefully to avoid getting the incorrect input.\n\"\"\"\nimport torch\n\ndef calculate_product(nums):\n    tensor_nums = torch.tensor(nums)\n    product_value = torch.prod(tensor_nums)\n    return product_value\n# Answer\n_main__':\n  main()\n/018-20190619/018-20190619-test.py\n# pylint: disable=invalid-name,line-too-long\n\"\"\"\nA. Two Friends\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\n\nTwo friends have decided to play with some toys on a table. At first they place one toy in the table, then they turn their toys over and place another toy in it. The first friend is playing with an even toy and the second is playing with an odd toy. It's the second friend's turn. The turn is repeated until the first friend is playing with an even toy and the second is playing with an odd one.\n\nYou are given a toy's number a and an even number n. Find the number of turns this will take the second friend in order to place the toy number a on the first friend's turn.\n\nAs the turn is repeated until the first friend is playing with an even toy and the second is playing with an odd one. You can assume that both friends start with even number.\n\nInput\nThe first line contains a single integer a (1 ≤ a ≤ 109) — the number of the toy in the table.\n\nThe second line contains a single integer n (1 ≤ n ≤ 109) — an even integer that shows how many times have turned the toys to each other.\n\nOutput\nPrint a single integer — the number of turns required for second friend to place the number a on the first friend's turn.\n\nExamples\ninput\n2\n2\noutput\n2\ninput\n2\n3\noutput\n5\ninput\n3\n6\noutput\n9\n\"\"\"", "groundtruth": "[2, 3, 4, 5]"}
{"task_id": "pytorch/11", "content": "You do not need to output the deduced input by running the snippet. Just write the deduced input as you write\ncode for it.\nDo not import any library, use the standard libraries of the programming language to answer this question./Python Practice Book/Chapter 9 Strings.py\nsentence = \"this is my first sentence!\"\nsentence[0].isupper()\nsentence[0].islower()\nlen(sentence)\nsentence.capitalize()\nsentence.upper()\nsentence.lower()\nsentence.title()\nsentence.replace(\"i\", \"you\")\nsentence.split(\"!\")\na = \"Hello, world!\"\nlen(a.split(\",\"))\na.find(\"world\")\na.find(\"Hello\")\na.index(\"world\")\na.index(\"Hello\")\na.index(\",\")\na.index(\",\", 3)\n\"0123456789\".index(\"3\")\n\"0123456789\".index(\"5\", 4)\n\"0123456789\".index(\"7\", 2)\n\"0123456789\".index(\"7\", 10)\n\" \".join([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\nsentence.replace(\"this\", \"that\")\nsentence.replace(\"this\", \"that\", 1)\n\"this, that\".split(\",\")\n\", \".join([\"this\", \"that\"])\na = \"    Hello, world!    \"\nlen(a.strip())\n\"     Hello, world!      \".strip()\n\"    Hello, world!      \".lstrip()\n\"    Hello, world!     \".rstrip()\na.strip()\na.lstrip()\na.rstrip()\na.strip().capitalize()\na.strip().capitalize().replace(\" \", \"\")\n\"this, that\".split(\",\")\na = 5\ndir(a)\ndir(5)\ndir([1, 2, 3])\n\"abc\".lower()\n\"ABC\".lower()\n[1, 2, 3].index(2)\n\"a, b, c\".split(\",\")\n\"a b c\".split(\" \")\n\"a b c\".split(\"", "groundtruth": "[3, 7, 2, 9, 4]"}
{"task_id": "pytorch/12", "content": "\nThe input is:\n-0.1060, -0.0561, -0.0861\n\nThe input must be a single line.\n\nYou may paste your input in the cell below.\n\nThis is the second sample input and your code should work with it.import torch\n\ndef enable_grad_and_compute(tensor_val):\n    tensor = torch.tensor(tensor_val, dtype=torch.float32, requires_grad=True)\n    result = tensor * tensor\n    result.backward(torch.ones_like(tensor))\n    return tensor.grad\n# Your code here\nprint(enable_grad_and_compute([-0.1060, -0.0561, -0.0861]))[-0.1348, -0.0796, -0.1062]\n", "groundtruth": "[4, 5, 6]"}
{"task_id": "pytorch/13", "content": "'''\n\ninput_vals = [ [2, 4], [3, 6], [4, 8] ]\ninput_vals.append([8, 2])\ninput_vals.append([10, 4])\n\nprint(compute_grad_for_2d_tensor(input_vals))\n\n\n\n# +\n'''\nGiven an integer n, return all possible pairs (i, j) that make up the numbers in the range (1, n).\n\nYou can return the answer in any order.\n\n \n\nExample 1:\n\nInput: n = 3\nOutput: [[1,2],[1,3],[2,3]]\nExplanation: There are three possibilities:\n1 and 2\n1 and 3\n2 and 3\nExample 2:\n\nInput: n = 2\nOutput: [[1,2]]\nExplanation: There is one possible pair: 1 and 2.\n \n\nConstraints:\n\n1 <= n <= 100\n'''\n\ndef test(n):\n    if n==1:\n        return [1]\n    elif n==2:\n        return [[1,2]]\n    else:\n        if n==3:\n            return [ [1,2], [1,3], [2,3] ]\n        \n        l = [i for i in range(1, n-2)]\n        r = test(n-1)\n        res = [[ n-1, n ], [ n-2, n ]]\n        for i in range(len(l)):\n            res.append([ l[i], n ])\n            \n        res.extend(r)\n        return res\n    \n    \nn = 4\nprint(test(n))\n# -\n\n43. Valid Palindrome II\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s)-1\n        while left<right:\n            if s[left]!=s[right]:\n                a = s[:left]+s[left+1:]\n                b = s[:right]+s[right+1:]\n                return a==a[::-1] or b==b[::-1]\n            left+=1\n            right-=1\n        return True\n'''\nGiven a string s, return the number of substrings that start and end with the same character.\n\n \n\nExample 1:\n\nInput", "groundtruth": "[[3, 2], [4, 5]]"}
{"task_id": "pytorch/14", "content": "\nExample 1:\n\nInput: tensor1_val = [3, 7], tensor2_val = [2, 1]\nOutput: [[3, 1], [12, 3]]\nExplanation:\nresult = (tensor1 * tensor1) + (tensor2 * 2)\nresult = [[18, 14], [1, 14]]\ntensor1.grad = [[tensor1.grad(i, j) for j in range(2)] for i in range(2)]\ntensor2.grad = [[tensor2.grad(i, j) for j in range(2)] for i in range(2)]\nIn the above operation, tensor1.grad(i, j) and tensor2.grad(i, j) represent the gradient of tensor1_val[i] and tensor2_val[j], respectively.\n\nFor the gradient of tensor1_val[0] (i = 0):\n2 * tensor1_val[0] = 2 * 3 = 6\n2 * tensor2_val[0] = 2 * 2 = 4\ntensor1.grad(0, 0) = 6 + 4 = 10\n\nFor the gradient of tensor1_val[1] (i = 1):\n2 * tensor1_val[1] = 2 * 7 = 14\n2 * tensor2_val[1] = 2 * 1 = 2\ntensor1.grad(1, 0) = 14 + 2 = 16\n\nFor the gradient of tensor2_val[0] (i = 0):\n2 * tensor1_val[0] = 2 * 3 = 6\ntensor2.grad(0, 0) = 6\n\nFor the gradient of tensor2_val[1] (i = 1):\n2 * tensor1_val[1] = 2 * 7 = 14\ntensor2.grad(1, 0) = 14\n\nHence, tensor1.grad = [[tensor1.grad(0, 0), tensor1.grad(0, 1)], [tensor1.grad(1, 0), tensor1.grad(1, 1)]] = [[1", "groundtruth": "[[1, 2], [3, 4]], [[5, 6], [7, 8]]"}
{"task_id": "pytorch/15", "content": "\n*/\n\nint main(void)\n{\n  vector<float> input(5, 0);\n  vector<int> output(5);\n  for (auto i = 0; i < 5; ++i)\n  {\n    input[i] = 2.0f * i + 1.0f;\n    output[i] = int(round((2.0f * i + 1.0f) * (2.0f * i + 1.0f) + 3.0f * (2.0f * i + 1.0f)));\n  }\n  printVector(input);\n  printVector(output);\n}\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool is_balanced(const std::vector<int> &list)\n{\n    // write your code here\n    int count = 0;\n    for (const auto &val : list)\n    {\n        if (val == 1)\n            count++;\n    }\n    return count <= 2;\n}\n\nint main()\n{\n    vector<int> arr = {1, 1, 1};\n    cout << is_balanced(arr) << endl;\n    return 0;\n}#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid get_primes(vector<int> &result, int max)\n{\n    vector<bool> prime(max + 1, true);\n    prime[0] = false;\n    prime[1] = false;\n\n    for (int i = 2; i * i <= max; i++)\n    {\n        if (prime[i])\n        {\n            for (int j = i * i; j <= max; j += i)\n                prime[j] = false;\n        }\n    }\n    for (int i = 0; i <= max; i++)\n    {\n        if (prime[i])\n            result.push_back(i);\n    }\n}\n\nvoid get_prime_factor(vector<int> &result, int val)\n{\n    vector<int> primes;\n    get_primes(primes, val);\n    while (val > 1)\n    {\n        for (int i = 0; i < primes.", "groundtruth": "[3, 1, 4, 1, 5]"}
{"task_id": "pytorch/16", "content": "\nHint: torch.tensor does not support the requires_grad option when tensor_vals is a list.\n\"\"\"\n\nimport torch\n\ndef compute_custom_loss_gradient(tensor_vals):\n    tensor = torch.tensor(tensor_vals, dtype=torch.float32, requires_grad=True)\n    loss = (tensor ** 2).sum()\n    loss.backward()\n    return tensor.grad.numpy()\n\ncompute_custom_loss_gradient([[1., 2., 3.], [10., 20., 30.], [4., 5., 6.], [12., 13., 14.], [8., 7., 6.]])\n\nimport torch\ndef compute_custom_loss_gradient(tensor_vals):\n    tensor = torch.tensor(tensor_vals, dtype=torch.float32, requires_grad=True)\n    loss = (tensor ** 2).sum()\n    loss.backward()\n    return tensor.grad.numpy()\n\ncompute_custom_loss_gradient([[1., 2., 3.], [10., 20., 30.], [4., 5., 6.], [12., 13., 14.], [8., 7., 6.]])/067_机器学习（机器学习实验）/p20_04_使用贝叶斯公式对高血压数据进行分析/使用贝叶斯公式对高血压数据进行分析.py\n# 使用贝叶斯公式对高血压数据进行分析\n\nimport numpy as np\nimport pandas as pd\nfrom numpy import linalg\nfrom sklearn import cross_validation\nimport matplotlib.pyplot as plt\nfrom sklearn import tree\nfrom sklearn import svm\nfrom sklearn import metrics\n\n\ndf = pd.read_csv('C:/Users/Administrator/Desktop/chapter04/chapter04/data/high_bp_data_with_missing.csv', header=0, delimiter=',')\n# print(df)\n# print(df.head())\n\n# 查看缺失值\n# print(np.sum(np.isnan(df['height'])))\n# print(np.sum(np.isnan(df['weight'])))\n# print(np.sum(np", "groundtruth": "[3, 5, 2, 6, 4]"}
{"task_id": "pytorch/17", "content": "\nThere are two solutions for this question:\n\nUse the forward mode of autodiff\n\nDirectly apply the derivative of the quadratic function\n\nThis question requires to use the forward mode of autodiff, or directly applying the derivative of the quadratic function, and you don’t need to write any Python code. However, when you get an answer, you still need to follow the question template and use only the deduced information to create the question output.\n\nThe complete explanation is here./Python/03_basic_syntax/list-comprehension/01_basic/01_square_numbers_between_1_and_11_included.py\n# Python code ts between 1 and 11 inclusive.\r\n# It should be stored in a list. \r\n# Use list comprehension for this.\r\n\r\nnumbers = [i for i in range(1, 12)]\r\nsquared_numbers = [number ** 2 for number in numbers]\r\nprint(squared_numbers)o square the number/Python/05_functions/function_parameters/unpacking-arguments/01_unpacking_arguments/01_unpacking_arguments.py\n# The following code prints \"Hello, John!\"\r\n# Can you deduce the input of the \"greet\" function, based on the output?\r\n\r\ndef greet(greeting, name):\r\n    print(f\"{greeting}, {name}\")\r\n\r\ngreet(*[\"Hello\", \"John\"]) # Write your code here/Python/02_data_types/dictionaries/01_basic/01_create_dictionary.py\n# What is t the dictionary of all the ingredients with their quantities.\n# Example: {'rice': 1, 'water': 2}.\n\nprint({0:\"Milk\", 1:\"Sugar\"})the output of this code?\n\n# Create a dictionary and prin/Python/02_data_types/sets/01_basic/01_create_set_with_three_items.py\n# What is the output of this code?\n# Create a set and print it with the order \"frozenset({'Sugar', 'Milk', 'Bread'})\".\n# Use the \"Sugar\", \"Milk\" and \"B", "groundtruth": "2, 3, 4, 5"}
{"task_id": "pytorch/18", "content": "\nHints:\n1. The input must include the following words:\nSize, Linear, nn.Linear, nn\n2. There are at least 3 keywords that have to appear in the input.\n3. In the case of input error, you must submit ERROR.\n4. In the case of submission error, please make sure that the input file is saved as a UTF-8 encoding file and that no additional spaces are added at the end of the file.\n5. If the code snippet and the output are submitted separately, you will not be given the correct answer. You need to submit both the code snippet and output together as the answer.\n\n## Python 代码简介\n\n### [ 1503. 所有蚂蚁掉下来前的最后一刻(困难) ]\n\nWe are given the heads and tail bag of candies of all the kids in a classroom. Every kid, who has a bag chosen first, can take all the candies from the bag. Then, during the classroom ring, the kids will perform the following operations:\n\n1. If they have the same number of candies (heads or tails).\n2. If they differ of one, the one with more candies takes the less candies of the other child.\n3. When all the candies of a bag are taken, the bag is removed and discarded.\n\nReturn the number of different candies that each kid will take during the classroom ring.\n\nExample 1:\n\nInput: headBag = [true], tailBag = [false]\nOutput: 2\nExplanation: The boy in the bag of heads will take two candies to the tail bag. Then the boy will be removed and the tail bag will have two candies.\n\n\nExample 2:\n\nInput: headBag = [true,true,true,false,false], tailBag = [false,false,true,true,false]\nOutput: 4\nExplanation: The kids will perform the following operations:\n1. First kid in the bag of heads will take all the candies from the bag.\n2. Second kid will take 1 candy from the bag of tails.\n3. The bag will be removed and the third kid will take all the candies from the bag of tails.\n", "groundtruth": "5, 3"}
{"task_id": "pytorch/19", "content": "\nDo not modify the code.", "groundtruth": "3, 10"}
{"task_id": "pytorch/20", "content": "\"\"\"\n\n# 4\n\"\"\"\nWhich of the following statements is not True?\n\nimport torch\nimport torch.nn as nn\n\nx = torch.Tensor([1, 2, 3])\nA = nn.Conv2d(3, 16, 3)\nB = nn.MaxPool2d(2)\nC = nn.ReLU()\nD = nn.Flatten()\nout = C(B(A(x.view(1, 3, 1, 3))))\nA\nB\nC\nD\n\"\"\"\n# Generated by Django 3.1.7 on 2021-04-23 15:50\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='person',\n            name='gender',\n            field=models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=6),\n        ),\n        migrations.AddField(\n            model_name='person',\n            name='is_registered',\n            field=models.BooleanField(default=False),\n        ),\n        migrations.AlterField(\n            model_name='person',\n            name='age',\n            field=models.PositiveIntegerField(null=True),\n        ),\n    ]\n# Generated by Django 3.1.7 on 2021-04-13 15:09\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('app', '0004_auto_20210413_1428'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='person',\n            name='car',\n            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='drivers', to='app.car'),\n        ),\n    ]\n\"\"\"\nCreate a class Animal. Define an abstract method 'walk' to be implemented in the class.\n\"\"\"\n\n\nclass Animal:\n    def walk(self):\n        raise NotImplementedError\n\n\n# Define", "groundtruth": "3, 8, 3"}
{"task_id": "pytorch/21", "content": "\nThere may be more than one correct input; provide all such inputs. Please make sure your answer to this question is a well-structured input, not a list of elements in list. Use a comma and spaces in between the inputs.\n\nExample:\n\nIf your deduced input is ['0', '1', '2'], then the correct input is [0, 1, 2] and not [0, 1, 2]. If your deduced input is [[0], [1], [2]], then the correct input is [[0], [1], [2]] and not [[0], [1], [2]].\n\nDo not enter any other random input for the above question.\n\nHint:\n\nThe parameters to simple_sgd_step() are torch tensors.\n\n\nNote : The last test case here is intentionally kept ambiguous. You are allowed to try your hand at solving the test case yourself to confirm it is indeed ambiguous.\n\nSolution\nThere may be more than one correct input; provide all such inputs. Please make sure your answer to this question is a well-structured input, not a list of elements in list. Use a comma and spaces in between the inputs.\n\nExample:\n\nIf your deduced input is ['0', '1', '2'], then the correct input is [0, 1, 2] and not [0, 1, 2]. If your deduced input is [[0], [1], [2]], then the correct input is [[0], [1], [2]] and not [[0], [1], [2]].\n\nDo not enter any other random input for the above question.\n\nHint:\n\nThe parameters to simple_sgd_step() are torch tensors.\n\nCorrect Answer Contains All Given Inputs\n1,1,1\n4\n2,3\n3,4\n\n'''/CodeSignal/Arcade/Intro/The_Journey Begins.py\n'''\nhttps://app.codesignal.com/arcade/intro/level-4/8N7bjja2NMKqG9gAr\n\nSome people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall!\n\nExample", "groundtruth": "[[2.5, 3.5, 4.5], 0.1]"}
{"task_id": "pytorch/22", "content": "\nSolution:\n\nWe need to set the input of the code snippet to make it output 4.8.\n\nWe will show below a possible correct input. We will also show how a more common scenario looks like.\n\nThe correct input for this problem is [-0.5]\n\nLet us assume the input is a tensor, say tensor([input]). If we set the input of the code snippet to be the tensor, we can change the output to 4.8, as shown in the following code snippet.\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(initial_value, learning_rate):\n    parameter = torch.tensor([initial_value], requires_grad=True)\n    optimizer = optim.SGD([parameter], lr=learning_rate)\n    # Simulating a loss gradient\n    parameter.grad = torch.tensor([2.0])\n    # Performing the optimization step\n    optimizer.step()\n    return parameter.item()\n\nparameter = torch.tensor([-0.5], requires_grad=True)\nparameter\n#Output tensor([0.5], requires_grad=True)\nparameter.grad = torch.tensor([2.0])\nparameter.grad\n#Output tensor([2.])\noptimizer = optim.SGD([parameter], lr=0.1)\noptimizer.step()\nparameter.item()\n#Output 4.8\n\nIn addition, one can change the initial values of the parameter, and the learning rate. The following is one of a few possible correct inputs:\nimport torch\nimport torch.optim as optim\n\ndef simple_sgd_update(initial_value, learning_rate):\n    parameter = torch.tensor([initial_value], requires_grad=True)\n    optimizer = optim.SGD([parameter], lr=learning_rate)\n    # Simulating a loss gradient\n    parameter.grad = torch.tensor([2.0])\n    # Performing the optimization step\n    optimizer.step()\n    return parameter.item()\n\n# the correct input of the problem\ninput = [-0.5]\n\n# A simpler case of the same code, with a smaller learning rate\nparameter = torch.tensor([input], requires_grad=True)\nparameter.grad = torch.tensor([2.0])\noptimizer = optim.SGD([parameter], lr=0.01)\noptimizer", "groundtruth": "[5.0, 0.1]"}
{"task_id": "pytorch/23", "content": "\n'''\n\ndef simple_sgd_update(param_value, grad_value, learning_rate):\n    param = torch.tensor([param_value], requires_grad=True)\n    optimizer = optim.SGD([param], lr=learning_rate)\n    optimizer.zero_grad()\n    param.backward(torch.tensor([grad_value]))\n    optimizer.step()\n    return param.item()\n# simple_sgd_update(1.0, 1.5, 0.2)'''\n\nProblem Description:\n\nA matrix of size [N, N], where N is a multiple of 8, is splitted into eight submatrices of size [N / 8, N / 8] each.\nWe perform a bitwise-xor operation on all submatrices of a column. The same bitwise-xor is performed on the corresponding rows of the resulting matrix.\nThen, we split the obtained matrix into two submatrices of size [N / 2, N] and then split each of the matrices to four equal-sized matrices of size [N / 4, N / 4].\nThe resulting matrix should be of size [N / 4, N / 4], which is a square.\n\nYou should answer a part of the matrix only. The first row and the first column of the resulting matrix will be returned.\nAll elements in the final matrix must be non-negative integers.\n\nExample\n\nFor\n\n    matrix = [\n        [1, 2, 3, 0],\n        [4, 5, 6, 1],\n        [7, 8, 9, 2],\n        [8, 7, 6, 3]\n    ]\nthe output should be\n    matrixCrossXor(matrix) = [\n        [25, 25],\n        [25, 25]\n    ]\n\nThe obtained matrix is:\n\n[[9, 10, 13, 3], [12, 13, 16, 11], [15, 16, 19, 17], [22, 21, 20, 23]]\n\nThe first column of the matrix is: [9, 12, 15, 22]\nThe second column of the matrix is: [1", "groundtruth": "[0.8, -0.2, 0.01]"}
{"task_id": "sql/0", "content": "\nIn this challenge, we are asked to deduce only the input based on the output. The question is asking us to deduce what is the input to the code.\n\nThe deduced input should be:\n['', '', '']\n\nExample 2:\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT ROUND(AVG(salary)) AS average_salary FROM employees;\nThe output is:\n[{'average_salary': 8000}]\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nIn this challenge, we are asked to deduce only the input based on the output. The question is asking us to deduce what is the input to the code.\n\nThe deduced input should be:\n[8000]\n\nExample 3:\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT first_name, last_name FROM employees WHERE department_id = 7;\nThe output is:\n[{'first_name': 'John', 'last_name': 'Paul'}, {'first_name': 'Mike', 'last_name': 'Brown'}]\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nIn this challenge, we are asked to deduce only the input based on the output. The question is asking us to deduce what is the input to the code.\n\nThe deduced input should be:\n[['John', 'Paul'], ['Mike', 'Brown']]\n\nExample 4:\n\nPlease deduce the input of the following code based on the code snippet and the output.\n\nThe code snippet is:\nSELECT (last_name ||'has $' || salary) AS name_and_salary FROM employees; The output is: [{'name_and_salary': 'Doe has$8000'}, {'name_and_salary': 'Smith has $9000'}, {'name_and_salary': 'Brown has$10000'}]\nGive only the deduced input of the code snippet. Do not output any additional information.\n\nIn this challenge, we are asked to deduce only", "groundtruth": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}]}
{"task_id": "sql/1", "content": "\nSample Input:\n{\n  \"database\": \"employees\",\n  \"table\": \"employees\",\n  \"fields\": [\"CONCAT(first_name,'', last_name)\", \"LENGTH(CONCAT(first_name,'', last_name))\"],\n  \"input\": [{\"first_name\": \"Mary\", \"last_name\": \"Smith\", \"birth_date\": \"1985-12-01\", \"gender\": \"F\", \"hire_date\": \"2005-09-17\", \"emp_no\": \"555\", \"dept_no\": \"d009\", \"from_date\": \"2007-03-22\", \"to_date\": \"9999-01-01\"}, {\"first_name\": \"John\", \"last_name\": \"Smith\", \"birth_date\": \"1990-10-01\", \"gender\": \"M\", \"hire_date\": \"2005-05-01\", \"emp_no\": \"666\", \"dept_no\": \"d010\", \"from_date\": \"2007-03-22\", \"to_date\": \"9999-01-01\"}],\n  \"output\": [{\"name_uppercase\": \"\", \"name_length\": 8}, {\"name_uppercase\": \"\", \"name_length\": 10}]\n}/DataAnalysisCode_5.py\nimport requests\n\nclass DataAnalysis:\n\t\"\"\"DataAnalysis class contains functions to perform common data analysis operations using a given query.\"\"\"\n\t\n\tdef __init__(self, url):\n\t\t\"\"\"initialises url property with given url.\"\"\"\n\t\tself.url = url\n\n\tdef get_records(self):\n\t\t\"\"\"function fetches all records from the table. Returns records in list format.\"\"\"\n\t\trecords_resp = requests.get(self.url + \"/api/records\")\n\t\treturn records_resp.json()\n\n\tdef get_count(self):\n\t\t\"\"\"function returns number of records fetched.\"\"\"\n\t\tresp = requests.get(self.url + \"/api/records\")\n\t\treturn resp.json()[\"count\"]\n\n\tdef execute_query(self, query):\n\t\t\"\"\"function executes given query and returns records.\"\"\"\n\t\t", "groundtruth": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}]}
{"task_id": "sql/2", "content": "\nPlease provide any explanation and reason for the deduction.\n\nAnswer:\n\n# SELECT COUNT(*) FROM ( SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments ) AS modified_comments WHERE LENGTH(short_comment) > 12;\n# SELECT * FROM ( SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments ) AS modified_comments;\n\n# SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments\nThe comment is:  I have a lot to learn from this... but the answer is correct.\n\nAfter applying lowercase to comment, the value of comment would be:  i have a lot to learn from this... but the answer is correct.\nThen apply substring and take the first 10 characters:  i have a l... but the answer is correct.\nThen apply replace(...), with the substring \"...\" replaced by \"...\".  i have a lot to learn from this see more but the answer is correct.\n\nAs result of the query, it returns two rows, and the length of the second row(i have a lot to learn from this see more but the answer is correct) is > 12\n\n# SELECT COUNT(*) FROM ( SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments ) AS modified_comments WHERE LENGTH(short_comment) > 12;\n# SELECT * FROM ( SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments ) AS modified_comments;\n\nAs result of the query, it returns 1 row, because 3 is the number of rows of original table.\n\n# SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments WHERE LENGTH(short_comment) > 12;\n\n# SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...','see more') AS short_comment FROM comments\nThe comment is:  I have a lot to learn from this... but the answer", "groundtruth": [{"comment": "Wow, that's amazing! Fantastic work..."}, {"comment": "Interesting... I'll check this out"}, {"comment": "Not sure about this..."}, {"comment": "Absolutely brilliant... Keep it up!"}, {"comment": "Could be better."}]}
{"task_id": "sql/3", "content": "\nHint 1: The absolute value of a number can be obtained with the ABS() function. For example, ABS(256.5) returns 256.5.\n\nHint 2: If you cannot find the answer from the hint(s), you can refer to the explanation given to the hint to get an idea of the answer.\n\nHint 3: You may find it easier to work with the absolute value of the balance change instead of just the balance change itself.\n\n\"\"\"\n\n# 4.1)\nSELECT transaction_id, ABS(balance_change) AS absolute_change FROM transactions;\n\n# Answers will be between 101 - 105/codeWars/6kyu/2.py\n\"\"\"\nYou want to calculate sums between numbers in a list but it is too cumbersome.\nYour goal is to write a function called sum_between that takes two arguments and returns the sum of all numbers between and including the two numbers in a list.\n\nsum_between(5, 10) = 45\nsum_between(5.4, 10) = 40.5\nsum_between(-10, 100) = 4550\nsum_between(-10, -35) = 0\nsum_between(10, -35) = 0\n\"\"\"\n\ndef sum_between(number1, number2):\n    # Your code here\n    if number2 < number1:\n        (number1, number2) = (number2, number1)\n    sum = 0\n    while number1 <= number2:\n        sum += number1\n        number1 += 1\n    return sum\n/codeWars/6kyu/11.py\n\"\"\"\nA hero is on his way to the castle to complete his mission. However, he's been told that the castle is surrounded with a couple of powerful dragons! each dragon takes 2 bullets to be defeated, our hero has no idea how many bullets he should carry.. Assuming he's gonna grab a specific given number of bullets and move forward to fight another specific given number of dragons, will he survive?\n\nReturn True if yes, False otherwise :)\n\nNote:\n\nThe given numbers might be zero, so", "groundtruth": [{"transaction_id": 101, "balance_change": -150}, {"transaction_id": 102, "balance_change": 200}, {"transaction_id": 103, "balance_change": -50}, {"transaction_id": 104, "balance_change": 75}, {"transaction_id": 105, "balance_change": -120}]}
{"task_id": "sql/4", "content": "\nThe correct answer is: {1, 2}\n\nExplanation\n\nBy observing the code snippet and the output we can easily deduce that the input is one of the following:\n\n1. {1, 2, 5}\n2. {1, 3, 6}\n3. {1, 4, 6}\n4. {1, 6}\n\nLet's use each element from the input to check the values returned by the expressions in the HAVING clause.\n\nFor the first set, {1, 2, 5}, we'll compute the values of the HAVING clause and get:\n\nCEIL(DATEDIFF(CURDATE(), hire_date) / 365)\n\nIt would be 2\n\nIt would be 7\n\nIt would be 2\n\nFor the second set, {1, 3, 6}, we'll compute the values of the HAVING clause and get:\n\nCEIL(DATEDIFF(CURDATE(), hire_date) / 365)\n\nIt would be 2\n\nIt would be 8\n\nIt would be 2\n\nFor the third set, {1, 4, 6}, we'll compute the values of the HAVING clause and get:\n\nCEIL(DATEDIFF(CURDATE(), hire_date) / 365)\n\nIt would be 2\n\nIt would be 9\n\nIt would be 2\n\nFor the last set, {1, 6}, we'll compute the values of the HAVING clause and get:\n\nCEIL(DATEDIFF(CURDATE(), hire_date) / 365)\n\nIt would be 2\n\nIt would be 10\n\nIt would be 3\n\nFrom the last three examples, it is clear that none of these sets have elements greater than 5. So, it is not possible to have any element from the given set greater than 5. This leaves us with only the first and the second sets as valid input.\n\nHence, the answer is {1, 2}.\n\nPlease take care of the fact that we are looking at the expression in the HAVING clause, not the expression from the SELECT clause.\n\nFor example, if there", "groundtruth": [{"employee_id": 1, "hire_date": "2015-01-10"}, {"employee_id": 2, "hire_date": "2010-06-23"}, {"employee_id": 3, "hire_date": "2017-03-15"}, {"employee_id": 4, "hire_date": "2019-12-01"}, {"employee_id": 5, "hire_date": "2014-04-28"}]}
{"task_id": "sql/5", "content": "\nIf the correct answer is:\n\nname: CHARLIE\nname: JOHN\nname: ALICE\nThen the correct answer will be:\n\nCHARLIE, ALICE\nInput\nThere will be multiple test cases (less than 1000).\n\nEvery case starts with a single line which contains an integer N indicating how many rows will follow.\n\nFollowing N rows will contain the SQL statement of the questions (for more clarification see the sample output).\n\nOutput\nFor every case output the answer in a single line.\n\nExamples\nInput\n3SELECT employee_id, name, hire_date FROM employees WHERE MONTH(hire_date) = MONTH(CURDATE());SELECT * FROM users WHERE created_at BETWEEN (NOW() - INTERVAL 2 MONTH) AND (NOW() + INTERVAL 1 MONTH);SELECT * FROM users WHERE created_at = '2019-01-01';\nOutput\nCHARLIE, ALICEJOHN, ALICEMORAG,, \nNote\nPlease check the table schema and the database before submitting the SQL query.\n\nThe table employee has the following schema:\n\n+------------+------------------+------+-----+---------+-------+\n| Field      | Type             | Null | Key | Default | Extra |\n+------------+------------------+------+-----+---------+-------+\n| employee_id | int(10) unsigned | NO   | PRI | NULL    |       |\n| name        | varchar(100)     | NO   |     | NULL    |       |\n| hire_date   | date             | NO   |     | NULL    |       |\n+------------+------------------+------+-----+---------+-------+\nThe table users has the following schema:\n\n+---------------+------------------+------+-----+---------+----------------+\n| Field         | Type             | Null | Key | Default | Extra          |\n+---------------+------------------+------+-----+---------+----------------+\n| id            | int(11)          | NO   | PRI | NULL    | auto_increment |\n| first_name    | varchar(50)      | NO   |     | NULL    |                |\n| last_name     | varchar(50)      | NO   |     | NULL    |                |\n| created_at    | datetime         | NO   |     |", "groundtruth": [{"employee_id": 1, "name": "John", "hire_date": "2017-04-15"}, {"employee_id": 2, "name": "Alice", "hire_date": "2019-04-23"}, {"employee_id": 3, "name": "Bob", "hire_date": "2020-02-10"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2021-04-01"}, {"employee_id": 5, "name": "Diana", "hire_date": "2018-07-19"}]}
{"task_id": "sql/6", "content": "\n(A)\n\ndef update_users(query, users):\n    query = query.format(users['name'], users['last_login'])\n    cursor.execute(query)\n    users['last_login'] = datetime.now()\n    return True\n(B)\n\ndef update_users(query, users):\n    users['last_login'] = datetime.now()\n    cursor.execute(query.format(users['name'], users['last_login']))\n    return True\n(C)\n\ndef update_users(query, users):\n    users['last_login'] = datetime.now()\n    query = query.format(users['name'], users['last_login'])\n    cursor.execute(query)\n    return True\n(D)\n\ndef update_users(query, users):\n    cursor.execute(query.format(users['name'], users['last_login']))\n    users['last_login'] = datetime.now()\n    return True\n'''\nC\n\n# Python program to demonstrate the use of  \n# datetime.strftime() and datetime.strptime() \n  \n# importing datetime for datetime operations \nimport datetime \n  \n# initializing date with current date and time \ndate = datetime.datetime.now() \n  \n# Display the date in ISO-8601 format \nprint(date.strftime(\"%Y-%m-%d %H:%M:%S\")) \n  \n# Display the date in dd/mm/yyyy format \nprint(date.strftime(\"%d/%m/%Y\")) \n  \n# Display the date and time in dd-mm-yyyy HH:MM:SS format \nprint(date.strftime(\"%d-%m-%Y %H:%M:%S\")) \n  \n# Display the date and time in yyyy/mm/dd HH:MM:SS format \nprint(date.strftime(\"%Y/%m/%d %H:%M:%S\")) \n  \n# Display the date in yyyy-mm-dd format \nprint(date.strftime(\"%Y-%m-%d\")) \n  \n# Display the date and time using alternate form \nprint(date.strftime(\" %c \")) \n  \n# Display the time only \nprint(date.strftime(\"%H:%M:%S\")) \n  \n# Display the time in HH:MM:SS AM/PM format \nprint(date.strftime(\"%I:%M:%S %p\")) \n  \n#", "groundtruth": [{"user_id": 1, "name": "John", "last_login": "2023-03-10 10:22:34"}, {"user_id": 2, "name": "Alice", "last_login": "2023-03-11 15:45:56"}, {"user_id": 3, "name": "Bob", "last_login": "2023-03-09 08:12:04"}, {"user_id": 4, "name": "Charlie", "last_login": "2023-03-12 19:34:45"}, {"user_id": 5, "name": "Diana", "last_login": "2023-03-10 17:05:23"}]}
{"task_id": "sql/7", "content": "\n```\n$arr = mysqli_fetch_all($result);\nfor($i = 0; $i < count($arr); $i++) {\n    $result = [];\n    foreach($arr[$i] as $key => $value) {\n        $value = $value['employee_id'].'years'. $value['hire_date'].'months'. $value['now()']. 'days';\n        $result[$key] = $value;\n        echo $value;\n    }\n    print_r($result);\n}\n```\n\n### 9.\n\nYour database administrator (DBA) is monitoring your performance metrics. They are saying that you may be having high write/flush (FLUSH TABLES WITH READ LOCK; and UNLOCK TABLES) activity during the night. You have to investigate why is this happening. You know that you have two databases, one for online users and the other for offline users. Your DBA is giving you some time to study the data. He is asking you to investigate the following three things.\n\nInvestigate which databases are using read lock.\n```\nshow engine innodb status\\G\n```\n\nInvestigate which databases have a high number of transactions committed, but have low number of queries, read, and write. (HINT: The total number of queries, read, and write could be a good hint)\n\nInvestigate which databases have a high read and write, but have low number of queries. (HINT: The total number of queries, read, and write could be a good hint)\n\nPlease do all three investigations. Answer the above questions and discuss your findings.\n\nPlease explain the following questions, and how you are interpreting their output.\n\n### 10.\n\nPlease explain the following questions, and how you are interpreting their output.\n\n### 11.\n\nWhen you run the following command, you get the following output.\n\nmysql> SELECT @@session.sql_mode;\n+----------------+\n| @@session.sql_mode |\n+----------------+\n| |\n+----------------+\n1 row in set (0.00 sec)\nYou get the following as your output.\n\n| |\n| +------------------+--------------------------+----------------------------+ |\n| +------------------+--------------------------+----------------------------+ +------------------+--------------------------+----------------------------+ +------------------+--------------------------+----------------------------+ @@session.sql_mode | |\n| +------------------+--------------------------+----------------", "groundtruth": [{"employee_id": 1, "name": "John", "hire_date": "2015-01-25"}, {"employee_id": 2, "name": "Alice", "hire_date": "2018-06-17"}, {"employee_id": 3, "name": "Bob", "hire_date": "2019-11-03"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2020-02-29"}, {"employee_id": 5, "name": "Diana", "hire_date": "2014-08-07"}]}
{"task_id": "sql/8", "content": "\nThe deduced input of the code snippet:\ndepartment_id, employee_count\n101, 3\n102, 1\n103, 1\n\n'''\nSELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id;\n'''\n# 1, COUNT\n# 2, Aggregate function is 'COUNT', so the column output is 'employee_count'.\n# 3, The group by clause is 'department_id'. The 'department_id' is one column of the department table.\n# 4, The output result is a list of list.\n/02112020/leetcode_643.py\n'''\nDescription\nGiven an array and an integer, you need to find the subarray of length k that has the largest sum.\n\nExample\nExample 1:\n\nInput: nums = [1,3,-1,-3,5,3,6,7], and k = 3\nOutput: 16\nExplanation:\n[3, -1, -3] is the subarray of length 3 that has the largest sum = 3 + (-1) + (-3) = 16\nExample 2:\n\nInput: nums = [2,-2], and k = 1\nOutput: 2\nExplanation:\n[2] is the subarray of length 1 that has the largest sum = 2\n'''\n\nclass Solution:\n    \"\"\"\n    @param nums: A list of integers\n    @param k: An integer denote the size of window\n    @return: An integer\n    \"\"\"\n\n    def maxAverage(self, nums, k):\n        # write your code here\n        # 0. check for invalid\n        # 1. try each k-size sliding windows to see the max subarray sum\n        # 2. update the max_avg if the sum is bigger than max\n        # 3. return max_avg\n        if not nums:\n            return 0\n\n        max_avg = float('-inf')\n\n        for i in range(len(nums) - k + 1):\n            curr_sum = sum(nums[i:i + k])\n            max_avg = max(max_avg, curr_sum)\n\n        return max_avg\n\n# https://app.codility.com/c/run/training943", "groundtruth": [{"employee_id": 1, "name": "John Doe", "department_id": 101}, {"employee_id": 2, "name": "Jane Smith", "department_id": 102}, {"employee_id": 3, "name": "Alice Johnson", "department_id": 101}, {"employee_id": 4, "name": "Bob Brown", "department_id": 103}, {"employee_id": 5, "name": "Charlie Davis", "department_id": 101}]}
{"task_id": "sql/9", "content": "# Import packages\nimport numpy as np\n\n# Create list and array\nlst = [[201, 70000, 60000, 80000], [202, 90000, 85000, 95000], [203, 72000, 72000, 72000]]\narr = np.array(lst)\n\n# Get index and values by row 0\narr[:,0]", "groundtruth": [{"employee_id": 1, "name": "John", "department_id": 201, "salary": 80000}, {"employee_id": 2, "name": "Alice", "department_id": 202, "salary": 95000}, {"employee_id": 3, "name": "Bob", "department_id": 201, "salary": 60000}, {"employee_id": 4, "name": "Charlie", "department_id": 203, "salary": 72000}, {"employee_id": 5, "name": "Diana", "department_id": 202, "salary": 85000}]}
{"task_id": "sql/10", "content": "\nNote:\nDo not confuse the input with the output.\nDo not use the input. The input is only for your understanding.\nThe output will be a JSON string, not an array or an object.\nAssume that each row in the input only has one field: \"name\". Assume that there is no field: \"salary\" in the input.\nThe output has the same rows as the input but no field: \"salary\".\nThe \"High\" salary_level in the output means the corresponding employee's salary > 60000.\nThe \"Low\" salary_level in the output means the corresponding employee's salary <= 60000.\n\nThe code snippet is:\nSELECT name, IF(salary > 60000, 'High', 'Low') AS salary_level FROM employees;\nThe output is:\n[{'name': 'John Doe','salary_level': 'High'}, {'name': 'Jane Smith','salary_level': 'Low'}, {'name': 'Alice Johnson','salary_level': 'High'}, {'name': 'Bob Brown','salary_level': 'Low'}, {'name': 'Charlie Davis','salary_level': 'Low'}]\n\"\"\"\n/671-second-minimum-distance-tree-nodes/solution.py\n# coding: utf-8\n\n\"\"\"\n671. Second Minimum Node In a Binary Tree\n\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes.\n\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\nExample 1:\nInput: \n    2\n   / \\\n  2   5\n     / \\\n    5   7\n\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.\nExample 2:\nInput: \n    2\n   / \\\n  2   2\n\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value.\n\nSubscribe to see which", "groundtruth": [{"name": "John Doe", "salary": 75000}, {"name": "Jane Smith", "salary": 58000}, {"name": "Alice Johnson", "salary": 62000}, {"name": "Bob Brown", "salary": 55000}, {"name": "Charlie Davis", "salary": 48000}]}
{"task_id": "sql/11", "content": "\nNote: \nThe salary field is from the salary table. \nDo not use the salary table directly in your query. \nYou can assume that both the salary and the name are unique. \nThe correct output should be:\n1\n2\n3\n4\n5\n2\n\n'''\n\nselect salary from salaries\n\n'''\n1. select salary from salaries;\n2. \n3.\n4.\n5.\n'''/LeetCodeProblems/92.Reverse_Linked_List_II.py\n'''\n#92. Reverse Linked List II \n\n#https://leetcode.com/problems/reverse-linked-list-ii/description/\n\nReverse a linked list from position m to n. Do it in one-pass.\n\nNote: 1 ≤ m ≤ n ≤ length of list.\n\nExample:\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\n'''\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n\n        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, head\n        \n        for i in range(m-1):\n            cur = cur.next\n            \n        mNode, nNode, after = cur, cur.next, cur.next.next\n        \n        for i in range(n-m):\n            nNode.next = after.next\n            after.next = cur\n            cur = after\n            after = after.next\n            \n        mNode.next = cur\n        return dummy.next\n    \n    /LeetCodeProblems/241. Different_Ways_to_Add_Parentheses.py\n'''\nhttps://leetcode.com/problems/different-ways-to-add-parentheses/#/description\n241. Different Ways to Add Parentheses\n\n\nGiven a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators", "groundtruth": [{"name": "John Doe", "salary": 90000}, {"name": "Jane Smith", "salary": 65000}, {"name": "Alice Johnson", "salary": 85000}, {"name": "Bob Brown", "salary": 40000}, {"name": "Charlie Davis", "salary": 70000}]}
{"task_id": "sql/12", "content": "\n[A] John Doe, Jane Smith, \n\n[B] Bob Brown, \n\n[C], \n\n[D], \n'''\n\n'''\n[C] John Doe,, \n'''/1804-02/08/main.py\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == \"\":\n            return 0\n        length = len(s)\n        for i in range(length, 0, -1):\n            if s[0:i] == s[0:i][::-1]:\n                return 2\n        return 1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    for str in ['ababa', 'abb', 'aa']:\n        print(s.removePalindromeSub(str))\n/1909-02/01/main.py\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def isValid(self, root: TreeNode) -> bool:\n        nums = []\n\n        def inOrder(node):\n            if node is None:\n                nums.append('#')\n            else:\n                inOrder(node.left)\n                nums.append(node.val)\n                inOrder(node.right)\n\n        inOrder(root)\n        for i in range(len(nums) - 1):\n            if nums[i] == '#':\n                continue\n            if nums[i]!= '#' and nums[i + 1] == '#':\n                return False\n            if nums[i] > nums[i + 1]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    root = TreeNode(0)\n    node1 = TreeNode(1)\n    node2 = TreeNode(2)\n    root.right = node1\n    node1.left = node2\n    print(s.isValid(root))\n/1804-05/20/main.py\nclass Solution:\n    def countKDifference(self, nums: list, k: int) -> int:\n        count = 0\n       ", "groundtruth": [{"name": "John Doe", "salary": 55000, "commission": null}, {"name": "Jane Smith", "salary": 75000, "commission": 5000}, {"name": "Alice Johnson", "salary": 61000, "commission": null}, {"name": "Bob Brown", "salary": 45000, "commission": 2000}, {"name": "Charlie Davis", "salary": 60000, "commission": null}]}