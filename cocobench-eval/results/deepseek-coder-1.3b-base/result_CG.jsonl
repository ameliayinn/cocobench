{"task_id": "java/0", "content": "\nfunction findChampion(n, edges) {\n  const degree = Array(n).fill(0);\n  for (const [u, v] of edges) {\n    degree[u]++;\n    degree[v]--;\n  }\n  let champion = -1;\n  for (let i = 0; i < n; i++) {\n    if (degree[i] === 0) {\n      if (champion === -1) {\n        champion = i;\n      } else {\n        return -1;\n      }\n    }\n  }\n  return champion;\n}\n", "groundtruth": "class Solution {    public int findChampion(int n, int[][] edges) {        int[] degree = new int[n];        for (int[] e : edges) {            degree[e[1]]++;        }        int champion = -1;        for (int i = 0; i < n; i++) {            if (degree[i] == 0) {                if (champion == -1) {                    champion = i;                } else {                    return -1;                }            }        }        return champion;    }}"}
{"task_id": "java/1", "content": "Output:\n\nExpected Output:\n\n10\nYour Output:\n\n-1\nNote:\n\nn == edges.length + 1\n1 <= n <= 105\nedges[i].length == 2\n0 <= ai, bi < n\n1 <= values[i] <= 105\nThe given tree is a tree. The number of nodes in the tree is n and the total number of edges in the tree is n - 1.\nSubmit the code and see the output in the console.\n\n */", "groundtruth": "class Solution {    public long maximumScoreAfterOperations(int[][] edges, int[] values) {        List<Integer>[] g = new ArrayList[values.length];        Arrays.setAll(g, e -> new ArrayList<>());        g[0].add(-1);         for (int[] e : edges) {            int x = e[0], y = e[1];            g[x].add(y);            g[y].add(x);        }        long ans = 0;        for (int v : values) {            ans += v;        }        return ans - dfs(0, -1, g, values);    }    private long dfs(int x, int fa, List<Integer>[] g, int[] values) {        if (g[x].size() == 1) {             return values[x];        }        long loss = 0;         for (int y : g[x]) {            if (y != fa) {                loss += dfs(y, x, g, values);             }        }        return Math.min(values[x], loss);     }}"}
{"task_id": "java/2", "content": "\"\"\"\ndef triangleType(nums):\n    \"\"\"\n    :param nums:\n    :return:\n    \"\"\"\n    nums.sort()\n    if nums[0] + nums[1] <= nums[2]:\n        return \"none\"\n    if nums[0] == nums[2]:\n        return \"equilateral\"\n    if nums[0] == nums[1]:\n        return \"isosceles\"\n    return \"scalene\"\n\n\nif __name__ == '__main__':\n    print(triangleType([2, 2, 2]))", "groundtruth": "class Solution {    public String triangleType(int[] nums) {        Arrays.sort(nums);        int x = nums[0];        int y = nums[1];        int z = nums[2];        if (x + y <= z) { // 排序后，只需比较 x+y 和 z            return 'none';        }        if (x == z) { // 排序了，说明 y 也和 x z 相等            return 'equilateral';        }        if (x == y || y == z) {            return 'isosceles';        }        return 'scalene';    }}"}
{"task_id": "java/3", "content": "Your code will be tested against the expected answer and other input.\nA function is compliant with the test specification if its correct answer and other correct answers will be accepted.\nExpect: 6\nCode: return pairs;\nYou will receive a correct answer as soon as your code is accepted.\n\n\nSAMPLE INPUT:\n5\n[1,3]\n[3,3]\n[-2,2]\n\n\nSAMPLE OUTPUT:\n1\n\n\n\n\n\nEXPLANATION:\nGiven the above points, there are 4 good rectangles: [{1,3},{3,3},{-2,2},{3,-1}] There is one bad rectangle: {2,3}. We count one pair of rectangles. Thus, the answer is 1.\nNote:\n\nAll points are integers that are located on an X-Y plane.\nNo two rectangles have the same area.\nThe rectangle can be completely inside another rectangle.\n\n\n\n\n\n */\n\n\n\n\n\npublic class Main {\n    \n    public static int numberOfPairs(int[][] points) {\n        int pairs = 0;\n        Arrays.sort(points, (a, b) -> {\n            if (a[0] != b[0]) {\n                return a[0] - b[0];\n            } else {\n                return b[1] - a[1];\n            }\n        });\n        int ____ ;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ____ {\n                    pairs++;\n                }\n            }\n        }\n        return pairs;\n    }\n    \n    public static boolean isGood(int[][] points, int index1, int index2) {\n        int n = points.length;\n        for (int i = 0; i < n; i++) {\n            if (i == index1 || i == index2) {\n                continue;\n            }\n            if (points[i][0] >= points[index1][0] && points[i][0] <= points[index2][0] && points[i][1] >= points[index2][1", "groundtruth": "class Solution {    public int numberOfPairs(int[][] points) {        int pairs = 0;        Arrays.sort(points, (a, b) -> {            if (a[0] != b[0]) {                return a[0] - b[0];            } else {                return b[1] - a[1];            }        });        int n = points.length;        for (int i = 0; i < n; i++) {            for (int j = i + 1; j < n; j++) {                if (points[i][1] >= points[j][1] && isGood(points, i, j)) {                    pairs++;                }            }        }        return pairs;    }    public boolean isGood(int[][] points, int index1, int index2) {        int n = points.length;        for (int i = 0; i < n; i++) {            if (i == index1 || i == index2) {                continue;            }            if (points[i][0] >= points[index1][0] && points[i][0] <= points[index2][0] && points[i][1] >= points[index2][1] && points[i][1] <= points[index1][1]) {                return false;            }        }        return true;    }}"}
{"task_id": "java/4", "content": "\n \n\nExample 1:\n\nInput: nums = [1,5,4,2,9,9,9], k = 3\nOutput: 15\nExplanation: The good subarrays of nums with a difference of 3 between the first and last element are:\n- [1,5,4,2,9,9,9]      // the subarray satisfies the given condition.\n- [1,5,4,2,9,9]       // the subarray [5,4,2,9,9] has a difference of 3 with the first element.\n- [1,5,4,2,9]         // the subarray [4,2,9,9] has a difference of 3 with the first element.\n- [1,5,4,2,9,9]       // the subarray [4,2,9,9] has a difference of 3 with the second element.\n- [1,5,4,2,9,9]       // the subarray [4,2,9] has a difference of 3 with the second element.\n- [1,5,4,2,9]         // the subarray [2,9,9] has a difference of 3 with the second element.\n- [1,5,4,2,9,9]       // the subarray [2,9] has a difference of 3 with the third element.\nThere is no subarray with a difference of 3 between the first and last element, so ans = 0.\nExample 2:\n\nInput: nums = [4,4,4], k = 3\nOutput: 0\nExplanation: The good subarrays of nums with a difference of 3 between the first and last element are:\n- [4,4,4]      // the subarray [4,4,4] satisfies the given condition.\nThere are no good subarrays of nums with a difference of 3 between the first and last element, so ans = 0.\n \n\nConstraints:\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= 109\n1 <= k <= n\nThe testcases will be generated such that the sum of n", "groundtruth": "class Solution {    public long maximumSubarraySum(int[] nums, int k) {        long ans = Long.MIN_VALUE;        long sum = 0;        Map<Integer, Long> minS = new HashMap<>();        for (int x : nums) {            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);            ans = Math.max(ans, sum + x - Math.min(s1, s2));            minS.merge(x, sum, Math::min);            sum += x;        }        return ans > Long.MIN_VALUE / 4 ? ans : 0;    }}"}
{"task_id": "java/5", "content": "提示\n- 题目要求子串包含 0，1 两种字符，即包含 a[i] - a[i - 1] = 0 && a[j] - a[j - 1] = 1, i != j.\n- 题目保证输入字符串的长度在 [0, 104]。\n- 字符串 s 中的所有字符都在 {'0', '1'} 之中。\n\"\"\"\n\n# 参考: 1. https://www.geeksforgeeks.org/number-substrings-which-have-more-zeros-than-ones/\n#      2. https://www.geeksforgeeks.org/number-substrings-which-have-more-ones-than-zeros/\n\n# https://leetcode.cn/problems/binary-substrings/solution/shu-by-coding-leads-x9qg/\n\nclass Solution:\n    def __init__(self):\n        self.max1 = 0\n        self.ans = 0\n\n    # i : left\n    def find_sub_str_with_great_num_of_1s(self, i, s):\n        '''\n        查找字符串 s 的子串，包含字符串 s 中最多 1 个 '1' 的子串。\n        '''\n\n        l = 0\n        r = len(s) - 1\n        cur = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                cur += 1\n            if cur == 2:\n                break\n        self.ans += r - l + 1\n        return\n\n    # i : right\n    def find_sub_str_with_great_num_of_0s(self, i, s):\n        '''\n        查找字符串 s 的子串，包含字符串 s 中最多 0 的子串。\n        '''\n\n        l = 0\n        r = len(s) - 1\n        cur = 0\n        for j in range(i, len(s)):\n            if s[j] == '0':\n                cur += ", "groundtruth": "class Solution {    public int numberOfSubstrings(String S) {        char[] s = S.toCharArray();        int n = s.length;        int m = 0;        int[] a = new int[n + 1];        for (int i = 0; i < n; i++) {            if (s[i] == '0') {                a[m++] = i;            }        }        int tot1 = n - m;        a[m] = n; // 哨兵        int ans = 0;        int i = 0; // >= left 的第一个 0 的下标是 a[i]        for (int left = 0; left < n; left++) {            if (s[left] == '1') {                ans += a[i] - left; // 不含 0 的子串个数            }            for (int k = i; k < m; k++) {                int cnt0 = k - i + 1;                if (cnt0 * cnt0 > tot1) {                    break;                }                int cnt1 = a[k] - left - (k - i);                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);            }            if (s[left] == '0') {                i++; // 这个 0 后面不会再枚举到了            }        }        return ans;    }}"}
{"task_id": "java/6", "content": "\nExplanation:\nIn the above illustration, the yellow circles represent the circles of the rectangle (as shown in the problem description). The path is shown in the green arrows; when it ends at the top right corner of the rectangle, the path can not cross one of the yellow circles and the path ends in a corner.\n\n\n\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<vector>\n#include<iostream>\n#include<unordered_map>\n#include<unordered_set>\n#include<math.h>\nusing namespace std;\ntypedef long long ll;\n#define mp make_pair\n#define fir first\n#define sec second\n#define pb push_back\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define mk(a,b) make_pair(a,b)\n#define pq priority_queue\n#define all(v) v.begin(),v.end()\n\n\nstruct Point\n{\n    int x;\n    int y;\n};\nvector<Point> pos;\n\nstruct Circle\n{\n    int x;\n    int y;\n    int r;\n};\n\n\nvector<Circle> circles;\n\nvoid check(int X, int Y)\n{\n\n    // 判断边界条件是否满足 \n    if (X >= pos[0].x && Y >= pos[0].y)\n        cout << \"false\\n\";\n    else if (X >= pos[1].x && Y >= pos[1].y)\n        cout << \"true\\n\";\n    else if (X >= pos[2].x && Y <= pos[2].y)\n        cout << \"true\\n\";\n    else if (X >= pos[3].x && Y <= pos[3].y)\n        cout << \"true\\n\";\n    else\n    {\n        //cout << \"false\\n\";\n        unordered_map<string, bool> vis;\n        //cout << \"dfs:\\n\";\n        for (auto &i : circles)\n        {\n            if (vis[to_string(i.x)+\"-\"+to_string", "groundtruth": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        boolean[] vis = new boolean[circles.length];\n        for (int i = 0; i < circles.length; i++) {\n            long x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (inCircle(x, y, r, 0, 0) || // 圆 i 包含矩形左下角\n                inCircle(x, y, r, X, Y) || // 圆 i 包含矩形右上角\n                // 圆 i 是否与矩形上边界/左边界相交相切\n                !vis[i] && (x <= X && Math.abs(y - Y) <= r ||\n                            y <= Y && x <= r ||\n                            y > Y && inCircle(x, y, r, 0, Y)) && dfs(i, X, Y, circles, vis)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n    private boolean inCircle(long ox, long oy, long r, long x, long y) {\n        return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r;\n    }\n\n    private boolean dfs(int i, int X, int Y, int[][] circles, boolean[] vis) {\n        long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n        // 圆 i 是否与矩形右边界/下边界相交相切\n        if (y1 <= Y && Math.abs(x1 - X) <= r1 ||\n            x1 <= X && y1 <= r1 ||\n            x1 > X && inCircle(x1, y1, r1, X, 0)) {\n            return true;\n        }\n        vis[i] = true;\n        for (int j = 0; j < circles.length; j++) {\n            long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n            // 在两圆相交相切的前提下，点 A 是否严格在矩形内\n            if (!vis[j] &&\n                (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) &&\n                x1 * r2 + x2 * r1 < (r1 + r2) * X &&\n                y1 * r2 + y2 * r1 < (r1 + r2) * Y &&\n                dfs(j, X, Y, circles, vis)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/7", "content": "Input:\nFirst line contains 2 space-separated integers, n and m, the number of flowers in the clockwise and anti-clockwise directions.\nOutput:\nA single line containing a long integer, the number of possible pairs (x, y)\nConstraints:\n1 ≤ n, m ≤ 10^5\nExamples:\nInput:\nn = 2\nm = 1\nOutput:\n1\nExplanation:\nIn the given example, there is only 1 pair of flowers.\nInput:\nn = 2\nm = 2\nOutput:\n2\nExplanation:\nIn the given example, there are 2 possible pairs of flowers.\nSample Input\n1\n3\nSample Output\n3\nExplanation\nIn the given example, 2 flowers are in the anti-clockwise direction. The maximum number of pairs is 1, the other 2 flowers are in the clockwise direction.\nInput:\nn = 3\nm = 3\nOutput:\n6\nSample Input\n2\n2\nSample Output\n4\nExplanation\nIn the given example, Alice and Bob cannot win the game.", "groundtruth": "class Solution {\n    public long flowerGame(int n, int m) {\n        long a = ((long)n/2) * ((long)m-((long)m/2));\n        long b = ((long)m/2) * ((long)n-((long)n/2));\n        return a + b;\n    }\n}\n"}
{"task_id": "java/8", "content": "\n提示：\n    nums.length == n\n    1 <= n <= 10^5\n    0 <= nums[i] <= 10^9\n    0 <= k <= n-1\n'''\nclass Solution:\n    def __init__(self):\n        self.b = 29\n        self.n = 0\n        self.mp = {}\n\n    def dfs(self, val, op, k):\n        if op == self.b:\n            if val not in self.mp:\n                self.mp[val] = 0\n            self.mp[val] += 1\n            return abs(val)\n        self.dfs(val|(1 << op), op + 1, k)\n        self.dfs(val^(1 << op), op + 1, k - 1)\n\n    def minOrAfterOperations(self, nums, k):\n        self.n = len(nums)\n        # self.dfs(0, 0, k)\n        for x in nums:\n            self.dfs(x, 0, k)\n        ans = 0\n        # print(self.mp)\n        for k, v in self.mp.items():\n            ans = max(ans, (v + 1) & k)\n        return ans\n\n\n\nprint(Solution().minOrAfterOperations([1, 5, 6, 7], 3))", "groundtruth": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; // 操作次数\n            int and = -1; // -1 的二进制全为 1\n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; // 合并 x，操作次数加一\n                } else {\n                    and = -1; // 准备合并下一段\n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; // 答案的这个比特位必须是 1\n                mask ^= 1 << b; // 后面不考虑这个比特位\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/9", "content": "Return the array result.\nInput: n = 6, x = 1, y = 6\nOutput: [0,1,2,3,3,5]\nExplanation:\nThere are 6 houses and 6 streets. The street between houses 1 and 2 has a length of 1, the street between houses 2 and 3 has a length of 1, the street between houses 3 and 4 has a length of 1, the street between houses 4 and 5 has a length of 1, the street between houses 5 and 6 has a length of 1. The length of the shortest path is 1. The length of the shortest path that has exactly three shortest path spans with the street between houses 2 and 5 is 2. The length of the shortest path that has exactly four shortest path spans with the street between houses 2 and 5 is 3. The length of the shortest path that has exactly five shortest path spans with the street between houses 2 and 5 is 3.\n```\n\n### 每日一题(127)\n##### [01 矩阵](https://www.nowcoder.com/practice/9023a09483e44262b2678d3b89b38f8bb?tpId=98&&tqId=32523&rp=1&ru=/activity/oj&qru=/ta/format-top101/question-ranking)\n\n```\nThe code is as follows:\npublic int getLength(int[] nums1, int[] nums2) {\n        int[][] dp = new int[nums1.length + 1][nums2.length + 1];\n        // 定义dp[i][j]，表示以nums1和nums2中前i和j个数为结尾，且能组成的最长的子序列个数。\n        int max = 0;\n        for (int i = 1; i <= nums1.length; i++)\n            for (int j = 1; j <= nums2.length; j++) {\n                if (nums1[i - 1] == nums", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n        return result;\n    }\n}\n"}
{"task_id": "java/10", "content": "", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        \n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n\n        return result;\n    }\n}\n"}
{"task_id": "java/11", "content": " */\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n\nclass Solution {\npublic:\n    bool canSortArray(vector<int>& nums) {\n        int cnt = 0;\n        vector<int> maxInThisGroup;\n        for(auto i : nums)\n            cnt += ___;\n        \n        int mx = INT_MIN;\n        for(auto i : nums)\n            mx = max(i, mx);\n        \n        if(cnt == (nums.size() * 31) - 32) return true;\n        \n        if(__) return false;\n    }\n};\n\nint main(){\n    return 0;\n}", "groundtruth": "class Solution {\n    public boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "java/12", "content": "Note that the test cases are generated such that the minimum array length must be 1 or greater.\nFor example, if nums = [1,3,2,4,2,5] and nums[2]=3, then m = 2.\nThen, after one operation, nums becomes [1,2,4,2,5], and cnt becomes 2.\nTherefore, the output is _____.\nExplanation\nEach integer in nums can be evenly divided by 2, 3, 4, 5, and 6, for example. Therefore, the minimum number we're looking for must be less than or equal to 6, which is 2.\nSo the minimum array length is 1.\n*/\n\npackage main;\n\npublic class _2124_Minimum_Number_of_Operations_to_Reinitialize_a_Permutation {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        int[] nums1 = {1,3,2,4,2,5};\n        System.out.println(sol.minimumArrayLength(nums1)); // 1\n\n        int[] nums2 = {1,1,1};\n        System.out.println(sol.minimumArrayLength(nums2)); // 3\n\n        int[] nums3 = {1,3,2,4,1,5};\n        System.out.println(sol.minimumArrayLength(nums3)); // 3\n\n        int[] nums4 = {4,1,5,2,6,3};\n        System.out.println(sol.minimumArrayLength(nums4)); // 1\n    }\n\n    static class Solution {\n        public int minimumArrayLength(int[] nums) {\n            int m = Integer.MAX_VALUE;\n            for (int x : nums) {\n                m = Math.min(m, x);\n            }\n\n            for (int x : nums) {\n                if (x % m > 0) {\n                    return 1;\n                }\n            }\n\n            int cnt = 0;\n            for (int x : nums) {\n                if (x ==", "groundtruth": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }\n}\n"}
{"task_id": "java/13", "content": "'''\n\n# Code\n\n\nclass Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n        k -= 1\n        ans, l = 0, nums[0]\n        for i in range(1, dist + 2):\n            l += nums[i]\n        heapq.heapify(nums)\n        while len(nums) > k:\n            l += heapq.heappop(nums)\n            l -= nums[0]\n            heapq.heappop(nums)\n            heapq.heappush(nums, l)\n            l -= nums[0]\n            heapq.heappush(nums, l)\n            ans += nums[0]\n        for i in range(dist + 2, len(nums)):\n            ans += nums[i]\n        return ans", "groundtruth": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        k--;\n        sumL = nums[0];\n        for (int i = 1; i < dist + 2; i++) {\n            sumL += nums[i];\n            L.merge(nums[i], 1, Integer::sum);\n        }\n        sizeL = dist + 1;\n        while (sizeL > k) {\n            l2r();\n        }\n\n        long ans = sumL;\n        for (int i = dist + 2; i < nums.length; i++) {\n            // 移除 out\n            int out = nums[i - dist - 1];\n            if (L.containsKey(out)) {\n                sumL -= out;\n                sizeL--;\n                removeOne(L, out);\n            } else {\n                removeOne(R, out);\n            }\n\n            // 添加 in\n            int in = nums[i];\n            if (in < L.lastKey()) {\n                sumL += in;\n                sizeL++;\n                L.merge(in, 1, Integer::sum);\n            } else {\n                R.merge(in, 1, Integer::sum);\n            }\n\n            // 维护大小\n            if (sizeL == k - 1) {\n                r2l();\n            } else if (sizeL == k + 1) {\n                l2r();\n            }\n\n            ans = Math.min(ans, sumL);\n        }\n        return ans;\n    }\n\n    private long sumL;\n    private int sizeL;\n    private final TreeMap<Integer, Integer> L = new TreeMap<>();\n    private final TreeMap<Integer, Integer> R = new TreeMap<>();\n\n    private void l2r() {\n        int x = L.lastKey();\n        removeOne(L, x);\n        sumL -= x;\n        sizeL--;\n        R.merge(x, 1, Integer::sum);\n    }\n\n    private void r2l() {\n        int x = R.firstKey();\n        removeOne(R, x);\n        sumL += x;\n        sizeL++;\n        L.merge(x, 1, Integer::sum);\n    }\n\n    private void removeOne(Map<Integer, Integer> m, int x) {\n        int cnt = m.get(x);\n        if (cnt > 1) {\n            m.put(x, cnt - 1);\n        } else {\n            m.remove(x);\n        }\n    }\n}\n"}
{"task_id": "java/14", "content": "Your task is to complete the complete code, which uses an API and returns the results in an answer object.\nNote: Please fill in the gaps of the code with the corresponding API calls and returns. You do not need to fully implement the API calls, just return the results.\n\nSample Input 1\ns = abcdxyyabcdaabcabcdabcabcabcdaabc\na = abc\nb = ab\nk = 3\nSample Output 1\n3, 10\nExplanation\nIndices 3, 6, and 9 are beautiful. They are 3 <= (3+6) <= k = 3.\nIndices 10, 12, and 13 are beautiful. They are (10-6) <= k = 3.\nIndices 1, 12, 13, and 15 are beautiful. They are (12-10) <= k = 3.\n'''\n\n# Solution 1\nclass Solution:\n    def __init__(self):\n        self.text = None\n\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n        self.text = s\n\n        def getAns(text, pattern):\n            m = len(pattern)\n            pi = [-1] * m\n            j = 0\n            for i in range(1, m):\n                while j > 0 and pattern[i] != text[j]:\n                    j = pi[j - 1]\n                if pattern[i] == text[j]:\n                    j += 1\n                pi[i] = j\n            return pi\n\n        aP = getAns(text, a)\n        bP = getAns(text, b)\n        bpLeft = [bP[0]] * len(text)\n        for i in range(1, len(bP)):\n            bpLeft[i] = min(bpLeft[i - 1], bpLeft[i - 1] - bP[i])\n        bpRight = [len(text)] * len(bP)\n        for i in range(len(text) - 2, -1, -1):\n            bpRight[", "groundtruth": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        char[] text = s.toCharArray();\n        List<Integer> posA = kmp(text, a.toCharArray());\n        List<Integer> posB = kmp(text, b.toCharArray());\n\n        List<Integer> ans = new ArrayList<>();\n        for (int i : posA) {\n            int bi = lowerBound(posB, i);\n            if (bi < posB.size() && posB.get(bi) - i <= k ||\n                bi > 0 && i - posB.get(bi - 1) <= k) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    private List<Integer> kmp(char[] text, char[] pattern) {\n        int m = pattern.length;\n        int[] pi = new int[m];\n        int c = 0;\n        for (int i = 1; i < m; i++) {\n            char v = pattern[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            pi[i] = c;\n        }\n\n        List<Integer> res = new ArrayList<>();\n        c = 0;\n        for (int i = 0; i < text.length; i++) {\n            char v = text[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            if (c == m) {\n                res.add(i - m + 1);\n                c = pi[c - 1];\n            }\n        }\n        return res;\n    }\n\n    // 开区间写法\n    private int lowerBound(List<Integer> nums, int target) {\n        int left = -1, right = nums.size(); // 开区间 (left, right)\n        while (left + 1 < right) { // 区间不为空\n            // 循环不变量：\n            // nums[left] < target\n            // nums[right] >= target\n            int mid = (left + right) >>> 1;\n            if (nums.get(mid) < target) {\n                left = mid; // 范围缩小到 (mid, right)\n            } else {\n                right = mid; // 范围缩小到 (left, mid)\n            }\n        }\n        return right;\n    }\n}\n"}
{"task_id": "java/15", "content": "'''\n\n\nclass Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        # 开区间二分，原理见 https://www.bilibili.com/video/BV1AP41137w7/\n        left = 0\n        right = (k + 1) << x\n        while left + 1 < right:\n            mid = (left + right) >> 1\n            if ____:\n                left = mid\n            else:\n                right = mid\n        return left\n\n\nif __name__ == '__main__':\n    # begin\n    s = Solution()\n    print(s.findMaximumNumber(10000000, 1))\n    # end", "groundtruth": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        this.x = x;\n        long left = 0;\n        long right = (k + 1) << x;\n        while (left + 1 < right) {\n            long mid = (left + right) >>> 1;\n            if (countDigitOne(mid) <= k) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n\n    private int x;\n    private long num;\n    private long memo[][];\n\n    private long countDigitOne(long num) {\n        this.num = num;\n        int m = 64 - Long.numberOfLeadingZeros(num);\n        memo = new long[m][m + 1];\n        for (long[] row : memo) {\n            Arrays.fill(row, -1);\n        }\n        return dfs(m - 1, 0, true);\n    }\n\n    private long dfs(int i, int cnt1, boolean isLimit) {\n        if (i < 0) return cnt1;\n        if (!isLimit && memo[i][cnt1] != -1) return memo[i][cnt1];\n        int up = isLimit ? (int) (num >> i & 1) : 1;\n        long res = 0;\n        for (int d = 0; d <= up; d++) {\n            res += dfs(i - 1, cnt1 + (d == 1 && (i + 1) % x == 0 ? 1 : 0), isLimit && d == up);\n        }\n        if (!isLimit) memo[i][cnt1] = res;\n        return res;\n    }\n}\n"}
{"task_id": "java/16", "content": "*/\npublic class ValidStrings {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.validStrings(1));\n    }\n}\n\nclass Solution {\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        int mask = (1 << n) - 1;\n        for (int i = 0; i <= mask; i++) {\n            int x = mask ^ i;\n            if (((x >> 1) & x) == 0) {\n                ans.add(Integer.toBinaryString((1 << n) | i).substring(1));\n            }\n        }\n        return ans;\n    }\n}", "groundtruth": "class Solution {\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        int mask = (1 << n) - 1;\n        for (int i = 0; i < (1 << n); i++) {\n            int x = mask ^ i;\n            if (((x >> 1) & x) == 0) {\n                ans.add(Integer.toBinaryString((1 << n) | i).substring(1));\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/17", "content": "I tried to test the problem using the following input and output data:\n[[\".\",\"Y\",\".\",\".\",\".\",\"Y\"],[\".\",\"Y\",\"Y\",\".\",\".\",\"Y\"],[\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 2\nExpected Output: 1\n\nBut the submission failed with the following output:\n[\".\",\"Y\",\".\",\".\",\".\",\"Y\"],[\".\",\"Y\",\"Y\",\".\",\".\",\"Y\"]\nOutput: 0\nExpected Output: 0\n\nThe submission failed because the first two lines are not equal: [\".\",\"Y\",\".\",\".\",\".\",\"Y\"] [\".\",\"Y\",\"Y\",\".\",\".\",\"Y\"]\nI checked the code, the lines are not equal in my opinion because the second line has a different number of elements. However, I am not sure if it's a bug or a typo. It took me a while to find the faulty line.\n\nA: You are not subtracting the last element (i.e. the last row) of the inner two arrays.\nYou should subtract 1 for both dimensions, meaning:\nfor(int i = 0; i < m; i++) {\n    for(int j = 0; j < n; j++) {\n        ans -= grid[i][j] == 'X';\n        sum[i + 1][j + 1][0] = sum[i][j + 1][0] - sum[i][j][0];\n        sum[i + 1][j + 1][1] = sum[i + 1][j][1] - sum[i][j + 1][1];\n        if (grid[i][j] != '.') {\n            sum[i + 1][j + 1][grid[i][j] & 1]++;\n        }\n        if (____) {\n            ans++;\n        }\n    }\n}\n\nPlease notice that this would also give you 1 (1 - 2 + 1 = 0) when subtracting from the first two inner rows of the second and first inner columns.\n", "groundtruth": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][][] sum = new int[m + 1][n + 1][2];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1][0] = sum[i + 1][j][0] + sum[i][j + 1][0] - sum[i][j][0];\n                sum[i + 1][j + 1][1] = sum[i + 1][j][1] + sum[i][j + 1][1] - sum[i][j][1];\n                if (grid[i][j] != '.') {\n                    sum[i + 1][j + 1][grid[i][j] & 1]++;\n                }\n                if (sum[i + 1][j + 1][0] > 0 && sum[i + 1][j + 1][0] == sum[i + 1][j + 1][1]) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/18", "content": "'''\nfrom typing import List\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # 题解：\n        # 参考代码 1：https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/ti-si-xiang-jian-20220331142440\n        # 参考代码 2：https://leetcode.cn/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-equal-to-target/solution/shou-hui-jie-dian-fu-gao-mian-shi-ti-b01jg/\n\n        length = len(target)\n        hash = 0\n        ans = float(\"inf\")\n        for char in target:\n            ans = min(ans, self.dp(char, words, costs, 0, hash))\n            hash = (hash * 8 + 1) % 1000000007\n        return -1 if ans == float(\"inf\") else ans\n\n\n    def dp(self, char, words, costs, i, hash):\n        if i == len(words):\n            return 0 if self.hash(char, hash) == hash else float(\"inf\")\n        else:\n            return min(self.dp(char, words, costs, i+1, hash), self.dp(words[i][0], words, costs, i+1, (hash*8 + 1) % 1000000007) + costs[i])\n\n\n    def hash(self, char, hash):\n        return (hash * 8 + 1) % 1000000007 if char == \"1\" else hash\n\ns = Solution()\ns.minimumCost(target=\"01122\", words = [\"112\",\"12\"], costs=[0,1])\n\nclass Solution:\n    def minimumCost(self, target:", "groundtruth": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        char[] t = target.toCharArray();\n        int n = t.length;\n\n        final int MOD = 1_070_777_777;\n        final int BASE = (int) 8e8 + new Random().nextInt((int) 1e8);\n        int[] powBase = new int[n + 1];\n        int[] preHash = new int[n + 1];\n        powBase[0] = 1;\n        for (int i = 0; i < n; i++) {\n            powBase[i + 1] = (int) ((long) powBase[i] * BASE % MOD);\n            preHash[i + 1] = (int) (((long) preHash[i] * BASE + t[i]) % MOD);\n        }\n\n        Map<Integer, Map<Integer, Integer>> minCost = new TreeMap<>();\n        for (int i = 0; i < words.length; i++) {\n            long h = 0;\n            for (char b : words[i].toCharArray()) {\n                h = (h * BASE + b) % MOD;\n            }\n            minCost.computeIfAbsent(words[i].length(), k -> new HashMap<>())\n                   .merge((int) h, costs[i], Integer::min);\n        }\n\n        int[] f = new int[n + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (Map.Entry<Integer, Map<Integer, Integer>> e : minCost.entrySet()) {\n                int len = e.getKey();\n                if (len > i) {\n                    break;\n                }\n                int subHash = (int) (((preHash[i] - (long) preHash[i - len] * powBase[len]) % MOD + MOD) % MOD);\n                f[i] = Math.min(f[i], f[i - len] + e.getValue().getOrDefault(subHash, Integer.MAX_VALUE / 2));\n            }\n        }\n        return f[n] == Integer.MAX_VALUE / 2 ? -1 : f[n];\n    }\n}\n"}
{"task_id": "java/19", "content": "Please fill in the code of the modifiedList().\nThe completed code is as follows:\nclass Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n        Set<Integer> set = new HashSet<>(nums.length);\n        for (int x : nums) {\n            set.add(x);\n        }\n        ListNode dummy = new ListNode(0, head);\n        ListNode cur = dummy;\n        while (cur.next != null) {\n            if (set.contains(cur.next.val)) {\n                cur.next = cur.next.next; // 删除\n            } else {\n                cur = cur.next; // 向后移动\n            }\n        }\n        return dummy.next;\n    }\n}\n'''\nfrom itertools import chain\nfrom sys import setrecursionlimit\nfrom functools import lru_cache\nfrom collections import defaultdict, deque\nsetrecursionlimit(10**6)\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n    @classmethod\n    def from_array(cls, array):\n        head = cls(array.pop(0))\n        for elem in array:\n            head.next = cls(elem)\n            head = head.next\n        return head\n\n    @classmethod\n    def to_array(cls, node):\n        return chain((node.val,),\n                     cls.to_array(node.next) if node is not None else ())\n\n    @staticmethod\n    def to_str(node, d=1):\n        node = node.next\n        if node is None:\n            return str(d)\n        return f'[{str(node.val)}, ' + ListNode.to_str(node, d+1) + ']'\n\n    def __repr__(self):\n        return ListNode.to_str(self)\n\n\nclass Solution:\n    @staticmethod\n    @lru_cache(None)\n    def _dfs(root, root_sum, diff):\n        if", "groundtruth": "class Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n        Set<Integer> set = new HashSet<>(nums.length); // 预分配空间\n        for (int x : nums) {\n            set.add(x);\n        }\n        ListNode dummy = new ListNode(0, head);\n        ListNode cur = dummy;\n        while (cur.next != null) {\n            if (set.contains(cur.next.val)) {\n                cur.next = cur.next.next; // 删除\n            } else {\n                cur = cur.next; // 向后移动\n            }\n        }\n        return dummy.next;\n    }\n}\n"}
{"task_id": "java/20", "content": " */\npublic class Solution {\n    public static class MinNode {\n        int y, c;\n\n        public MinNode(int y, int c) {\n            this.y = y;\n            this.c = c;\n        }\n    }\n\n    public static int[][] getMinCuts(int[][][][] dp, int curH, int curV,\n            int hCount, int vCount, int height, int width) {\n        int[][] minCut = null;\n        for (int h = curH, v = curV; h < hCount; h++) {\n            for (int w = curV; w < vCount; w++) {\n                int min = Math.min(dp[h][w][hCount - 1][vCount - 1],\n                        dp[h][w][hCount - 1][vCount - 1]);\n                if (min <= dp[h][w][hCount][vCount - 1]) {\n                    return new int[][] { { h, w }, { h + 1, w + 1 } };\n                }\n\n                if (width < h + 2 || height < w + 2) {\n                    continue;\n                }\n\n                MinNode[] minNodes = new MinNode[1];\n                minNodes[0] = new MinNode(w, dp[h][w][hCount][vCount]);\n                if (minNodes[0].c >= min) {\n                    minNodes[0].c = min;\n                } else {\n                    continue;\n                }\n                int y = 0;\n                while (true) {\n                    if (minNodes[y].c == min) {\n                        minNodes = new MinNode[y + 2];\n                        for (int i = 0; i < y + 2; i++) {\n                            minNodes[i] = new MinNode(minNodes[i].y, minNodes[i].c);\n                        }\n                        break;\n                    }\n                    if (y == 0) {\n                        minNodes[y] = new MinNode(minNodes[y].y, minNodes[y].c);\n                        continue;\n                    }\n                    if (minNodes[y].y == minNodes[y -", "groundtruth": "class Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int[][][][] dp = new int[m][n][m][n];\n        for (int i1 = 0; i1 < m; i1++) {\n            for (int j1 = 0; j1 < n; j1++) {\n                for (int i2 = 0; i2 < m; i2++) {\n                    Arrays.fill(dp[i1][j1][i2], Integer.MAX_VALUE);\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j][i][j] = 0;\n            }\n        }\n        for (int rowCount = 1; rowCount <= m; rowCount++) {\n            for (int colCount = 1; colCount <= n; colCount++) {\n                for (int i1 = 0, i2 = rowCount - 1; i2 < m; i1++, i2++) {\n                    for (int j1 = 0, j2 = colCount - 1; j2 < n; j1++, j2++) {\n                        for (int midRow = i1; midRow < i2; midRow++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], horizontalCut[midRow] + dp[i1][j1][midRow][j2] + dp[midRow + 1][j1][i2][j2]);\n                        }\n                        for (int midCol = j1; midCol < j2; midCol++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], verticalCut[midCol] + dp[i1][j1][i2][midCol] + dp[i1][midCol + 1][i2][j2]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][m - 1][n - 1];\n    }\n}\n"}
{"task_id": "java/21", "content": " */\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n\nclass Solution {\n    public boolean doesAliceWin(String s) {\n\n        for (char c : s.toCharArray() ) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return true;\n            }\n        }\n        return false;\n\n    }\n}", "groundtruth": "class Solution {\n    public boolean doesAliceWin(String s) {\n        for (char c : s.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/22", "content": "Input\nAn integer N, followed by a string of characters S, each of length N. (1 <= N <= 100, 1 <= S.length <= N)\nOutput\nThe maximal number of operations.\n\nExample\nInput:\n7\n010010\n\nOutput:\n2\n\nExplanation:\n010010 will be changed to 000110 in two operations.\n\nConstraints\n1 <= S.length <= 100\nS[i] = '0' or '1'\n\nNote\nS = '010010'\nS[0] = '0'\nS[1] = '1'\n\nS[i + 1] for i = 0 is '1'\nS[i + 1] for i = 1 is '0'\nS[i + 1] for i = 2 is '1'\nS[i + 1] for i = 3 is '0'\nS[i + 1] for i = 4 is '0'\nS[i + 1] for i = 5 is '1'\nS[i + 1] for i = 6 is '0'\n\nHence we have a[0] = 0, a[1] = 1, a[2] = 1, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0.\nThen for i = 1, we need to delete a[1] which will decrease a[1] by 1.\nFor i = 2, it will take two operations to reduce a[2] by 1, that is, a[2] = 0, a[3] = 0.\nFor i = 3, we only need to do one operation, that is, a[3] = 0.\nFor i = 4, it will take one operation to reduce a[4] by 1, that is, a[4] = 0, a[5] = 0.\nFor i = 5, we only need to do one operation, that is, a[5] = 0.\nFor i = 6, it will take two operations to reduce a[6] by 1, that is, a[6] = 0, a[7] = 0.\nFor i = 7, we only need to", "groundtruth": "class Solution {\n    public int maxOperations(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int cnt1 = 0;\n        for (int i = 0; i < s.length; i++) {\n            if (s[i] == '1') {\n                cnt1++;\n            } else if (i > 0 && s[i - 1] == '1') {\n                ans += cnt1;\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/23", "content": "*/\n\nclass Solution {\npublic:\n    long minimumOperations(vector<int>& nums, vector<int>& target) {\n        long ans = 0;\n        int n = nums.size();\n        long s = target[0] - nums[0];\n        for (int i = 1; i < n; ++i) {\n            int k = (target[i] - target[i - 1]) - (nums[i] - nums[i - 1]);\n            if (k > 0) {\n                ans += s >= abs(k);\n            } else {\n                ans -= s <= abs(k) ? k : min(k + s, 0);\n            }\n            s += k;\n        }\n        return ans;\n    }\n};", "groundtruth": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long s = target[0] - nums[0];\n        long ans = Math.abs(s);\n        for (int i = 1; i < nums.length; i++) {\n            int k = (target[i] - target[i - 1]) - (nums[i] - nums[i - 1]);\n            if (k > 0) {\n                ans += s >= 0 ? k : Math.max(k + s, 0);\n            } else {\n                ans -= s <= 0 ? k : Math.min(k + s, 0);\n            }\n            s += k;\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/24", "content": "Hint: You may find Array.sort useful.\n\nA: I tried to use my idea as below:\nclass Solution {\n\n    private static final int[] PI = new int[1000];\n\n    static {\n        for (int i = 2; i < PI.length; i++) {\n            PI[i] = i;\n        }\n    }\n\n    private static void _isPrime(int number) {\n\n        for (int i = 2; i <= number / 2; i++) {\n            if (number % i == 0) {\n                PI[number] = -1;\n                break;\n            }\n        }\n    }\n\n    public int nonSpecialCount(int l, int r) {\n        int res = 0;\n\n        for (int i = l; i <= r; i++) {\n            _isPrime(i);\n        }\n\n        for (int i = l; i <= r; i++) {\n            if (PI[i] != -1) {\n                res++;\n            }\n        }\n\n        return res;\n    }\n}\n\nBut runtime exceeded in the test. Any suggestion?\n\nA: There is a way to calculate prime numbers for integers up to 31622, which turns out to be an O(n) algorithm (it can be found here):\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class PrimeFactors {\n\n  public static int numberOfPrimeFactors(int i) {\n    int count = 0;\n    int n = i;\n    for (int k = 2; k <= n / k; k++)\n      while (n % k == 0) {\n        n /= k;\n        count++;\n      }\n    if (n > 1)\n      count++;\n    return count;\n  }\n\n  public static int numberOfPrimeFactors(int i, int limit) {\n    if (i < 0 || limit <= 0) {\n      throw new IllegalArgumentException(\"Invalid arguments: \" + i + \", \" + limit);\n    }\n    int count = 0;\n    int n = i;\n", "groundtruth": "class Solution {\n    private static final int MX = 31622;\n    private static final int[] PI = new int[MX + 1];\n\n    static {\n        for (int i = 2; i <= MX; i++) {\n            if (PI[i] == 0) { // i 是质数\n                PI[i] = PI[i - 1] + 1;\n                for (int j = i * i; j <= MX; j += i) {\n                    PI[j] = -1; // 标记 i 的倍数为合数\n                }\n            } else {\n                PI[i] = PI[i - 1];\n            }\n        }\n    }\n\n    public int nonSpecialCount(int l, int r) {\n        return r - l + 1 - (PI[(int) Math.sqrt(r)] - PI[(int) Math.sqrt(l - 1)]);\n    }\n}\n"}
{"task_id": "python/0", "content": "\nYour code will be tested on a variety of test cases to check that the output produced is correct.\n\nConstraints:\n- n == grid.length == grid[i].length\n- 2 <= n <= 100\n- 1 <= grid[i][j] <= n2\n- 1 <= value <= n2\n- There are no repeating values in grid.\n- At least one value in grid exists that has adjacency to value or a diagonal neighbor.\n- At most 105 calls to adjacentSum and diagonalSum will be made to non-ambiguous values.", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n    "}
{"task_id": "python/1", "content": "", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n "}
{"task_id": "python/2", "content": "\n\"\"\"\n", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/3", "content": "\n# Example:\nInput: n = 5, queries = [[1,0],[2,2],[0,4],[3,3],[3,4],[4,2],[4,1]]\nOutput: [1,-1,2,3,0,1,0]\nExplanation: The 5 queries in the description are processed as follows:\n1) 0 and 4 are connected. (0) --> (1)--> (2)--> (3)--> (4). (4) --> (5)\n2) The shortest path is: [1,4,3]\n3) The shortest path is: [0,2,1,4]\n4) The shortest path is: [0,2,2,3,4]\n5) The shortest path is: [0,1,2,3,4]\n\nConstraints:\n- 2 <= n <= 10^5\n- 0 <= queries.length <= 200\n- queries[i].length == 2\n- 0 <= ui, vi < n\n- ui != vi\n- 0 <= vi < n - 1\n'''\n\nfrom collections import deque\nfrom typing import List, Set, Deque\nfrom itertools import count\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[] for _ in range(n)]\n        vis = [0] * n\n        ans = [0] * len(queries)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n                if not q:\n                    return -1\n                if n - 1 in q:\n                    return step\n\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n  "}
{"task_id": "python/4", "content": "\nSample input\n1\n[2,1,0,0]\nSample output\n2\n\nThe length of the shortest path is 2, and it can be shown that the shortest path is 0, 1, 2.\n\nThe following picture represents the complete city network:\n\nYour runtime beats 97.16 % of python3 submissions.\n\nYour memory usage beats 67.06 % of python3 submissions.\n\nYour submission was accepted on 05/02/2023.\n*/\n\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # g = [[i + 1] for i in range(n - 1)]\n        g = []\n        ans = []\n        for j in range(queries[0][0],n):\n            s = 0\n            t = 1\n            g = [[j]]\n            for i,l in enumerate(queries[1:],1):\n                a = len(g)\n                a = i \n                for h in range(a):\n                    for k in g[h]:\n                        # g[k].append(l[1])\n                        if k == l[1]:\n                            g.append([l[1]])\n                            s += t\n                            t += 1\n                            break\n                    if k == l[1]:\n                        break\n                if len(g[h]) == a:\n                    s += 1\n                    g.append([l[1]])\n                    t += 1\n            ans.append(s)\n        return ans", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/5", "content": "Note: The test cases are generated such that queries[i] does not contain duplicate elements.\n\nExamples 1:\nInput: n = 2, queries = [[1,0]]\nOutput: [1]\nExplanation: The shortest distance is 1. We only added a new road from 0 to 1.\n\nExamples 2:\nInput: n = 2, queries = [[1,0],[0,1]]\nOutput: [2,1]\nExplanation: The shortest path changes as follows:\n1) 1 --> 2\n2) 2 --> 1\nThe shortest distance is 2. We only added a new road from 0 to 1.\n\nExamples 3:\nInput: n = 3, queries = [[2,0],[2,1]]\nOutput: [3,1,2]\nExplanation: The shortest path changes as follows:\n1) 2 --> 0 --> 1 --> 3\n2) 2 --> 0 --> 2 --> 0 --> 1 --> 3\n3) 2 --> 0 --> 2 --> 0 --> 2 --> 0 --> 1 --> 3\nThe shortest distance is 3. We only added a new road from 0 to 1.\n'''\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def shortestPath_from_source():\n            return []", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/6", "content": "Input:\nn = 13, queries = [[1,5],[5,10],[10,2],[7,7],[2,4],[3,4],[5,11],[8,8],[9,10],[1,10],[1,10],[11,12],[12,13],[13,14],[1,9],[8,12],[12,14]]\nOutput:\n[16,4,22,4,5,2,15,3,14,16,12,12,4]\nExplanation:\nAfter query 1:\ncity 1 connects with 5.\n1-5-3\n| \\ |\n|  \\|\nAfter query 2:\ncity 5 connects with 10.\n5-10-2\n|\nAfter query 3:\ncity 10 connects with 2.\n10-2-4\n|    |\n10-4-4-13-11\nAfter query 4:\ncity 7 connects with 7.\n7-8-9-10-11-12-13-14\n|     |     \\|\n7-8-9-10-11-12-13-14\nAfter query 5:\ncity 2 connects with 4.\n2-4-3-5\n| \\  |  \\ |\\\n2-4-3-5\nAfter query 6:\ncity 3 connects with 4.\n3-4-3-5\nAfter query 7:\ncity 5 connects with 11.\n5-11-4-3-6\n| \\ /    | \\\n5-11-4-3-6\nAfter query 8:\ncity 8 connects with 8.\n8-9-10-11-12-13-14-15\nAfter query 9:\ncity 11 connects with 12.\n11-12-5-10-7-9-14-10-13\nAfter query 10:\ncity 10 connects with 13.\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/7", "content": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(l)\n            i = r - 1\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/8", "content": " */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ans;\n        // 注意使用fa的第二维是size\n        vector<vector<int>> fa(n + 1, vector<int>(n + 1));\n        for(int i = 1; i <= n; ++i){\n            fa[i][i] = i;\n        }\n        // 非递归并查集\n        auto find = [&](int x){\n            int rt = x;\n            while(fa[rt][rt] != rt){\n                rt = fa[rt][rt];\n            }\n            while(fa[x][x] != rt){\n                fa[x][x] = rt;\n                x = fa[x][x];\n            }\n            return rt;\n        };\n\n        int cnt = n - 1;\n        for(const auto& q: queries){\n            int u = q[0], v = q[1];\n            int fr = find(v - 1);\n            int i = find(u);\n            while(i < v - 1){\n                cnt--;\n                fa[i][i] = fr;\n                i = find(i + 1);\n            }\n            ans.push_back(cnt);\n        }\n        return ans;\n    }\n};\n\n/*\n\n请完成main函数\n\n#include \"unittest.h\"\n#include \"solution.h\"\n\nTEST(SolutionTest, example1) {\n    int n = 3;\n    vector<vector<int>> queries = {\n        {1, 0},\n        {2, 1},\n        {0, 2},\n    };\n    vector<int> ans = {2, 1, 2};\n    EXPECT_EQ(Solution().shortestDistanceAfterQueries(n, queries), ans);\n}\n\nint main() {\n    unittest.RunAllTests();\n}\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/9", "content": "\nSample Input\n[\"FenwickTree\",\"query\",\"update\",\"query\",\"update\",\"query\",\"update\",\"query\",\"update\",\"query\",\"update\",\"query\",\"update\",\"update\"]\n[[2],[2,1],[3,1,0],[2,2],[2,3,1],[3,2],[2,3,1],[2,2],[1,3,1],[3,1,0],[2,1,1],[3,2],[3,1,0],[3,1,1]]\nSample Output\n[null,12,12,8,9,7,13,13,8,10,12,11,11,11]\nExplanation\nFenwickTree fenwickTree = new FenwickTree(2); // FenwickTree fenwickTree = new FenwickTree(2);\nfenwickTree.query(2);  // returns 12.\n// 添加 2, 1\nfenwickTree.update(3, 1); // 1, 2, 3\n// 添加 1\nfenwickTree.update(3, -1); // 3, 1, 2\nfenwickTree.query(2); // returns 12.\n// 修改 1，向后移动\nfenwickTree.update(2, 1); // 2, 1, 3\n// 添加 2\nfenwickTree.update(3, 1); // 1, 2, 3\n// 修改 2，向后移动\nfenwickTree.update(2, -1); // 2, 1, 3\nfenwickTree.query(3); // returns 8.\n// 修改 3，向后移动\nfenwickTree.update(3, 1); // 1, 2, 3\n// 添加 3\nfenwickTree.update(2, 1); // 2, 1, 3\n// 修改 2，向后移动\nfenwickTree.update(3, 1); // 1, 2, 3\nfenwickTree.query(3); // returns 7.\n", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/10", "content": "If there are any questions, please ask them in our forum.\nThanks.\n\nA: The complete code is as follows:\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1] if idx else n\n            nxt = sl[idx] if idx < len(sl) else 0\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n       ", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/11", "content": "\nPlease be advised that it is your own code, we have provided a base class to help you complete the solution.\n\n## 描述\n\n题意：请你设计一个数据结构，支持以下两种操作：\n\n更新 queries[i][1] 位置的元素值，将 queries[i][1] 位置对应的元素的值设置为 queries[i][2]。\n查询 queries[i][0] 元素个数。\n返回值：对于每个 queries[i][0] ，请返回 queries[i][1] 元素值的个数。\n\n提示：\n\n1 <= queries.length <= 10^5\nqueries[i].length == 3\n1 <= queries[i][0] <= 10^5\nqueries[i][1] <= queries[i][2] <= 10^9\n\n## 思路\n\n这道题目比较困难。\n\n首先介绍一下 ```SortedList``` 的相关用法：\n\n```\n$ pip install sortedcontainers\n```\n\n我们发现这个库提供了基于有序集合的实现 ```SortedList```。\n\n首先，初始化一个 ```SortedList```。\n\n```python\n>>> from sortedcontainers import SortedList\n>>> sl = SortedList()\n```\n\n我们用 ```add``` 方法将一个元素添加到 ```SortedList``` 中。\n\n```python\n>>> sl.add(1)\nTrue\n>>> sl.add(10)\nTrue\n>>> sl.add(2)\nTrue\n>>> sl.add(2)\nTrue\n>>> sl.add(3)\nTrue\n>>> sl.add(3)\nTrue\n>>> sl\nSortedList([1, 2, 2, 3, 3, 10])\n```\n\n我们用 ```add``` 方法将一个元素添加到 ```SortedList``` 中。\n\n```python\n>>> sl.index(2)\n1\n```\n\n这里，```index``` 方法返回左边元素 ```2``` 在 ```SortedList``` 中的位置。如果我们需要返回右边元素的位置，请调用 ```add``` 方法时加上 ```reverse=True", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/12", "content": "", "groundtruth": " class Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\n        double=0\n        for it in nums:\n            if it>=10: \n                double=double+it \n            else:\n                single=single+it  \n        \n        return single !=double\n "}
{"task_id": "python/13", "content": "Test your code with the following code samples.\nSample Input 1:\n3\n4 6\nSample Output 1:\n2\nSample Input 2:\n4\n1 9\nSample Output 2:\n4\nSample Input 3:\n3\n10 12\nSample Output 3:\n2\n\"\"\"\n\nfrom math import sqrt\n\ndef isqrt(x: int) -> int:\n    \"\"\"\n    求 x 的平方根，整数部分舍弃\n    \"\"\"\n    return int(sqrt(x))\n\n\nMX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = int(sqrt(i))\n        for j in range(2, int(sqrt(i)) + 1):\n            if i % j == 0:  # i 的倍数为合数\n                pi[i] -= 1\n                break\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n"}
{"task_id": "python/14", "content": "\n\n--------------------------------------------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n "}
{"task_id": "python/15", "content": "\nSample Test Case 1\nInput\n\"001\"\nOutput\n3\nExpected\n2\n\nSample Test Case 2\nInput\n\"111111010001\"\nOutput\n13\nExpected\n7\n\nSample Test Case 3\nInput\n\"111111001001\"\nOutput\n6\nExpected\n4\n\nSample Test Case 4\nInput\n\"111111111111\"\nOutput\n12\nExpected\n4\n\nSample Test Case 5\nInput\n\"111111111111\"\nOutput\n12\nExpected\n4\n\nSample Test Case 6\nInput\n\"1110000001000\"\nOutput\n10\nExpected\n3\n\nSample Test Case 7\nInput\n\"1110000001001\"\nOutput\n15\nExpected\n7\n\nSample Test Case 8\nInput\n\"110101101001\"\nOutput\n12\nExpected\n6\n\nSample Test Case 9\nInput\n\"1110000111000\"\nOutput\n14\nExpected\n4\n\nSample Test Case 10\nInput\n\"1011110011000\"\nOutput\n13\nExpected\n5\n\nSample Test Case 11\nInput\n\"110011111101110110100000011010110110111101100110000111011111101001101101111111111100100101010001100111001110111011110100000111011010011101000100011010101100111111000111001110000", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n "}
{"task_id": "python/16", "content": "The test cases are listed below in each block. The output of each test case is the expected return value.\nSample Input 1\n{\"s\":\"01011\"}\n{\"s\":\"0110\"}\n{\"s\":\"011011\"}\n{\"s\":\"1111\"}\nSample Output 1\n4\n4\n1\n3\nExplanation For Test Case 1\nIn the first test case, the binary string is \"01011\", whose substrings have dominant ones are \"0\", \"01\", \"1\", \"011\". The number of these substrings is 4.\nIn the second test case, the binary string is \"0110\", whose substrings have dominant ones are \"0\", \"01\", \"1\", \"011\", \"10\", \"11\", \"100\", \"0111\". The number of these substrings is 4.\nIn the third test case, the binary string is \"011011\", whose substrings have dominant ones are \"0\", \"01\", \"1\", \"011\", \"10\", \"11\", \"100\", \"0111\", \"101\", \"011011\". The number of these substrings is 1.\nIn the fourth test case, the binary string is \"1111\", whose substrings have dominant ones are \"1111\". The number of these substrings is 3.\n*/\n\nimport unittest\n\n# 请在此处添加以下代码片段\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        ans = 0\n        tot1 = sum(1 for c in s if c == '1')\n        a = [i for i, b in enumerate(s) if b == '0']\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left\n            for k in range(i, len(a) - 1):\n                if ___ :\n                    break\n                ans += ____\n        return ans\n# 请在此处添加以下代码片段\n\n\nclass", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/17", "content": "Please also give the code’s time complexity and auxiliary space complexity. Do not use any additional data structures. Do not use an iterative algorithm.\nThe time complexity and auxiliary space complexity are as follows:\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        ans = i = 0\n        for b in s:\n            if b == '1':\n                ans += i + 1\n            i += 1\n        return ans\n\nThe time complexity and auxiliary space complexity are O(n).\n\"\"\"\n\n\ndef numberOfSubstrings(s: str) -> int:\n    n = len(s)\n    ans = 0\n    for b in s:\n        if b == \"1\":\n            ans += n\n        n -= 1\n    return ans\n\n\nprint(numberOfSubstrings(s=\"0110111\"))\nprint(numberOfSubstrings(s=\"111111\"))\nprint(numberOfSubstrings(s=\"00000\"))", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/18", "content": "Input:\nX = 3\nY = 3\ncircles = [[2, 3, 1], [1, 2, 2], [2, 1, 2], [1, 1, 2]]\nOutput:\ntrue\nExplanation:\nWe can reach (1, 2) from (0, 0) in the first iteration,\nand we can reach (2, 2) from (0, 1) in the second iteration.\n\nInput:\nX = 8\nY = 8\ncircles = [[5, 7, 2], [7, 4, 2]]\nOutput:\ntrue\nExplanation:\nAll the circles can be reached.\n\nInput:\nX = 6\nY = 8\ncircles = [[4, 5, 2], [2, 3, 1], [10, 8, 10], [11, 5, 20], [6, 11, 2]]\nOutput:\ntrue\nExplanation:\nWe can reach (6, 5) from (5, 11) in the first iteration,\nand we can reach (10, 8) from (6, 11) in the second iteration.\n\nConstraints:\n1 <= X, Y, circles.length <= 10^5\ncircles[i].length == 3\n1 <= X, Y <= 10^6\n1 <= r <= 10^6\n0 <= xi, yi <= 10^6\n0 <= X, Y <= 10^9\n0 <= xCorner, yCorner, x1, y1 <= 10^9\n", "groundtruth": " class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n    "}
{"task_id": "python/19", "content": "\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    (____) and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    ____:\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/20", "content": "\nFunction canReachCorner(xCorner, yCorner, circles) returns true if there exists a path from the bottom left corner (x = 0, y = 0) to the top right corner (x = xCorner, y = yCorner) such that the entire path lies inside the rectangle. It does not touch the rectangle, or lie inside any circle. It touches the rectangle at the two corners. Otherwise, it returns false.\n\nPlease ensure your function canReachCorner takes in the same order as in the example.\n\n\"\"\"\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n\n        def dfs(x, y, vis):\n            if x < 0 or y < 0 or x > X or y > Y:\n                return False\n            if (x, y) in vis:\n                return False\n            vis.add((x, y))\n            if x == 0 or x == X or y == 0 or y == Y:\n                return True\n            return any([dfs(x - r[0], y - r[1], vis) for r in circles])\n\n        return dfs(0, 0, set())\n\n\ndef main():\n    s = Solution()\n    assert s.canReachCorner(1, 1, [\n        [1, 1, 0]\n    ])\n    assert s.canReachCorner(4, 4, [\n        [2, 2, 3],\n        [3, 3, 2],\n        [1, 1, 3]\n    ])\n\n\nif __name__ == \"__main__\":\n    main()", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/21", "content": "\nTest case explanation:\n\nSAMPLE INPUT:\n[\n  [True, False, False, True],\n  [False, False, True, True],\n  [True, True, False, False],\n]\nSAMPLE OUTPUT:\n0\nExplanation:\n\nThe 0th team is the 0th and 3rd player (0th and 3rd players are the champions), so we return the 0th index of the team.\n\n'''\n\nclass Solution(object):\n    def findChampion(self, grid):\n        n = len(grid)\n        for i in range(n):\n            # 检查i是否与其他人冲突\n            for j in range(n):\n                if i == j:\n                    continue\n                elif grid[i][j]:\n                    continue\n                else:\n                    return i\n        return -1\n\nprint(Solution().findChampion(\n    [[True, False, False, True], [False, False, True, True], [True, True, False, False]]))", "groundtruth": "\nclass Solution:\n    def findChampion(self, grid: List[List[int]]) -> int:\n        def check(i):\n            for j in range(n):\n                if i == j:\n                    continue\n                elif grid[i][j] == 1 and grid[j][i] == 0:\n                    continue\n                else:\n                    return False\n            return True\n        n = len(grid)\n        for i in range(n):\n            if check(i):\n                return i\n"}
{"task_id": "python/22", "content": "\nConstraints:\n\n    1 <= n <= 105\n    0 <= m <= n * (n - 1) / 2\n    0 <= edges[i][0], edges[i][1] <= n - 1\n    edges[i] != edges[j] for all i != j\n\nExplanation:\n\nThe number of edges is n - 1, so in a complete directed graph, the graph can be decomposed into n - 1 nodes. One team of the form i, where i is the initial number, is one of these nodes. The number of nodes is not 105.\n\nLet's create a directed graph with n - 1 edges. Let us call the root of the tree the number 0. There is only one node with a number 0. The graph contains nodes 1 to n - 1. The rest of the nodes are the rest of the vertices in the graph. The graph must be a DAG.\n\nInitialize a result integer to -1.\n\nIf the number of nodes that contain a strong relationship is not n:\n\n    result = -1\n    return result\nInitialize a visited list of n elements as False.\n\nFor each edge in the graph, update its start and end values:\n\n    edge[0] = edge[1] = edge[0] + 1\nUpdate the result to the champion of the tournament.\n\nFor every node in the graph, perform a DFS to see the number of strong relationships of that node.\n\nReturn result:\n\n    result\n\n'''\ndef findChampion(n, edges):\n\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n\n    for i in range(n):\n        visited = [False] * n\n        count = dfs(graph, i, visited)\n        if count == n:\n            return i\n    return -1\n\ndef dfs(graph, start, visited):\n    count = 1\n    visited[start] = True\n    next_nodes = graph[start]\n    for next_node in next_nodes:\n        if not visited[next_node]:\n            count += dfs(graph, next_node, visited)", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/23", "content": "You are not allowed to import additional library packages. Only the classes mentioned above should be used. \n\nThis is an excellent learning opportunity for you to learn about graphs. Think about how the problem relates to graphs: the DAG and the parent/child relationship.\n\n\nFor example, team 0 is the champion of the tournament because there is only one valid sequence that connects it with teams 1 and 2:\n\n0 <- 1 - 2\nYou are given n and an array edges representing the DAG. Return the index of the team that will be the champion. If there is a tie, return the smallest index. The answer is guaranteed to be unique.\n\n\nExample 1:\n\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[4,5],[5,4],[3,4],[1,3]]\nOutput: 1\nExplanation: The diagram above denotes the DAG.\nTeam 1 is the champion because there is only one valid sequence that connects it with the other nodes.\n- Team 0 is the champion because team 0 is the lexicographically smallest and there is no node team 1 that is more powerful than team 0.\n- Team 3 is the champion because team 3 is the lexicographically smallest and there is no node team 0 that is more powerful than team 3.\n- Team 4 is the champion because team 4 is the lexicographically smallest and there is no node team 0 or team 3 that is more powerful than team 4.\n- Team 5 is the champion because team 5 is the lexicographically smallest and there is no node team 0, team 3 or team 4 that is more powerful than team 5.\n- Team 2 is the champion because team 2 is the lexicographically smallest and there is no node team 0, team 3 or team 4 that is more powerful than team 2.\nThe diagram above shows how to convert from node indexes to the team's indices. If you're wondering what the lexicographic order means, think about the lexicographic permutation of [0,1,2] or [2,0,1].\n\nExample 2:\n\nInput: n = 6, edges = [[0,1],[0", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/24", "content": "Test Cases\nSolution\nRuntime\n2449 ms\nBeats\n91.24%\nMemory\n151.9 MB\nBeats\n88.11%\nCode\n\n\n\n\n\n\n'''\ndef maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n    \n    # Create adjacency list\n    adjList = defaultdict(list)\n    for edge in edges:\n        adjList[edge[0]].append(edge[1])\n        adjList[edge[1]].append(edge[0])\n    \n    # Define dfs function\n    def dfs(node, parent):\n        if node == 0:\n            return (0, 0)\n        dp0, dp1 = 0, 0\n        for child in adjList[node]:\n            if child != parent:\n                child_dp0, child_dp1 = dfs(child, node)\n                dp0 += child_dp0\n                dp1 += child_dp1\n        return (dp0, dp1)\n    \n    # dfs on a new tree\n    dp0, dp1 = dfs(0, -1)\n    return max(nums[0] + dp0, nums[0] + dp1)\n\n'''", "groundtruth": "\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/25", "content": "\nFor example, if nums = [1, 2, 5, 1], then your code should print 5.\n\nNote:\n- You must return the answer modulo 109 + 7.\n- Subtasks 1, 2, and 3 are solved with a different implementation of BIT class.\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))\n        bit = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i)\n            f = i + 1 - j\n            bit.update(j, f)\n        return bit.pre_max(len(b))\n\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-1] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            if self.tree[i] != -1:\n                val = max(val, self.tree[i])\n            self.tree[i] = val\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -1\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n\n\n# Your BIT object will be instantiated and called as such:\n# obj = BIT(n)\n# obj.update(i,val)\n# param_2 = obj.pre_max(i)\n\n\n# The complexity of BIT class is O(log(n)), because of update function.\n\n\n# Complete the given incomplete code according to the description.\ndef bisect_left(nums: List[int], target: int) -> int:\n    return _____\n\n\ndef bisect_right(nums: List[int], target: int) -> int:", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/26", "content": "\n\nExample 1:\n\nInput: nums = [2,-2,4,5,-2,7,2,-1,8,5,4]\nOutput: 18\nExplanation: nums = [2,-2,4,5,-2,7,2,-1,8,5,4]. The values we can get are:\n- (2, 2): 2 + 2\n- (1, 2): -2 + -2\n- (1, 3): 4 + 2\n- (1, 4): 5 - 2\n- (1, 5): 7 - 2\n- (1, 6): 2 - 1\n- (2, 6): 8 + 2\n\n\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1  \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))  \n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = ____\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n\n", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/27", "content": "\"\"\"", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/28", "content": "\nNote:\n- Your solution will be run against multiple test cases, and a few test cases will be included.\n- You may use any programming language.\n- The runtime for your solution is O(n), where n is the length of nums.\n- You are not allowed to use extra memory.\n  \"\"\"\n\n  def findKOr(self, nums: List[int], k: int) -> int:\n    bit = [0] * (max(nums) + 1)\n    for i in nums:\n      for j in range(max(nums) + 1):\n        if i & 1 << j:\n          bit[j] += 1\n    ans = 0\n    for j in range(max(nums) + 1):\n      if bit[j] >= k:\n        ans |= 1 << j\n    return ans", "groundtruth": "\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/29", "content": "\n# 提示:\n# 1 <= nums1.length, nums2.length <= 104\n# 1 <= nums1[i], nums2[i] <= 104\n# nums1.length == nums2.length\n\n# nums1的和等于sum(nums1)\n# nums2的和等于sum(nums2)\n# 数组 nums1 和 nums2 均由唯一的正数组成\n# nums1 和 nums2 都不包含0\n# nums1[i] < nums2[i] for 0 < i < nums1.length\n\n# 提示: 如果可以将两数组中的所有 0 转化为非 0 元素，则返回满足该条件的最大等效 和 。\n# 否则，返回 -1 。\n\n# 提示: 如果可以将两数组中的所有 0 转化为非 0 元素，则返回满足该条件的最大等效 和 。\n# 否则，返回 -1 。\n\n# 来源：力扣（LeetCode）\n# 链接：https://leetcode-cn.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits\n# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n\nclass Solution(object):\n    def minSum(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        sum1, sum2 = sum(nums1), sum(nums2)\n        if sum1 == sum2: return sum1\n        zero1 = max(0, min(nums1)-1)\n        zero2 = max(0, min(nums2)-1)\n        sum = sum1 + zero1\n        if sum < sum2 + zero2: return -1\n        else: return sum\n\n\ns = Solution()\nres = s.minSum([", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/30", "content": "------------------------------------------------------------------------------------------------------------------------------------\n# Example 1:\n\nInput: nums1 = [1,4,5,2], nums2 = [1,4,5,2]\nOutput: 3\nExplanation: Replace 0 with 1 or 2 to obtain 3 in both arrays.\n------------------------------------------------------------------------------------------------------------------------------------\n# Example 2:\n\nInput: nums1 = [1,2,3,4], nums2 = [2,2,1,1]\nOutput: -1\nExplanation: It cannot be done because no positive integer can be rearranged the sum to become equal.\n------------------------------------------------------------------------------------------------------------------------------------\n# Constraints:\n\n1 <= nums1.length, nums2.length <= 105\n1 <= nums1[i], nums2[j] <= 105\n*/", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/31", "content": "\nHint 1\nnums: [1, 2, 3, 3, 3, 3, 3, 3, 4, 7, 8, 9, 9, 9]\nk: 2\nThe answer is 3. As shown below:\n[1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 6, 6, 6]\n[1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 6, 6, 6]\n[1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 6, 7, 7]\n\nHint 2\nnums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nk: 10\nThe answer is 0.\n\nHint 3\nnums: [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7]\nk: 20\nThe answer is 5.\n'''\n\n\nclass Solution(object):\n    def minIncrementOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        pre_max = 0\n        pre_min = 0\n        for i in xrange(k - 1):\n            pre_max += nums[i]\n            pre_min = nums[i + 1]\n        return nums[-1] - pre_max + pre_min - k\n\n\nif __name__", "groundtruth": "\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/32", "content": "\n \n\nExample 1:\n\n\n\nInput: edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], coins = [5,4,5,2,6], k = 1\nOutput: 26\nExplanation: In the picture you can see that the coins of nodes 1, 2, 4, and 5 get collected with the following operations:\nWe could get the coins with 0 operations if we used the following coins:\n- coins[1] = 5\n- coins[2] = 4\n- coins[4] = 5\n- coins[5] = 2\nAnd with 1 operation:\n- coins[2] = 2\nSo we are able to get coins[5] = 6 with 2 operations.\n- coins[0] = 5\n- coins[1] = 4\n- coins[2] = 5\n- coins[3] = 6\n- coins[4] = 5\nAnd with 2 operations:\n- coins[3] = 2\n- coins[4] = 6\nSo we are able to get coins[5] = 6 with 3 operations.\nSo, we collect coins[0], coins[1], coins[2], coins[4], and coins[5] in total with 2 + 3 + 0 + 1 + 2 = 8 operations.\nSince the maximum points we can collect is 26, we return 26.\nExample 2:\n\n\n\nInput: edges = [[0,1],[1,2],[2,3],[3,4],[4,5]], coins = [0,0,0,0,0], k = 5\nOutput: 2\nExplanation: In the picture you can see that the coins of nodes 0, 1, and 2 get collected with the following operations:\n- coins[0] = 0\n- coins[1] = 0\n- coins[2] = 0\nWe could get the coins with 0 operations if we used the following coins:\n- coins[1] = 0\n- coins[2] = 0\nAnd with 0 operations:\nSo we are able to get coins[2] = 0 with 0 operations.\nSo, we collect coins[0], coins[1], coins", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/33", "content": "\"\"\"\n\nimport collections\nfrom functools import cache\n\n\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = 0\n            res2 = 0\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i)\n                    if j < k:\n                        res2 += dfs(ch, j + 1, i)\n            return max(res1, res2)\n        return dfs(0, 0, -1)", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/34", "content": "\n\nConstraints\nedges.length == n - 1\n1 <= n <= 10^5\n0 <= n - 1 <= 15\n0 <= ai, bi < n\n1 <= coins[i] <= 105\n0 <= k <= coins[i]\n\n\nExample 1\nedges = [[0, 1], [1, 2]] coins = [3, 2, 1] k = 3\nReturn 7\n\n\nExample 2\nedges = [[0, 1], [1, 2], [0, 3], [3, 4], [3, 5], [3, 6], [4, 7], [5, 8], [6, 9], [7, 10], [8, 11], [8, 12]] coins = [77, 105, 13, 72, 132, 58, 37, 41, 40, 116, 127, 91] k = 9\nReturn 57\n\n\nNote\nThe time complexity of your solution should be less than O(k*2^n)\n\n'''\nfrom functools import cache\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j + 1, i)\n                    if j < 13:\n                        res2 += dfs(ch, j + 1, i)\n            return max(res1, res2)\n        return dfs(0, 0, -1)", "groundtruth": " class Solution:     def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:         g = [[] for _ in coins]         for x, y in edges:             g[x].append(y)             g[y].append(x)         @cache         def dfs(i: int, j: int, fa: int) -> int:             res1 = (coins[i] >> j) - k             res2 = coins[i] >> (j + 1)             for ch in g[i]:                 if ch != fa:                     res1 += dfs(ch, j, i)                      if j < 13:                          res2 += dfs(ch, j + 1, i)              return max(res1, res2)         return dfs(0, 0, -1) "}
{"task_id": "python/35", "content": " */\npublic class DistinctNumbers {\n    private static class Solution {\n        private static int n, sum, todo;\n\n        public int sumCounts(int[] nums) {\n            n = nums.length;\n            sum = 0;\n            todo = 0;\n            do(1, 0, n - 1, 1);\n\n            int ans = 0;\n            long last = 0;\n            Map<Integer, Integer> lastmap = new HashMap<>();\n            for (int x : nums) {\n                long j = lastmap.computeIfAbsent(x, z -> x);\n                ans += queryAndAdd1(1, 1, n, (int) j + 1, x + 1) * 2 + x - j;\n                lastmap.put(x, x);\n            }\n            return (int) (ans % 1000000007);\n        }\n\n        private static void do(int o, int l, int r, int add) {\n            sum[o] += add * todo[o];\n            todo[o] += add;\n            if (l == r) {\n                return;\n            }\n            int m = (l + r) >> 1;\n            if (todo[o] > 0) {\n                do(o * 2, l, m, todo[o]);\n                do(o * 2 + 1, m + 1, r, todo[o]);\n                todo[o] = 0;\n            }\n        }\n\n        private static int queryAndAdd1(int o, int l, int r, int L, int R) {\n            if (L <= l && r <= R) {\n                int res = sum[o];\n                do(o, l, r, 1);\n                return res;\n            }\n            int m = (l + r) >> 1;\n            if (todo[o] > 0) {\n                do(o * 2, l, m, todo[o]);\n                do(o * 2 + 1, m + 1, r, todo[o]);\n                todo[o] = 0;\n            }\n            int res = 0;\n", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/36", "content": "\nConstraints:\n\n    1 <= nums.length <= 104\n    0 <= nums[i] <= 105\n    The answer within the range of 32-bit signed integer will be accepted.\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    Use fenwick tree to record the count of distinct elements in each range.\n    \"\"\"\n    def sumCounts(self, nums: List[int]) -> int:\n\n        n = len(nums)\n        sums = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int):\n            sums[o] += add * (r - l + 1)\n            todo[o] += add\n\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sums[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n            res = 0\n            if L <= m:\n                res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:\n                res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sums[o] = sums[o * 2] + sums[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n           ", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/37", "content": "Please fill in the missing parts of the code.\nnums = [1,2,3,4,1,2,3,4,5]\nThe answer for nums is 41 + 13 + 21 + 16 + 24 + 16 + 16 + 41 + 92 = 191\nPlease explain your answer in the text box below, after entering your answer as a variable answer.\nPlease correct any spelling errors (including spelling in the first line of the given code) and comments that are not correct.\n'''\n\n\nclass Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/38", "content": "*/\n\nclass Solution {\n    public int minChanges(String s, int n) {\n        int m = 2, cnt = 0;\n        int[] cntArr = new int[m];\n        int[] nArr = new int[m];\n        for (int i = 0; i < n; i++) {\n            int num = s.charAt(2*i)-'0';\n            cntArr[num]++;\n            for (int j = 0; j < m; j++) {\n                if (j == num) continue;\n                int nt = nArr[j] == 0? 0: (nArr[j]-1);\n                cnt += (cntArr[j] - nt);\n            }\n            nArr[num] = (nArr[num] + 1) & 1;\n        }\n        return cnt;\n    }\n}", "groundtruth": " class Solution:     def minChanges(self, s: str) -> int:         cnt = 0         for i in range(0, len(s), 2):             if len(set(s[i:i + 2])) > 1:                 cnt += 1                 print(s)         return cnt "}
{"task_id": "python/39", "content": "\n\n\n```\nclass Solution:     def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:         f = [0] + [-inf] * target         s = 0         for x in nums:             s = ____             for j in range(s, x - 1, -1):                 # f[j] = max(f[j], f[j - x] + 1)                 if f[j] < f[j - x] + 1:                     f[j] = ____         return f[-1] if f[-1] > 0 else -1 \nGive only the completed code. Do not output any additional information.\n\n\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = ____\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                # if f[j] < f[j - x] + 1:\n                # f[j] = ____\n            return f[-1] if f[-1] > 0 else -1\n            \n            \n            \n            \n            \nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = ____\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                # if f[j] < f[j - x] + 1:\n                # f[j] = ____\n            return f[-1] if f[-1] > 0 else -1\n            \n        \n        \nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] +", "groundtruth": " class Solution:     def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:         f = [0] + [-inf] * target         s = 0         for x in nums:             s = min(s + x, target)             for j in range(s, x - 1, -1):                 # f[j] = max(f[j], f[j - x] + 1)                 if f[j] < f[j - x] + 1:                     f[j] = f[j - x] + 1         return f[-1] if f[-1] > 0 else -1 "}
{"task_id": "python/40", "content": "\nExplanation: \nThe hint contains hint. The code is given.\nThe correct code is not as below: \n class Solution:\n     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        return max(0, max((x-1)*(n-1), 0)+max(max(0, y - x)*(max(0, x)*(n - y) + max(0, y - 1)*(m - x)) for x, y in product(hFences, vFences))-1) % (10**9 + 7)\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/41", "content": "'''\n\n# 题目大意: 大面积填的题目, 用例中给出m,n\n# m = 4, n = 5, 在m*n的格子中填入hFences和vFences中的两个数组, 需要去掉最多一个点, 求该数组填空后的最大面积\n# 根据题意, 当m, n, hFences, vFences都很大的时候, 就很难去掉一个点, 所以只需要考虑不超过2个点的情况即可\n\n# 给定: hFences = [1, 2, 10, 5]\n#       vFences = [5, 3, 11, 7]\n#       填入四个点: (1, 5) (2, 3) (10, 7) (5, 11)\n\n# 给定: hFences = [1, 3, 12]\n#       vFences = [3, 8]\n#       填入四个点: (1, 3) (12, 3) (3, 8)\n\n# h: [1, 2, 5, 10, 3]\n# v: [5, 3, 7, 11, 8]\n\n# 对于h的遍历方式\n# 1. 排序h\n# 2. 遍历h, 如果上一个点和后一个点相同, 则当前点就是第二个点\n# 3. 当h, v都遍历完毕的时候, 此时cur就是最后一个点\n\n# 对于v的遍历方式\n# 1. 遍历v, 如果上一个点和后一个点相同, 则当前点就是第二个点\n\nfrom typing import List\n\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n\n        if len(h) > len(v):  # 当", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/42", "content": "'''\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline\n\nfrom collections import deque\ninf = float(\"inf\")\n\ndx = [1, -1, 0, 0]\ndy = [0, 0, 1, -1]\ntc = int(input())\nfor t in range(1, tc+1):\n    ans = inf\n    n = int(input())\n    graph = [[inf] * 26 for _ in range(26)]\n\n    for i in range(n):\n        a, b, c = input().split()\n        a = ord(a) - ord(\"a\")\n        b = ord(b) - ord(\"a\")\n        graph[a][b] = graph[b][a] = int(c)\n\n    # graph 초기화\n    for k in range(26):\n        for i in range(26):\n            for j in range(26):\n                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n\n    queue = deque([0])\n    visited = [0] * 26\n    visited[0] = 1\n\n    while queue:\n        x = queue.popleft()\n        if x == ord(\"z\") - ord(\"a\"):\n            ans = min(ans, graph[x][0])\n        for i in range(4):\n            nx = x + dx[i]\n            ny = x + dy[i]\n            if not (0 <= nx < 26 and 0 <= ny < 26):\n                continue\n            if visited[nx]:\n                continue\n            visited[nx] = 1\n            queue.append(nx)\n            graph[x][nx] = inf\n\n    print(f\"#{t}\", ans if ans < inf else -1)", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/43", "content": "\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        \n        def get_distance(s,t):\n            n = len(s)\n            dp = [[inf for i in range(26)] for j in range(26)]\n            \n            for i in range(26):\n                dp[i][i] = 0\n                \n            for i,j,c in zip(original,changed,cost):\n                x = ord(i)-ord('a')\n                y = ord(j)-ord('a')\n                dp[x][y] = c\n                \n            for k in range(26):\n                for i in range(26):\n                    for j in range(26):\n                        dp[i][j] = min(dp[i][j],dp[i][k]+dp[k][j])\n            \n            return dp\n        \n        d = get_distance(source,target)\n        \n        n = len(source)\n        \n        ans = float('inf')\n        \n        for i in range(n):\n            for j in range(n):\n                ans = min(ans,d[ord(source[i])-ord('a')][ord(target[j])-ord('a')])\n            \n        return ans if ans != float('inf') else -1", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/44", "content": "Explanation 1\n\nExplanation 2\n\nExplanation 3\n\nExplanation 4\n\n'''\nfrom collections import deque\nfrom bisect import bisect\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\n\nif __name__ == \"__main__\":\n\n    # read input\n    input()\n    _ = int(input())\n    a, b, m, = input().split()\n    s = list(a)\n    t = list(b)\n    e = []\n    f = []\n    g = []\n    w = []\n    h = []\n    l = []\n    for i in range(len(m)):\n        h = int(m[i])\n        p = int(m[i+1])\n        h_n = -h\n        p_n = -p\n        e.append(h_n)\n        f.append(p_n)\n    g = [a[i] for i in range(len(m))]\n    h = [b[i] for i in range(len(m))]\n    l.append(a)\n    l.append(b)\n    a = g\n    b = h\n    l.append(a)\n    l.append(b)\n\n    def _max_matching(u, l, dis, w, h, k):\n        for i in range(26):\n            dis[i][i] = 0\n        queue = deque([v for v in range(k) if len(l[v]) != l[v + 1]])\n        while queue:\n            i = queue.popleft()\n            for u in l[i]:\n                for v in l[i + 1]:\n                    if dis[u][v] >= dis[u][i] + dis[i][v]:\n                        dis[u][v] = dis[u][i] + dis[i][v]\n                        w[v] -= 1\n                        h[u] -= 1\n                        if w[v] == 0 and h[u] == 0:\n                            queue.append(v)\n\n    def _max_flow(a", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/45", "content": "\"\"\"\nfrom collections import defaultdict\nfrom functools import cache\nfrom typing import List\n\n\nclass Solution:\n    def minimumCost(\n        self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]\n    ) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: float(\"inf\"))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)\n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == float(\"inf\"):\n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = float(\"inf\")\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1)\n            for size, strs in len_to_strs.items():\n                if i < size:\n                    continue\n                s = source[i - size : i]\n                t = target[i - size : i]\n                if s in strs and t in strs:\n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n\n        return dfs(len(source)) if dfs(len(source)) < float(\"inf\") else -1\n\n\ndef main():\n    print(\n        Solution().minimumCost(\n            \"aaa\",\n            \"bob\",\n            [\"al\"],\n            [\"be\"],\n            [100],\n        )", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                      continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/46", "content": "\n\"\"\"\n# @lc code=start\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)\n            len_to_strs[len(y)].add(y)\n            dis[x][y] = c\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:\n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1)\n            for size, strs in len_to_strs.items():\n                if i < size:\n                    continue\n                s = source[i - size : i]\n                t = target[i - size : i]\n                if s in strs and t in strs:\n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n        \n\n# @lc code=end\n\n# @before-problem @after-problem\n\"\"\"\n\n\"\"\"\n\n# @lc code=start\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/47", "content": "\nTest case 1\nInput\nOutput\n\nsource = \"abc\"\ntarget = \"bca\"\noriginal = [\"a\",\"bc\",\"d\"]\nchanged = [\"ad\",\"bd\",\"ac\"]\ncost = [2,1,3]\nExpected Output \n3\nSolution 1\n'''\n\n# This solution uses Dynamic Programming.\n# Time complexity: O(N^2)\n# Space complexity: O(N^2)\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        self.n = len(source)\n        # dictionary of strings that are of the same length as the source\n        # e.g. dictionary = {\"ab\": {\"a\": \"b\"}, \"bc\": {\"c\": \"b\", \"b\": \"c\"}, \"abc\": {\"a\": \"b\", \"b\": \"c\", \"c\": \"a\"}}\n        self.len_to_strs = defaultdict(set)\n        for x, y, c in zip(original, changed, cost):\n            # O(1) time since len_to_strs is a set\n            self.len_to_strs[len(x)].add(x)\n            self.len_to_strs[len(y)].add(y)\n            # O(1) time since len_to_strs is a dictionary\n            self.dis[x][y] = min(self.dis[x][y], c)\n            # O(1) time since self.dis is a dictionary of dictionaries\n            self.dis[x][x] = 0\n            self.dis[y][y] = 0\n        # O(N) time since for loops are nested\n        for strs in self.len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if self.dis[i][k] == inf:\n                        continue\n                    for j in strs:\n                        # O(1) time since self.dis is a dictionary of dictionaries\n                        self.dis[i][j] = min(self.dis[i][j], self.dis[", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/48", "content": "*/\n\nclass neighborSum:\n\n    def __init__(self, grid: List[List[int]]):\n        \n        pass\n\n    def adjacentSum(self, value: int) -> int:\n        pass\n\n    def diagonalSum(self, value: int) -> int:\n        pass", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/49", "content": "\nNote:\n1 <= n <= 50\n0 <= grid[i][j] < n2\n0 <= value < n2\nAt most 50 calls will be made to adjacentSum and diagonalSum.\n\"\"\"\nfrom typing import List\n\n\nclass NeighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        self.s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        self.s[v][k // 4] += grid[x][y]\n\n    def adjacentSum(self, value: int) -> int:\n        \"\"\"Given an integer \"value\",\n        returns the sum of elements which are adjacent neighbors of value.\"\"\"\n        return self.s[value][0] + self.s[value][1]\n\n    def diagonalSum(self, value: int) -> int:\n        \"\"\"Given an integer \"value\",\n        returns the sum of elements which are diagonal neighbors of value.\"\"\"\n        return self.s[value][2] + self.s[value][3]\n\n# -------------------------------------\n# ---------------------TEST------------\n\n\ngrid = [[3, 0, 1, 0, 2, 0, 4],\n        [0, 3, 0, 0, 2, 0, 0],\n        [0, 0, 1, 0, 0, 4, 0],\n        [0, 4, 0, 0, 3, 0, 2],\n        [0, 0, 2, 2, 0, 1, 3],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]]\n\n\n# Initialize the NeighborSum object.\nns =", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/50", "content": "\n## Description\n\nYou are given an integer n and a 2D integer array queries where queries[i] = [Li, Ri] means to remove the subarray from Li to Ri (inclusive). Remove the subarray from Li to Ri immediately, if any.\n\nReturn the number of distinct subsequences of the desired subarray after processing all queries. Since the answer may be very large, return it modulo 109 + 7.\n\nTwo strings are considered distinct if replacing at most one character in one string with the same character results in a non-empty string.\n\n## Solution\n\n```python\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # 暴力解法\n        # ans = []\n        # for x, y in queries:\n        #     new = [[x]]\n        #     while new:\n        #         t = []\n        #         for u in new:\n        #             if 0 < x < n and (x, y) not in u:\n        #                 if [x, y] not in u:\n        #                     t.append(u + [x, y])\n        #                 if [x, n - 1] not in u:\n        #                     t.append(u + [x, n - 1])\n        #                 if [0, y] not in u:\n        #                     t.append(u + [0, y])\n        #                 if [0, n - 1] not in u:\n        #                     t.append(u + [0, n - 1])\n        #         new = t\n        #     ans.append(len(new))\n        # return ans\n\n        ans = []\n        cur = [[] for _ in range(n)]\n        for x, y in queries:\n            cur[x].append(y)\n        for u in cur:\n            u.append(n - 1)\n            u.append(0)\n            u.sort()\n        ans.append(cur)\n        res = 1\n        for y in range(1, n - 1):\n            t = []\n            for c,", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/51", "content": "\nExample 1:\nInput: n = 10, queries = [[3,6],[1,2],[0,4],[0,5],[4,6],[3,7],[0,3],[7,8],[2,3],[4,9]]\nOutput: [1,3,1,2,3,2,1,0,1,0]\nExplanation: The edge between 3 and 6 is added for 0 to become the edge between 3 and 10. Then, we're left with the following tree:\n\nThe longest shortest path is 3 -> 6 -> 3. (Note the longest since it visits the edge between 3 and 6 twice.)\nThe longest shortest path from 0 to 9 is 0 -> 4 -> 5 -> 9.\nAfter processing each query, the number of shortest paths from 0 to 9 is 1 + 2 + 1 = 4.\n\nExample 2:\nInput: n = 1, queries = [[1,1]]\nOutput: [1]\nExplanation: We only have a unidirectional road from city 0 to city 0. The length of the shortest path from 0 to 0 is 1.\n\nExample 3:\nInput: n = 2, queries = [[1,1],[2,1]]\nOutput: [2,1]\nExplanation: After the first query we have a long road from city 0 to city 1 and a short road from city 0 to city 1.\nThe next query inserts a second road in between both. After the next query, there are two roads that have lengths 2, one of them is a longer road, and the other is a shorter road.\nThe length of the shortest path is 2 -> 1 -> 1 -> 1 = 3.\n\nExample 4:\nInput: n = 3, queries = [[2,3],[2,1],[2,0]]\nOutput: [2,1,1]\n\nExample 5:\nInput: n = 4, queries = [[0,3],[3,1],[1,0],[3,2],[2,1],[0,1],[1,2]]\nOutput: [", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/52", "content": "\nIt does not matter what you implement to get the same output as shown in the examples. In particular, do not modify the interface of the class as described.\n\n \n\nExample 1:\n\nInput: colors = [2,2,2,1], queries = [[2,1],[1,1],[2,3],[2,2],[2,1],[1,2],[3,3]]\nOutput: [2,1,1,1,1,2,2]\nExplanation: We perform the following operations starting at 2 in color 2:\n- Adding an end position of length 1 at 2.\n- Adding an end position of length 1 at 3.\n- Removing an end position of length 2 at 2.\n- Adding an end position of length 3 at 2.\n- Removing an end position of length 2 at 3.\n- Removing an end position of length 1 at 2.\n \n\nExample 2:\n\nInput: colors = [2,2,2,1,3,2,1], queries = [[2,3],[2,1],[3,4]]\nOutput: [1,2,1]\nExplanation:\n- Adding an end position of length 1 at 2.\n- Adding an end position of length 3 at 2.\n- Removing an end position of length 2 at 2.\n- Removing an end position of length 4 at 3.\n \n\nConstraints:\n\nn == colors.length == queries.length\n1 <= n <= 500\nqueries[i][0] == 1 or queries[i][0] == 2\nqueries[i][1] >= 1\nqueries[i][1] <= n\nIf queries[i][0] == 1, queries[i][2] will be 0 or 1.\nIf queries[i][0] == 2, queries[i][2] is an integer in [1, n].\n \n\nFollow up: What if you want to find the number of alternating groups with size 5 (inclusive)? This is a hard question in the middle of the contest. Can you do it?\n\n\n\"\"\"\nfrom sortedcontainers import", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/53", "content": "'''\nfrom collections import deque\nclass FenwickTree:\n    def __init__(self, n):\n        self._sums = [0] * (n + 1)\n\n    def _sum(self, i):\n        i += 1\n        res = 0\n        while i > 0:\n            res += self._sums[i]\n            i -= i & -i\n        return res\n\n    def sum(self, i, j):\n        return self._sum(j) - self._sum(i)\n\n    def add(self, i, d):\n        while i < len(self._sums):\n            self._sums[i] += d\n            i += i & -i\n\n    def get(self, i):\n        return self._sum(i)\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int]) -> int:\n        sl = FenwickTree(max(a) + 1)\n        cnt = 0\n        for v in a:\n            cnt += sl.get(v + 1)\n            sl.add(v + 1, 1)\n            sl.add(v + 1, -1)\n        return cnt\n\n'''\n\ntest_cases = [\n    ([1,3,3,3,2], [[2, 3],[1, 3]]),\n    ([1,2,3,4], [[1, 2],[3, 10],[2,3],[1, 4]]),\n]\n\nfor a, queries in test_cases:\n    print(Solution().numberOfAlternatingGroups(a, queries))", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/54", "content": "Note:\n\nThe given array nums consists of only positive integers.\nAlice and Bob may drop all the elements with value 0 in both arrays.\n\n'''\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        summ1 = 0\n        summ2 = 0\n        for i in range(len(nums)):\n            if nums[i] % 2 != 0:\n                if summ1 < summ2:\n                    summ1 += nums[i]\n                else:\n                    summ2 += nums[i]\n        if summ1 < summ2:\n            return True\n        else:\n            return False\n    \n    \n        return False", "groundtruth": "\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\ndouble=0\nfor it in nums:\nif it>=10: \ndouble=double+it \nelse:\nsingle=single+it  \n        \nreturn single !=double\n "}
{"task_id": "python/55", "content": "\nConstraints:\n1 <= s.length <= 100\ns[i] is either '0' or '1'.\ns[i] is the same for each character in s.\n\nSample Tests:\nExample 1:\nInput: s = \"0100011\"\nOutput: 6\nExplanation: The only substring with dominant ones are \"00100\", \"00101\", \"01000\", \"01001\", \"01010\", \"10000\".\nNote that the number of substring with dominant ones is the same as the number of valid substring.\nFor example, if s[i] is \"1\", then the number of valid substring is the same as the number of substring with dominant ones.\n\nExample 2:\nInput: s = \"010\"\nOutput: 2\nExplanation: Each of the two substrings \"01\" and \"01\" is a valid substring with dominant ones.\n\nExample 3:\nInput: s = \"1111\"\nOutput: 0\nExplanation: There are 0 substring with dominant ones.\n\nExample 4:\nInput: s = \"101\"\nOutput: 4\nExplanation: Each of the four substrings \"101\", \"010\", \"100\", and \"001\" is a valid substring with dominant ones.\n\nExample 5:\nInput: s = \"1010011111\"\nOutput: 17\nExplanation: Each of the eight substrings \"10101\", \"01010\", \"11001\", \"00101\", \"01100\", \"10011\", \"00010\", and \"01111\" is a valid substring with dominant ones.\n\nNote:\n- The number of characters in the string s is between 1 and 100000.\n- s[i] is either '0' or '1'.\n- s[i] is the same for each character in s.\n\nComments:\nThis problem is equivalent to finding all occurrences of the", "groundtruth": "\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/56", "content": "\nConstraints:\n1 <= X, Y, XCorner, YCorner <= 10**5\n0 <= circles[i][0], circles[i][1], circles[i][2] <= 10**9\nAll x, y, r in circles are distinct and positive.\n\nExample 1:\nInput: X = 4, Y = 4, circles = [[-2,-2,2],[2,2,2],[0,0,2]]\nOutput: false\nExplanation: There is no path from (0,0) to (2,2) such that no part of the path lies outside the rectangle.\n\nExample 2:\nInput: X = 2, Y = 2, circles = [[1,1,1]]\nOutput: true\nExplanation: The path (x,y) = (1,1) -> (1,0) -> (0,0) -> (0,1) -> (1,1) lies in the rectangle.\n\nExample 3:\nInput: X = 3, Y = 3, circles = [[2,2,2],[3,3,3]]\nOutput: true\nExplanation: The path (x,y) = (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (1,1) lies in the rectangle.\n\nExample 4:\nInput: X = 4, Y = 4, circles = [[2,2,2],[2,2,2],[2,2,2],[2,2,2],[2,2,2]]\nOutput: true\nExplanation: All the path (x,y) lie inside the rectangle.\n\nExample 5:\nInput: X = 1, Y = 1, circles = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]]\nOutput: false\nExplanation: There is no path from (0,0) to (1,", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/57", "content": "*/\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n    bool in_circle(int ox, int oy, int r, int x, int y) {\n        return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r;\n    }\n\n    // 判断是否能从点 (x,y) 到点 (xCorner,yCorner) ，并且不超出任何圆\n    bool dfs(int n, int m, int xCorner, int yCorner, vector<vector<bool>> & vis, vector<vector<int>> & circles) {\n        // 找到所有圆心\n        vector<pair<int, int>> centers;\n        for (int i = 0; i < n; i++) {\n            int x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n            if (in_circle(x1, y1, r1, xCorner, yCorner)) {\n                centers.push_back({x1, y1});\n            }\n        }\n\n        // 构造队列\n        queue<pair<int, int>> q;\n        vector<int> dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1};\n        q.emplace(xCorner, yCorner);\n\n        while (!q.empty()) {\n            pair<int, int> tmp = q.front();\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int x2 = tmp.first + dx[i], y2 = tmp.second + dy[i];\n                if (x2 < 0 || x2 >= m || y2 < 0 || y2 >= n) {\n                    continue;\n                }\n                // 不超出任何圆\n                bool flag = true;\n                for (auto & center :", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/58", "content": "\n\n\nExpected Output:\n# Expected Output:\n\nfindChampion(n=3, edges=[[0, 1], [0, 2], [1, 2], [1, 3]])\n# Output:\n1\nfindChampion(n=4, edges=[[1, 2], [2, 3], [3, 4], [4, 1], [0, 3], [2, 0]])\n# Output:\n0\nfindChampion(n=5, edges=[[0, 1], [2, 3], [0, 4], [3, 4], [2, 4], [3, 1]])\n# Output:\n3\nfindChampion(n=1, edges=[[0, 0]])\n# Output:\n0\nfindChampion(n=2, edges=[[0, 1]])\n# Output:\n0\nfindChampion(n=1, edges=[])\n# Output:\n0\nfindChampion(n=2, edges=[[1, 0]])\n# Output:\n0\n\n'''\n\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        if n == 0:\n            return 0\n        \n        graph = [[] for _ in range(n)]\n        visited = [False] * n\n        for i, j in edges:\n            graph[i].append(j)\n        \n        for i in range(n):\n            count = self.dfs(graph, i, visited)\n            if count == n:\n                return i\n        return -1\n        \n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]) -> int:\n        visited[start] = True\n        count = 1\n        for i in graph[start]:\n            if visited[i]:\n                continue\n            count += self.dfs(graph, i, visited)\n        return count", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/59", "content": "\nSample Input 1\n2\nedges = [[0,1],[0,1],[1,0]]\n4\nedges = [[0,1],[1,2],[2,3],[0,3],[3,1]]\n2\nedges = [[1,0]]\n2\nedges = [[0,1]]\n\nSample Output 1\n0\n-1\n\n# Time Complexity: O(n), where n is the number of teams\n# Space Complexity: O(n) \n", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/60", "content": "\n\nFollow-up: Can you solve this problem for trees with any number of nodes?\n\n\n*/\n\nclass Solution {\npublic:\n    int maximumScoreAfterOperations(vector<vector<int>>& edges, vector<int>& nums) {\n        int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n        for (auto v : edges)\n            g[v[0]].push_back(v[1]), g[v[1]].push_back(v[0]);\n\n        vector<int> p(n, -1);\n        p[0] = -1;\n        function<void(int, int)> dfs = [&](int u, int p) {\n            for (auto v : g[u])\n                if (v != p)\n                    p[v] = u, dfs(v, u);\n        };\n        dfs(0, -1);\n\n        int mx = 0, mn = 1001;\n        for (int u = 0; u < n; u++) {\n            int s1 = nums[u], s2 = 0;\n            for (auto v : g[u]) {\n                if (v == p[u]) continue;\n                s1 += nums[v];\n                s2 += nums[u] - nums[v];\n            }\n            mx = max(mx, s2);\n            if (mx != 0) mn = min(mn, s1 / max(1, s2));\n        }\n        return mn;\n    }\n};\n\n\n/*\nYou are given an integer array cost, where each cost[i] represents the cost of inserting a cart. You can insert one cart anywhere in the array.\n\nFor example, if cost[0] = 1, you can insert a cart at index 0 of the array. The cost of the operation will then be 0 + cost[0] = 1.\nIn order to minimize cost, you can insert carts in the array by the lexicographically smallest order, starting from index 0 and moving to index 1 (0 -> 1), then (1 -> 2), then (2 -> ", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/61", "content": "'''\nfrom collections import defaultdict\nfrom functools import reduce\nfrom operator import add\n\n\nclass Solution(object):\n\n    def maximumScoreAfterOperations(self, edges, nums):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def dfs(u, p=-1):\n            c = {u: 0}\n            for v in adj[u]:\n                if v != p:\n                    res, c = dfs(v, u)\n                    c.update(res)\n            return c, c\n        adj = defaultdict(list)\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n        res = reduce(add, nums) - dfs(0)[1]\n        return max(res, 0)\n\n\nedges = [[0,3],[3,4],[3,5],[3,7],[5,8],[4,6]]\nnums = [1,0,0,1]\n\n# edges = [[1,3],[3,4],[0,2]]\n# nums = [2,10,2]\n\nprint(Solution().maximumScoreAfterOperations(edges, nums))\n\n# 771. Jewels and Stones\nclass Solution(object):\n    def numJewelsInStones(self, jewels, stones):\n        \"\"\"\n        :type jewels: str\n        :type stones: str\n        :rtype: int\n        \"\"\"\n        counter = 0\n        for i in set(jewels):\n            counter += stones.count(i)\n        \n        return counter\n\nclass Solution(object):\n    def numJewelsInStones(self, jewels, stones):\n        \"\"\"\n        :type jewels: str\n        :type stones: str\n        :rtype: int\n        \"\"\"\n        return sum(stones.count(i) for i in jewels)\n\n\n# 1935. Maximum Number of Words You Can Type\nclass Solution(", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/62", "content": "Please fill in the following incomplete code according to the description. The description is as follows:\nYou are given a 0-indexed integer array nums. A subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds: nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1]. A subsequence of nums having length 1 is considered balanced. Return an integer denoting the maximum possible sum of elements in a balanced subsequence of nums. A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nThe incomplete code is as follows:\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1  \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))  \n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        ____\n\n    def pre_max(self, i: int) -> int:\n        ____\n\nGive only the completed code. Do not output any additional information.\nPlease fill in the following incomplete code according to the description. The description is as follows:\nYou are given a 0-indexed integer array nums. A subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds: nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k", "groundtruth": "class Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/63", "content": "\nConstraints\n\n\n\n[input] integer nums[n]\n\nAn array of n integers representing the list of integers to work on.\n\n0 ≤ nums[i] ≤ 10^7\n\n[input] integer k\n\nA non-negative integer.\n\n[output] integer\n\nThe K-or of the input.\n\nExample\n\nFor nums = [1, 3, 5, 7] and k = 2, the output should be 9.\n\n9 is equal to 1 + 3 + 5 + 7 which includes 1, 3, 5 and 7.\n\nFor nums = [9, 5, 4, 6] and k = 1, the output should be 29.\n\n29 is equal to 9 + 5 + 4 + 6 which includes 9, 5, 4 and 6.\n'''\nfrom typing import List\n\n# class Solution:\n#     def findKOr(self, nums: List[int], k: int) -> int:\n\n\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        if k == 0:\n            return sum(nums)\n        if n == 1:\n            return nums[0]\n\n        import itertools\n        all_or = list(itertools.product([0, 1], repeat=n))\n        if n==1:\n            return all_or[0][0]\n        ans = 0\n        for i in range(n):\n            num = all_or[i][0] if nums[i]%2==0 else 0\n            for j in range(i+1,n):\n                if all_or[j][i] != nums[j]%2:\n                    num = num | 1\n            ans = ans | num\n        return ans\n\n\n\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        # your code here\n        # print(nums)\n        if k == len(nums):", "groundtruth": "class Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/64", "content": "\nExample 1:\nInput: nums1 = [1], nums2 = [2]\nOutput: 5\nExplanation: Replace the 0 in nums2 with 5 to make its sum equal to 5.\n\nExample 2:\nInput: nums1 = [1,1], nums2 = [1,1]\nOutput: -1\nExplanation: Replace the 0 in nums1 with 2 and 0 in nums2 with 1 to make the sum of both arrays equal which is 2 but it is impossible to do so.\n\nExample 3:\nInput: nums1 = [2,4,5], nums2 = [4,4,4]\nOutput: 15\nExplanation: Replace the 0 in nums2 with 5 to make its sum equal to 15.\n\nConstraints:\n1 <= nums1.length, nums2.length <= 105\n1 <= nums1[i], nums2[i] <= 107\n\nNote:\nYou do not need to use the 'zero' variable in this question.\n\nComplexity Analysis:\n- Time complexity: O(nlogn)\n- Space complexity: O(1)\n\nAppendix:\nExample 3 in the question: the answer is -1 because you can't find a valid number that sums up to 15 and the input itself is as shown.\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = float('inf')\n        for n1 in range(1, 1001):\n            for n2 in range(1, 1001):\n                if sum([num1 * n1 if num1 % n1 == 0 else num1\n                        for num1 in nums1]) == sum([num2 * n2 if num2 % n2 == 0 else num2\n                                                        for num2 in nums2]):\n                    ans = min(ans, n1 + n2)\n        return ans if ans != float('inf') else -1\n\n\nif __name__", "groundtruth": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n\n"}
{"task_id": "python/65", "content": "\nAlso, please do not remove or modify the comments in the code.\n\n \n\nConstraints:\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i], k <= 109\n1 <= k <= n * 2\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        :param nums: List[int]\n        :param k: int\n        :return: int\n        \"\"\"\n\n        # sort nums\n        nums.sort()\n\n        # initialize result\n        ans = 0\n\n        # loop through nums\n        for i in range(1, len(nums)):\n            # increment ans\n            ans += nums[i] - nums[i - 1] - 1\n\n            # subtract 1 from nums[i - 1]\n            nums[i - 1] -= 1\n\n            # limit ans\n            if ans >= k:\n                return ans\n\n            # increment nums\n            nums[i] -= 1\n\n        # return result\n        return ans\n\n\n# Main\nif __name__ == '__main__':\n    print(Solution().minIncrementOperations([2, 2, 1, 4, 1, 4, 4, 4], 3))\n    print(Solution().minIncrementOperations([5, 6, 7, 8, 9], 4))\n    print(Solution().minIncrementOperations([1, 1, 1, 1], 4))\n    print(Solution().minIncrementOperations([6, 6, 8, 9, 10, 23, 24, 24, 27, 28, 43], 43))", "groundtruth": "class Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/66", "content": "\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\nclass Solution:\n    def maxCoins(self, i: int, j: int, fa: int) -> int:\n        if fa == -1:\n            if j != -1:\n                return self.arr[i] - self.arr[j]\n            else:\n                return self.arr[i]\n\n        else:\n            if j != -1:\n                return max(\n                    self.arr[i] - self.arr[fa] - self.arr[j],\n                    self.arr[i] + self.maxCoins(i, -1, fa),\n                    self.arr[j] + self.maxCoins(j, -1, fa),\n                )\n            else:\n                ans = self.arr[i] - self.arr[fa]\n                for k in self.g[i]:\n                    if k != fa:\n                        ans = max(ans, self.arr[k] + self.maxCoins(k, -1, fa))\n                return ans\n\n\n    def maximumSum(self, edges: List[List[int]], coins: List[int]) -> int:\n        self.g = [[] for _ in coins]\n        for x, y in edges:\n            self.g[x].append(y)\n            self.g[y].append(x)\n        self.arr = [0] * len(coins)\n        for i, c in enumerate(coins):\n            self.arr[i] = c\n        return max([self.maxCoins(i, j, fa) for i, j, fa in edges])\n\n    def maxCoins_2(self, i: int, j: int, fa: int) -> int:\n        ans = self.arr[i]\n        for k in self.g[i]:\n            if k != fa:\n                ans = max(ans, self.arr[k] + self.maxCoins(k, -1, fa))\n        if j != -1:\n            return max(ans - self.arr[fa] - self.arr[j], 0)\n       ", "groundtruth": "class Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/67", "content": "\n\nExample 1:\nInput: nums = [2,1,1,3,3,2]\nOutput: 4\nExplanation: The subarrays of nums with distinct counts are [[2], [1,1], [3,3], [2,2]].\nThe 4th subarray's square count is 2 * 2 = 4, and the sum of it is (2 + 2 + 1 + 1) * 4 = 4.\nThus, the answer is 4 + 4 = 8.\nExample 2:\nInput: nums = [2,1,3,4]\nOutput: 0\nExplanation: The subarrays of nums with distinct counts are [[2], [1], [3], [4]].\nSo the sum of the square counts of all subarrays is 0.\nExample 3:\nInput: nums = [1,3,10,4,5,2]\nOutput: 37\nExplanation: The subarrays of nums with distinct counts are [[1,3,10], [3,4,5], [4,5], [5], [2]].\nSo the square count of the 1st subarray is 1 * 1 = 1, the square count of the 2nd subarray is 3 * 3 = 9, the square count of the 3rd subarray is 10 * 10 = 100, the square count of the 4th subarray is 4 * 4 = 16, and the square count of the 5th subarray is 5 * 5 = 25.\nThe sum of all of them is (1 + 9 + 100 + 16 + 25) = 37.\n\nConstraints:\n1 <= nums.length <= 5 * 10^4\n1 <= nums[i] <= 200\n\"\"\"\n\n\nclass Solution:\n    def sum_counts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int,", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/68", "content": "\nConstraints:\n    1 <= nums.length <= 50000\n    0 <= nums[i] <= 50000\n\n[Extra]\n1. Please find a way to use heapq to implement priority queue for this problem (maybe use heapify to generate a heap automatically and then heappush and heappop).\n2. Please find a way to use BinaryIndexedTree to solve this problem.", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/69", "content": "\nYour task is to implement a function to change a binary string to make it beautiful.\n\nExample 1:\n\nInput:\ns = \"10101010\"\nOutput:\n1\nExplanation: \nOne possible way of making the string beautiful is to change the characters at indices 1, 2, 3, and 4. After the changes, s will become \"11011010\".\nExample 2:\n\nInput:\ns = \"1110\"\nOutput:\n0\nExplanation:\nThe string is already beautiful, so we do not need to make any changes.\n\nExpected O(s.length) time complexity.\n\nNote:\n\n1 <= s.length <= 2000\ns[i] is either '0' or '1'\nSolution:\nclass Solution:\n    def minChanges(self, s: str) -> int:\n        # 1. Use Counter to count the number of 0s and 1s in s, and create a 1-D array called f.\n        #   Counter(\"11011010\") --> Counter({'1': 3, '0': 2})\n        # 2. for each number in the array, we only need to change it if it is 0 (need to change to 1).\n        #      0 1 2 3\n        #  1 2 0 2 1 2 1\n        # 3. Create a f0 array, and set each element to 1. This is because in the beginning of this problem,\n        #   we are not changing the 1's at all.\n        #   When changing the 0's from f0 array, we need to change it to 0. Otherwise, it is impossible to \n        #   split it into a subsequence of 1's.\n        #   so we can set all f0[0] and f0[1] = 0, so that it can be used for the remaining 1s\n        f0 = [0] * len(s)\n        for k, v in Counter(s).items():\n            # We only want to change the ones that have a 1 and ", "groundtruth": "\nclass Solution:\n    def minChanges(self, s: str) -> int:\n        cnt = 0\n        for i in range(0, len(s), 2):\n            if len(set(s[i:i + 2])) > 1:\n                cnt += 1\n                \n        print(s)\n        return cnt\n"}
{"task_id": "python/70", "content": "Do not create the submission/make it public/share it in the discussion.\nDo not add anything else in this class. You can add any additional class/method/etc if needed.\nDo not make the submission public.\nPlease note that any solution submitted will be considered as correct but not as correct by the grading mechanism.\n", "groundtruth": "\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = min(s + x, target)\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                if f[j] < f[j - x] + 1:\n                    f[j] = f[j - x] + 1\n        return f[-1] if f[-1] > 0 else -1\n"}
{"task_id": "python/71", "content": "\n\n\n\n\n\n\n\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        ##\n\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        ##\n\n    return ans\n\n\n\n\n\n\n\n\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        ##\n\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        ##\n\n    return ans\n\n\n\n\n\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        ##\n\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        ##\n\n    return ans\n\n\n\n\n\n\n\n\n\n\nclass Solution:\n    def maximizeSquareArea(self", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/72", "content": "'''\n\n\ndef f(a: list, mx: int) -> set:\n    return {x for x in a if x > mx}\n\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        v = [(y, i + 1) for i, y in enumerate(vFences)]\n        h = [(x, i + 1) for i, x in enumerate(hFences)]\n        v.append((0, n + 1))\n        v.append((m + 1, n + 1))\n        h.append((0, 1))\n        h.append((m + 1, 1))\n        v.sort()\n        h.sort()\n        v_area, h_area = 0, 0\n        while len(h) > 2:\n            y1, y2 = h.pop()[0], h.pop()[0]\n            y = (y1 + y2) // 2\n            x1, x2 = h.pop()[0], h.pop()[0]\n            x = (x1 + x2) // 2\n            v_area += (x - y) * (y2 - y1)\n            h_area += (y2 - y) * (x - x1)\n            h.append((y, x))\n        for _, a in v:\n            v_area += len(f(hFences, a - 1)) * (v_area if len(hFences) == 0 else a - 1 - max(hFences))\n        for _, a in h:\n            h_area += len(f(vFences, a - 1)) * (h_area if len(vFences) == 0 else a - 1 - max(vFences))\n        return h_area * h_area + v_area * v_area - 2 * h_area * v_area", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/73", "content": "\nConstraints:\n\nn == source.length == target.length\n1 <= n <= 105\noriginal.length == n\nchanged.length == n\n1 <= original[i].length == changed[i].length <= 6\nsource and target consist of lowercase English letters.\noriginal and changed contain the same number of occurrences of each letter (1-indexed).\nEach character of original[i] and changed[i] belongs to 'abcde'.\n1 <= cost.length <= 105\n1 <= cost[i] <= 104\nIf it is impossible to convert source to target, return -1.\nThe above mentioned problems are different from those with a string. They are all from the previous problem set and include several different constraints.\nPlease select a question from the list provided.\n\nNote: There are two duplicate problems in the problem list.\n\"\"\"\nfrom typing import List\nfrom unittest import TestCase\n\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        ____\n\n# 15\nclass TestSolution(TestCase):\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_minimumCost(self):\n        \"\"\"\n        Test case for ____\n        \"\"\"\n        self.assertIsNone(\n            ___,\n            msg='',\n        )\n\n\nif __name__ == '__main__':\n    import time\n    import os\n    import inspect\n\n    from utils.common import runTests\n    # ----------------------------------------------------------------------\n    # MAIN CODE\n    # ----------------------------------------------------------------------\n    runTests(TestSolution, globals())", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        dis = [[inf] * 26 for _ in range(26)]\n        for i in range(26):\n            dis[i][i] = 0\n\n        for x, y, c in zip(original, changed, cost):\n            x = ord(x) - ord('a')\n            y = ord(y) - ord('a')\n            dis[x][y] = min(dis[x][y], c)\n\n        for k in range(26):\n            for i in range(26):\n                for j in range(26):\n                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/74", "content": "\n### 376. Guess Number Higher or Lower II\n\nPlease fill in the following incomplete code according to the description. The description is as follows:\nThe API: int guess(int num);\nreturn -1, if my number is lower, 1, if my number is higher, otherwise return 0.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\nReturn the number that I picked.\n\nThe incomplete code is as follows:\n\nclass Solution:\n    def getMoneyAmount(self, n: int) -> int:\n\n        @cache\n        def dfs(left: int, right: int) -> int:\n            if left >= right:\n                return 0\n            ans = inf\n            for guess in range(left, right+1):\n                _______\n\n        return dfs(1, n)\n\nGive only the completed code. Do not output any additional information.\n\n### 378. Kth Smallest Element in a Sorted Matrix\n\nPlease fill in the following incomplete code according to the description. The description is as follows:\nGiven an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\nThe incomplete code is as follows:\n\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        l, r = min(matrix) + k, max(matrix) + k \n        while l < r:\n            mid = (l+r) // 2\n            _______\n            _______\n            cnt = sum(min(mid//j, len(row)) for j, row in enumerate(matrix))\n            if cnt < k:\n                _______\n            _______\n            _______", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/75", "content": "\n#### Example 1:\n```\nInput: source = \"XY\", target = \"X\", original = [\"X\",\"Y\",\"X\"], changed = [\"Y\",\"X\",\"X\"], cost = [1,2,4]\nOutput: 4\nExplanation: In the first operation, we take the string \"XXX\" from the strings list (index 1, index 2).\n             We insert the character X at index 3.\n             We now have the string \"XXY\" in the strings list.\n             We apply the replacement to the strings list at index 1, index 2.\n             The cost of this operation is 1*4 = 4.\n             There are no operations to take at index 3.\n             Thus, the total cost is 4.\nNote that target does not match the string \"XXX\", so we return -1.\n```\n#### Example 2:\n```\nInput: source = \"XXY\", target = \"XY\", original = [\"X\",\"Y\",\"X\"], changed = [\"Y\",\"X\",\"X\"], cost = [1,2,4]\nOutput: 4\nExplanation: In the second operation, we take the string \"YYY\" from the strings list (index 3, index 4).\n             We insert the character X at index 5.\n             We now have the string \"YYX\" in the strings list.\n             We apply the replacement to the strings list at index 3, index 4.\n             The cost of this operation is 2*4 = 8.\n             There are no operations to take at index 5.\n             Thus, the total cost is 8.\n```\n#### Example 3:\n```\nInput: source = \"XY\", target = \"Y\", original = [\"X\",\"Y\",\"X\"], changed = [\"Y\",\"X\",\"X\"], cost = [1,2,4]\nOutput: -1\nExplanation: target does not match the string source, so we return -1.\n```\n#### Constraints:\n```\n1 <= n == source.length == target.length, original.length, changed.length <= 50\nsource and target consist only of lowercase English letters.\noriginal.length == changed.length\n1 <= original[i].length, changed[i].length <= 100\noriginal[i]", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "cpp/0", "content": "\nReturn:\nThe total number of special permutations in the given array of n positive integers.\n*/\n\n\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialPerm = function(nums) {\n    var n = nums.length;\n    var f = Array(1 << n).fill(-1);\n    var dfs = function(state, i) {\n        if (f[state][i] != -1) {\n            return f[state][i];\n        }\n        if (state == (1 << i)) {\n            return 1;\n        }\n        f[state][i] = 0;\n        for (var j = 0; j < n; j++) {\n            if (i === j || !(state >> j & 1)) {\n                continue;\n            }\n            if (nums[i] % nums[j] !== 0 && nums[j] % nums[i] !== 0) {\n                continue;\n            }\n            f[state][i] = (f[state][i] || 0) + dfs(state, j);\n        }\n        return f[state][i];\n    };\n    var res = 0;\n    for (var i = 0; i < n; i++) {\n        res += dfs(1 << i, i);\n    }\n    return res % (1e9 + 7);\n};\nconsole.log(specialPerm([2,3,4,6,8,10]));", "groundtruth": "class Solution {public:static const int mod = 1e9 + 7;int specialPerm(vector<int>& nums) {int n = nums.size();vector<vector<int>> f(1 << n, vector<int>(n, -1));function<int(int, int)> dfs = [&](int state, int i) {if (f[state][i] != -1) {return f[state][i];}if (state == (1 << i)) {return 1;}f[state][i] = 0;for (int j = 0; j < n; j++) {if (i == j || !(state >> j & 1)) {continue;}if (nums[i] % nums[j] != 0 && nums[j] % nums[i] != 0) {continue;}f[state][i] = (f[state][i] + dfs(state ^ (1 << i), j)) % mod;}return f[state][i];};int res = 0;for (int i = 0; i < n; i++) {res = (res + dfs((1 << n) - 1, i)) % mod;}return res;}};"}
{"task_id": "cpp/1", "content": "Example 1:\n\nInput: cost = [1,2,3,4,5], time = [1,2,1,3,1]\nOutput: 13\nExplanation:\nThe cost of painting each wall is depicted in gray. In the first image, 1 + 1 + 1 + 1 + 1 = 5 units of money are required.\nThe cost of painting the walls in the second image are as follows: 2 + 3 + 1 + 3 + 1 = 12 units of money.\nHence, 13 units of money is required.\n*/\n\nclass Solution {\npublic:\n    int paintWalls(vector<int>& cost, vector<int>& time) {\n        int n = cost.size();\n        vector<int> f(n * 2 + 1, INT_MAX / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            vector<int> g(n * 2 + 1, INT_MAX / 2);\n            for (int j = 0; j <= n * 2; ++j) { \n                if (j > 0) g[j - 1] = min(g[j - 1], f[j]); \n            }\n            f = move(g);\n        }\n        return *min_element(f.begin() + n, f.end());\n    }\n};", "groundtruth": "class Solution {public:int paintWalls(vector<int>& cost, vector<int>& time) {int n = cost.size();vector<int> f(n * 2 + 1, INT_MAX / 2);f[n] = 0;for (int i = 0; i < n; ++i) {vector<int> g(n * 2 + 1, INT_MAX / 2);for (int j = 0; j <= n * 2; ++j) {// 付费g[min(j + time[i], n * 2)] = min(g[min(j + time[i], n * 2)], f[j] + cost[i]);// 免费if (j > 0) {g[j - 1] = min(g[j - 1], f[j]);}}f = move(g);}return *min_element(f.begin() + n, f.end());}};"}
{"task_id": "cpp/2", "content": "\n\n\n*/", "groundtruth": "class Solution {public:string smallestString(string s) {char target = 'a';auto it = std::find_if(s.begin(), s.end(), [target](char c) {return c != target;});int indexOfFirstNonA = std::distance(s.begin(), it);if (indexOfFirstNonA == s.length()) {return s.substr(0, s.length() - 1) + 'z';}size_t indexOfFirstA_AfterFirstNonA = s.find('a', indexOfFirstNonA);if (indexOfFirstA_AfterFirstNonA == string::npos) {indexOfFirstA_AfterFirstNonA = s.length();}string res;for (int i = 0; i < s.length(); ++i) {if (indexOfFirstNonA <= i && i < indexOfFirstA_AfterFirstNonA) {res.push_back(static_cast<char>(s[i] - 1));} else {res.push_back(s[i]);}}return res;}};"}
{"task_id": "cpp/3", "content": "*/\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nlong long minCost(vector<int>& nums, int x)\n{\n    int n = nums.size();\n    long long ans = LONG_LONG_MAX;\n    vector<int> f(nums);\n    for (int k = 1; k < n; ++k)\n    {\n        for (int i = 0; i < n; ++i)\n        {\n            f[i] = min(f[i], nums[(i + k) % n]);\n        }\n        ans = min(ans, f[i]);\n    }\n    return ans;\n}\n\nint main()\n{\n    vector<int> nums = {4, 3, 2, 5};\n    int x = 2;\n    long long ans = minCost(nums, x);\n    cout << \"Minimum cost: \" << ans << endl;\n    return 0;\n}\n\nThe solution can be improved using a more efficient data structure to reduce the cost of access to nums[i]. If we use a double-ended queue instead of an array, it will allow us to efficiently add and remove elements from the queue. In this case, you can use a double-ended queue to keep track of the minimum value of each index in nums.\nFor example, we can use a priority queue to track the minimum value of each index in nums.\nWe can then simulate the operation by calculating the minimum cost for each chunk of nums that the operation can be performed on.\nclass Solution {\npublic:\n    long long minCost(vector<int>& nums, int x) {\n        int n = nums.size();\n        long long ans = LONG_LONG_MAX;\n        auto compare = [&](int a, int b) { return nums[a] < nums[b]; };\n        priority_queue<int, vector<int>, decltype(compare)> pq(compare);\n        for (int i = 0; i < n; ++i) {\n            pq.push(i);\n        }\n", "groundtruth": "class Solution {public:long long minCost(vector<int>& nums, int x) {int n = nums.size();vector<int> f(nums);long long ans = accumulate(f.begin(), f.end(), 0LL);for (int k = 1; k < n; ++k) {for (int i = 0; i < n; ++i) {f[i] = min(f[i], nums[(i + k) % n]);}ans = min(ans, static_cast<long long>(k) * x + accumulate(f.begin(), f.end(), 0LL));}return ans;}};"}
{"task_id": "cpp/4", "content": "\n*/\n\n// Code Starts\nclass Solution {\n   public:\n    vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {\n        vector<pair<int, int>> sortedNums;\n        vector<tuple<int, int, int>> sortedQueries;\n\n        for (int i = 0; i < nums1.size(); i++) {\n            sortedNums.emplace_back(nums1[i], nums2[i]);\n        }\n\n        sort(sortedNums.begin(), sortedNums.end(), greater<pair<int, int>>());\n\n        for (int i = 0; i < queries.size(); i++) {\n            sortedQueries.emplace_back(i, queries[i][0], queries[i][1]);\n        }\n\n        sort(sortedQueries.begin(), sortedQueries.end(), [](tuple<int, int, int>& a, tuple<int, int, int>& b) {\n            return get<1>(a) > get<1>(b);\n        });\n\n        vector<pair<int, int>> stk;\n        vector<int> answer(queries.size(), -1);\n        int j = 0;\n\n        for (auto& [i, x, y] : sortedQueries) {\n            while (j < sortedNums.size() && sortedNums[j].first >= x) {\n                auto [num1, num2] = sortedNums[j];\n                while (stk.empty() == false) {\n                    stk.pop_back();\n                }\n                if (stk.empty() == false) {\n                    stk.emplace_back(num2, num1 + num2);\n                }\n                j++;\n            }\n            int k = lower_bound(stk.begin(), stk.end(), make_pair(y, 0)) - stk.begin();\n            if (k < stk.size()) {\n                answer[i] = stk[k].second;\n            }\n        }\n        return answer;", "groundtruth": "class Solution {public:vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {vector<pair<int, int>> sortedNums;vector<tuple<int, int, int>> sortedQueries;for (int i = 0; i < nums1.size(); i++) {sortedNums.emplace_back(nums1[i], nums2[i]);}sort(sortedNums.begin(), sortedNums.end(), greater<pair<int, int>>());for (int i = 0; i < queries.size(); i++) {sortedQueries.emplace_back(i, queries[i][0], queries[i][1]);}sort(sortedQueries.begin(), sortedQueries.end(), [](tuple<int, int, int> &a, tuple<int, int, int> &b) {return get<1>(a) > get<1>(b);});vector<pair<int, int>> stk;vector<int> answer(queries.size(), -1);int j = 0;for (auto &[i, x, y] : sortedQueries) {while (j < sortedNums.size() && sortedNums[j].first >= x) {auto [num1, num2] = sortedNums[j];while (!stk.empty() && stk.back().second <= num1 + num2) {stk.pop_back();}if (stk.empty() || stk.back().first < num2) {stk.emplace_back(num2, num1 + num2);}j++;}int k = lower_bound(stk.begin(), stk.end(), make_pair(y, 0)) - stk.begin();if (k < stk.size()) {answer[i] = stk[k].second;}}return answer;}};"}
{"task_id": "cpp/5", "content": "Your answer is being evaluated based on the following input:\n[\"Solution\",\"longestSemiRepetitiveSubstring\",\"longestSemiRepetitiveSubstring\",\"longestSemiRepetitiveSubstring\"]\ngroundtruth": "class Solution {public:int longestSemiRepetitiveSubstring(string s) {int ans = 1, left = 0, same = 0, n = s.length();for (int right = 1; right < n; right++) {if (s[right] == s[right - 1] && ++same > 1) {for (left++; s[left] != s[left - 1]; left++);same = 1;}ans = max(ans, right - left + 1);}return ans;}};"}
{"task_id": "cpp/6", "content": "Input:\nnums = [1,1,1]\ns = \"RRR\"\n\nOutput:\n22\n\nExplanation:\nHere is how the robot moves:\n1. The initial robot position is [1,0]\n2. It goes to [1,0]\n3. It goes to [0,0]\n4. It goes to [0,0]\nThe distance between [1,0] and [0,0] is 1.\nThe distance between [1,0] and [2,0] is 3.\nThe distance between [1,0] and [1,1] is 2.\nThe distance between [1,0] and [0,1] is 4.\nThe distance between [0,0] and [0,1] is 2.\nThe distance between [0,0] and [1,1] is 1.\nThe distance between [0,0] and [2,0] is 5.\nThe distance between [2,0] and [1,1] is 3.\nThe distance between [2,0] and [0,1] is 4.\nThe sum of the distances (1+3+2+4+2+1+3+5+3+4) is 22.\nThus, answer = 22\n\n\"\"\"\n\n\n\n\nclass Solution:\n    # def sumDistance(self, nums: list, s: str, d: int) -> int:\n    #     n = len(nums)\n    #     pos = [0] * n\n    #     for i in range(n):\n    #         if s[i] == \"L\":\n    #             pos[i] = nums[i] - d\n    #         else:\n    #             pos[i] = nums[i] + d\n    #\n    #     res = 0\n    #     pos.sort()\n    #     # for p in pos:\n    #     #     for p_next in pos:\n    #     #         res += abs(p - p_next)\n    #     #         res %= 10 ** 9 + 7\n    #     for i in range(n-1):\n    #         res += abs", "groundtruth": "class Solution {public:static constexpr int mod = 1e9 + 7;int sumDistance(vector<int>& nums, string s, int d) {int n = nums.size();vector<long long> pos(n);for (int i = 0; i < n; i++) {if (s[i] == 'L') {pos[i] = (long long) nums[i] - d;} else {pos[i] = (long long) nums[i] + d;}}sort(pos.begin(), pos.end());long long res = 0;for (int i = 1; i < n; i++) {res += 1ll * (pos[i] - pos[i - 1]) * i % mod * (n - i) % mod;res %= mod;}return res;}};"}
{"task_id": "cpp/7", "content": "Example 1:\nInput: grid = [[1,0,0,0],[1,1,1,0]]\nOutput: [0,2]\nExplanation:\nFrom the rows:\n-0 and 2: The sum of each column is: 0, 1, 1, 1.\n    0 is the only row with a sum less than or equal to half the length.\n    So, the indices 0, 2 are an answer.\n\nExample 2:\nInput: grid = [[0,0],[1,1],[0,0]]\nOutput: [1,2]\nExplanation:\nFrom the rows:\n-1 and 2: The sum of each column is: 0, 1, 1.\n    2 is the only row with a sum less than or equal to half the length.\n    So, the indices 1, 2 are an answer.\n\nConstraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100\ngrid[i][j] is either 0 or 1.\n*/\nclass Solution {\npublic:\n    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n        vector<int> ans;\n        unordered_map<int, int> mp;\n        int m = grid.size();\n        int n = grid[0].size();\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp[st] = j;\n        }\n        if (mp.count(0)) {\n            ans.push_back(min(mp[0],mp[0]));\n            ans.push_back(max(mp[0],mp[0]));\n        }\n        else {\n            for (auto [x, i]: mp) {\n                for (auto [y, j]: mp) {\n                    if (x|y == y) {\n                        ans.push_back(min(i,j));\n                        ans.push_", "groundtruth": "class Solution {public:vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {vector<int> ans;unordered_map<int, int> mp;int m = grid.size();int n = grid[0].size();for (int j = 0; j < m; j++) {int st = 0;for (int i = 0; i < n; i++) {st |= (grid[j][i] << i);}mp[st] = j;}if (mp.count(0)) {ans.push_back(mp[0]);return ans;}for (auto [x, i]: mp) {for (auto [y, j]: mp) {if (!(x & y)) {return {min(i, j), max(i, j)};}}}return ans;}};"}
{"task_id": "cpp/8", "content": " */\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nclass Solution {\npublic:\n    long long matrixSumQueries(int n, vector<vector<int>>& queries) {\n        long long ans = 0;\n        int type_mask = 0;// type 0 or 1\n        int index_mask = 0;\n        for(int i = queries.size()-1;i >= 0;i--)\n        {\n            auto &q = queries[i];\n            int type = q[0], index = q[1], val = q[2];\n            if(vis[type].count(index)) continue;\n            else\n            {\n                vis[type].insert(index);//update type_mask,index_mask\n                if(type == 0) type_mask |= (1 << index);//update type_mask\n                else index_mask |= (1 << index);\n                ans += val;\n            }\n        }\n        return ans;\n    }\nprivate:\n    unordered_set<int> vis[2];\n};", "groundtruth": "class Solution {public:long long matrixSumQueries(int n, vector<vector<int>> &queries) {long long ans = 0;unordered_set<int> vis[2];for (int i = queries.size() - 1; i >= 0; i--) {auto &q = queries[i];int type = q[0], index = q[1], val = q[2];if (!vis[type].count(index)) { // 后面（>i）没有对这一行/列的操作// 这一行/列还剩下 n-vis[type^1].size() 个可以填入的格子ans += (long long) (n - vis[type ^ 1].size()) * val;vis[type].insert(index);}}return ans;}};"}
{"task_id": "cpp/9", "content": "For Example1:\nInput:num1 = \"02320111\",num2 = \"011\",min_sum = 1,max_sum = 10\nOutput:48\nExplanation:\nThe good integers are 9, 10, 30, 31, 32, 91, 101, 301, 311, 321.\nTotal 10 answers: 9 + 10 + 30 + 31 + 32 + 91 + 101 + 301 + 311 + 321 = 48.\nNotice that\n30 + 31 = 51\n301 + 311 = 521\n30131 = 52131\nnum1 = 02320111,num2 = 011,min_sum = 1,max_sum = 10\nThe good integers are 9, 10, 30, 31, 32, 91, 101, 301, 311, 321, 99, 100, 300, 310, 320, 990, 1000, 3000, 3100, 3200, 999, 1000, 30000, 31000, 32000, 9999, 10000, 300000, 310000, 320000, 99999, 100000, 3000000 = 1217.\n\n\n\n```\n\n<!-- tabs:start -->\n\n### **Python3**\n\n```python\nclass Solution:\n    @staticmethod\n    def __init__():\n        self.ans = 0\n\n    @staticmethod\n    def __update__(n):\n        if n >= 1000000007:\n            n -= 1000000007\n        return n\n\n    @static", "groundtruth": "class Solution {static constexpr int N = 23;static constexpr int M = 401;static constexpr int MOD = 1e9 + 7;int d[N][M];string num;int min_sum;int max_sum;int dfs(int i, int j, bool limit) {if (j > max_sum) {return 0;}if (i == -1) {return j >= min_sum;}if (!limit && d[i][j] != -1) {return d[i][j];}int res = 0;int up = limit ? num[i] - '0' : 9;for (int x = 0; x <= up; x++) {res = (res + dfs(i - 1, j + x, limit && x == up)) % MOD;}if (!limit) {d[i][j] = res;}return res;}int get(string num) {reverse(num.begin(), num.end());this->num = num;return dfs(num.size() - 1, 0, true);}// 求解 num - 1，先把最后一个非 0 字符减去 1，再把后面的 0 字符变为 9string sub(string num) {int i = num.size() - 1;while (num[i] == '0') {i--;}num[i]--;i++;while (i < num.size()) {num[i] = '9';i++;}return num;}public:int count(string num1, string num2, int min_sum, int max_sum) {memset(d, -1, sizeof d);this->min_sum = min_sum;this->max_sum = max_sum;return (get(num2) - get(sub(num1)) + MOD) % MOD;}};"}
{"task_id": "cpp/10", "content": "*/\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        unordered_map<int, pair<int, int>> mp;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                mp[mat[i][j]] = {i, j};\n            }\n        }\n        vector<int> rowCnt(n, 0);\n        vector<int> colCnt(m, 0);\n        for (int i = 0; i < arr.size(); ++i) {\n            ++rowCnt[mp[arr[i]].first];\n            if (rowCnt[mp[arr[i]].first] == m) {\n                return i;\n            }\n            ++colCnt[mp[arr[i]].second];\n            if (colCnt[mp[arr[i]].second] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n\nint main() {\n    Solution s;\n    vector<int> arr = {1, 2, 3, 4};\n    vector<vector<int>> mat = {{1, 2, 3}, {4, 5, 6}};\n    cout << s.firstCompleteIndex(arr, mat);\n    return 0;\n}", "groundtruth": "class Solution {public:int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {int n = mat.size();int m = mat[0].size();unordered_map<int, pair<int, int>> mp;for (int i = 0; i < n; ++i) {for (int j = 0; j < m; ++j) {mp[mat[i][j]] = {i, j};}}vector<int> rowCnt(n, 0);vector<int> colCnt(m, 0);for (int i = 0; i < arr.size(); ++i) {auto& v = mp[arr[i]];++rowCnt[v.first];if (rowCnt[v.first] == m) {return i;}++colCnt[v.second];if (colCnt[v.second] == n) {return i;}}return -1;}};"}
{"task_id": "cpp/11", "content": " \nInput: start = [0,0], target = [1,1]\nOutput: 2\n\nInput: start = [0,0], target = [0,1], specialRoads = [[2,3],[3,4],[2,3],[3,4],[4,6]]\nOutput: 4\n\nConstraints:\n\n1 <= start.length == target.length <= 20\nstart[i] == target[i]\n\n\n*/\n\n\n\nclass Solution {\npublic:\n    using LL = long long;\n    int minimumCost(vector<int>& start, vector<int>& target, vector<vector<int>>& specialRoads) {\n        unordered_map<LL, int> dis = {{LL(start[0])<<32|start[1], 0}, {(LL(target[0])<<32|target[1]), INT_MAX}};\n        unordered_set<LL> vis;\n        \n        for (;;) {\n            LL v = -1;\n            int dv = -1;\n            for (auto& [p, d]: dis)\n                if (!vis.count(p) && (dv < 0 || d < dv))\n                    v = p, dv = d;\n            if (v == (LL(target[0])<<32|target[1]))\n                return dv;\n            // 到终点的最短路已确定vis.insert(v);\n            int vx = v >> 32, vy = v & UINT32_MAX;\n            // 更新到终点的最短路____for (auto& r: specialRoads) {\n            //     int d = LL(r[2])<<32|r[3];\n            //     if (!dis.count(d) || d < dis[d])\n            //         dis[d] = d;\n            // }\n        }\n    }\n};\n\n\n\n\n// https://leetcode-cn.com/problems/minimum-cost-to-reach-destination-with-special-roads/solution/shan-chu-dong-tai-gui-hua-bfsbv", "groundtruth": "class Solution {public:int minimumCost(vector<int> &start, vector<int> &target, vector <vector<int>> &specialRoads) {using LL = long long;LL t = (LL) target[0] << 32 | target[1];unordered_map<LL, int> dis = {{(LL) start[0] << 32 | start[1], 0}, {t, INT_MAX}};unordered_set<LL> vis;for (;;) {LL v = -1;int dv = -1;for (auto &[p, d]: dis)if (!vis.count(p) && (dv < 0 || d < dv))v = p, dv = d;if (v == t) return dv; // 到终点的最短路已确定vis.insert(v);int vx = v >> 32, vy = v & UINT32_MAX;// 更新到终点的最短路dis[t] = min(dis[t], dv + target[0] - vx + target[1] - vy);for (auto &r: specialRoads) {int d = dv + abs(r[0] - vx) + abs(r[1] - vy) + r[4];LL w = (LL) r[2] << 32 | r[3];if (!dis.count(w) || d < dis[w])dis[w] = d;}}}};"}
{"task_id": "cpp/12", "content": "*/\n// Complete this function.\nstring smallestBeautifulString(string s, int k) {\n    int n = s.length();\n    int l = k;\n    for(int i=n-1;i>=0;--i)\n    {\n        unordered_set<char> cset;\n        for(int j=1;j<=2;j++)\n        {\n            if(i-j>=0 && cset.find(s[i-j])==cset.end())\n                cset.insert(s[i-j]);\n        }\n        for(int j=1;j<=l;j++)\n        {\n            if(s[i]+j=='z'+1 || s[i]+j>='a'+k)\n                continue;\n            if(cset.find(s[i]+j)==cset.end())\n            {\n                s[i]=s[i]+j;\n                break;\n            }\n        }\n    }\n    return s;\n}\nint main(){\n    int t;\n    cin >> t;\n    for(int i=0;i<t;i++){\n        string s;\n        int k;\n        cin >> s >> k;\n        s = smallestBeautifulString(s, k);\n        if(i==0)\n            cout << s << endl;\n    }\n    return 0;\n}\n\n//codeChef-Practice-1/1/Main.cpp\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#include \"SmallestBeautifulString.cpp\"\nint main() {\n    int t;\n    cin >> t;\n    for(int i=0;i<t;i++){\n        string s;\n        int k;\n        cin >> s >> k;\n        string smallest = smallestBeautifulString(s, k);\n        cout << smallest << endl;\n    }\n    return 0;\n}", "groundtruth": "class Solution {public:string smallestBeautifulString(string s, int k) {for (int i = s.length() - 1; i >= 0; --i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {____}}for (int j = 1; j <= 3; ++j) {if (s[i] - 'a' + j + 1 <= k && blockedCharacters.find(s[i] + j) == blockedCharacters.end()) {return generate(s, i, j);}}}return \"\";}string generate(string s, int idx, int offset) {s[idx] += offset;for (int i = idx + 1; i < s.length(); ++i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {blockedCharacters.insert(s[i - j]);}}for (int j = 0; j < 3; ++j) {if (____) {s[i] = 'a' + j;break;}}}return s;}};"}
{"task_id": "cpp/13", "content": "\n'''\n\ndef find_prefix(A, B):\n    m = len(A)\n    a = [0] * (m+1)\n    b = [0] * (m+1)\n    for i in range(m):\n        a[i+1] += a[i] + 1\n        b[i+1] += b[i] + 1\n    ans = [0] * m\n    for i in range(m):\n        ans[i] = a[A[i]] * b[B[i]] + ans[i]\n    return ans\n    \nn = int(input())\nA = list(map(int, input().strip().split()))\nB = list(map(int, input().strip().split()))\nprint(*find_prefix(A, B))", "groundtruth": "class Solution {public:vector<int> findThePrefixCommonArray(vector<int> &a, vector<int> &b) {int n = a.size();vector<int> ans(n);long long p = 0, q = 0;for (int i = 0; i < n; ++i) {p |= 1LL << a[i];q |= 1LL << b[i];ans[i] = __builtin_popcountll(p & q);}return ans;}};"}
{"task_id": "cpp/14", "content": "*/\n\nclass Solution {\npublic:\n    int findMaxFish(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int ans = 0;\n        function<int(int,int)> dfs = [&](int x, int y) {\n            if (grid[x][y] == 0) {\n                return 0;\n            }\n\n            grid[x][y] = 0;\n            //标记成访问过\n\n            int sum = grid[x][y];\n            // 四方向移动\n\n            return sum;\n        };\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                ans = max(ans, dfs(i, j));\n            }\n        }\n        return ans;\n    }\n};", "groundtruth": "class Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};"}
{"task_id": "cpp/15", "content": "\n\nNote:\n\n\n\tYou may assume that the length of the array nums beforehand is a non-zero number.\n\tThe range of all integers in the input array is between [1, 1000].\n\t1 <= nums.length <= 1000\n\t1 <= nums[i] <= 105\n\n\nTest cases\nExample 1:\n\nInput: nums = [4, 3, 2, 1, 0]\nOutput: 10\nExplanation:\nOperation    | Value           | Add     | Pop      \n--------------|-----------------|---------|---------\n1st:          | 4, [4]          | 4       | 4       \n2nd:          | 3, [3, 4]       | 3       | 4       \n3rd:          | 2, [3, 2, 4]    | 3       | 4       \n4th:          | 1, [3, 2, 1, 4] | 1       | 4       \n5th:          | 0, [3, 2, 1, 0] | 0       | 3       \nAnswer: 1 + 2 + 3 + 4 + 0 = 10\n\nExample 2:\n\nInput: nums = [0, 1, 2, 3, 4]\nOutput: 10\nExplanation:\nOperation    | Value           | Add     | Pop      \n--------------|-----------------|---------|---------\n1st:          | 0, [0]          | 0       | 0       \n2nd:          | 1, [1, 0]       | 1       | 0       \n3rd:          | 2, [2, 1, 0]    | 2       | 0       \n4th:          | 3, [3, 2, 1, 0] | 3       | 0       \n5th:          | 4, [4, 3, 2, 1] | 4       | 3       \nAnswer: 0 + 1 + 2 + 3 + 4 = 10\n\n \n\nConstraints:\n\n\tn == nums.length\n\t1 <= n <= 1000\n\t1 <= nums[i] <= 105\n\n\nAcceptance:\nPlease fill in the following", "groundtruth": "// 树状数组模板class BIT {vector<int> tree;public:BIT(int n) : tree(n) {}// 将下标 i 上的数加一void inc(int i) {while (i < tree.size()) {++tree[i];i += i & -i;}}// 返回闭区间 [1, i] 的元素和int sum(int x) {int res = 0;while (x > 0) {res += tree[x];x &= x - 1;}return res;}// 返回闭区间 [left, right] 的元素和int query(int left, int right) {return sum(right) - sum(left - 1);}};class Solution {public:long long countOperationsToEmptyArray(vector<int> &nums) {int n = nums.size(), id[n];iota(id, id + n, 0);sort(id, id + n, [&](int i, int j) {return nums[i] < nums[j];});long long ans = n; // 先把 n 计入答案BIT t(n + 1); // 下标从 1 开始int pre = 1; // 上一个最小值的位置，初始为 1for (int k = 0; k < n; ++k) {int i = id[k] + 1; // 下标从 1 开始if (i >= pre) // 从 pre 移动到 i，跳过已经删除的数ans += i - pre - t.query(pre, i);else // 从 pre 移动到 n，再从 1 移动到 i，跳过已经删除的数ans += n - pre + i - k + t.query(i, pre - 1);t.inc(i); // 删除 ipre = i;}return ans;}};"}
{"task_id": "cpp/16", "content": "class Solution {\npublic:\n    vector<int> getSubarrayBeauty(vector<int>& nums, int k, int x) {\n        vector<int> ans(nums.size() - k + 1);\n        for (int i = 0; i < nums.size(); ++i) {\n            if (i >= k) {\n                --cnt[nums[i - k] + x];\n                if (cnt[nums[i - k] + x] == 0) --cnt[nums[i - k] + x + x];\n            }\n            ++cnt[nums[i] + x];\n            if (cnt[nums[i] + x] == 0) --cnt[nums[i] + x + x];\n        }\n        for (int i = 0; i < ans.size(); ++i) {\n            for (int j = 0; j < BIAS; ++j) {\n                if (j - x <= 0) {\n                    ans[i] = j - x;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n};\nPlease fill in the following incomplete code according to the description. The description is as follows:\nGiven an integer array nums containing n integers, find the kk-th largest integer in the array. If there are duplicates, return the kkth largest integer after rotation.\nThe incomplete code is as follows:\nclass Solution {public:int findKthLargest(vector<int>& nums, int k) {const int N = nums.size();int ans = -1;priority_queue<int> pq;for (int i = 0; i < N; ++i) {pq.push(nums[i]);while (pq.size() > k) pq.pop();}return pq.top();}};\nPlease fill in the missing part of this code according to the description.\nThis code will run for 10 points.\n\n1. Create a vector<int> pq;Initialize an empty priority queue pq.\n\n2. Use a for loop to add elements to pq.\n\n    For each element num in num", "groundtruth": "class Solution {public:vector<int> getSubarrayBeauty(vector<int> &nums, int k, int x) {const int BIAS = 50;int cnt[BIAS * 2 + 1]{}, n = nums.size();for (int i = 0; i < k - 1; ++i) // 先往窗口内添加 k-1 个数++cnt[nums[i] + BIAS];vector<int> ans(n - k + 1);for (int i = k - 1; i < n; ++i) {++cnt[nums[i] + BIAS]; // 进入窗口（保证窗口有恰好 k 个数）int left = x;for (int j = 0; j < BIAS; ++j) { // 暴力枚举负数范围 [-50,-1]left -= cnt[j];if (left <= 0) { // 找到美丽值ans[i - k + 1] = j - BIAS;break;}}--cnt[nums[i - k + 1] + BIAS]; // 离开窗口}return ans;}};"}
{"task_id": "cpp/17", "content": "\n\nYou are given a 0-indexed array of positive integers nums, and you are allowed to do the following operation on nums any number of times:\nRemove the first element of nums, set the result equal to the sum of its current value and all the values left over. In particular, after the first step, the first element of nums will not exist, and the remaining values of nums will be exactly as they appeared in the first step.\n\nReturn the minimum number of steps required to return nums back to original form.\n\nThe incomplete code is as follows:\nclass Solution {public:int minOperations(vector<int> &nums) {int min_size = nums.size();for (;;) {int sum = 0, cnt = 0;for (int x: nums) {sum += x;if (x == 0) ++cnt;if (sum == 0) {break;}}}// 返回之前的和， 这里 break 是因为我们从最前面的非零元素开始\n\n找出最短的一个子序列，这样操作时如果最长的子序列不存在元素为 0 的数组，那我们就直接退出循环，并且此时已经知道最后返回的操作次数是多少；同时对于每一个返回的操作次数都是 min_size + nums.size() - cnt，所以当 min_size 被更新的时候我们也同时更新。____\n\nreturn min_size + nums.size() - cnt;}};\nGive only the completed code. Do not output any additional information.\n\n\n\n请你将它提交。\n\n在本题中，你需要将数组的所有元素求并到一个变量中，但这个操作可能需要一些操作次数。你将从 nums 数组中的一个非零元素开始操作，这样操作后，数组会回到原始状态，返回的操作次数也是最小的。\n\n数组 nums 以下标 0 开始编号，请你在不操作的情况下，返回 nums 需要进行的最少操作次数。\n\n提示：\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n答案保证在 32-bit 整数范围内。\n", "groundtruth": "class Solution {public:int minOperations(vector<int> &nums) {int n = nums.size(), gcd_all = 0, cnt1 = 0;for (int x: nums) {gcd_all = gcd(gcd_all, x);cnt1 += x == 1;}if (gcd_all > 1) return -1;if (cnt1) return n - cnt1;int min_size = n;for (int i = 0; i < n; ++i) {int g = 0;for (int j = i; j < n; ++j) {g = gcd(g, nums[j]);if (g == 1) {// 这里本来是 j-i+1，把 +1 提出来合并到 return 中min_size = min(min_size, j - i);break;}}}return min_size + n - 1;}};"}
{"task_id": "cpp/18", "content": "\n*/\n\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n  int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n    int cnt = -1, ans = 0;\n    for (int i = 0; i < divisors.size(); i++) {\n      int tmp = 0;\n      for (int j = 0; j < nums.size(); j++) {\n        if (nums[j] % divisors[i] == 0) {\n          tmp++;\n        }\n      }\n      if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {\n        cnt = tmp;\n        ans = divisors[i];\n      }\n    }\n    return ans;\n  }\n};\n\n// 执行用时 : 60 ms, 在所有 C++ 提交中击败了100.00%的用户\n// 内存消耗 : 19.3 MB, 在所有 C++ 提交中击败了96.08%的用户", "groundtruth": "class Solution {public:int maxDivScore(vector<int>& nums, vector<int>& divisors) {int cnt = -1, ans = 0;for (int i = 0; i < divisors.size(); i++) {int tmp = 0;for (int j = 0; j < nums.size(); j++) {if (nums[j] % divisors[i] == 0) {tmp++;}}if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {ans = divisors[i];cnt = tmp;}}return ans;}};"}
{"task_id": "cpp/19", "content": "'''\n\n\ndef add_minimum_letters(word):\n    # return len(word)\n    min = 999\n    d = [0] * (len(word) + 1)\n    for i in range(1, len(word) + 1):\n        if i > 2:\n            if (word[-1] == \"c\" and word[-2] == \"c\" and word[-3] == \"a\") or (\n                word[-1] == \"b\" and word[-2] == \"a\" and word[-3] == \"b\"\n            ):\n                d[i] = d[i - 3] - 1\n            elif (\n                word[-1] == \"b\" and word[-2] == \"a\" and word[-3] == \"c\"\n            ) or (word[-1] == \"a\" and word[-2] == \"b\" and word[-3] == \"c\"):\n                d[i] = d[i - 3] - 1\n            else:\n                d[i] = d[i - 1] + 1\n        else:\n            if (word[-1] == \"c\" and word[-2] == \"a\") or (\n                word[-1] == \"c\" and word[-2] == \"b\"\n            ):\n                d[i] = d[i - 2] + 1\n            elif (word[-1] == \"a\" and word[-2] == \"b\") or (\n                word[-1] == \"b\" and word[-2] == \"c\"\n            ):\n                d[i] = d[i - 2] + 1\n            else:\n                d[i] = d[i - 1] + 1\n\n        if d[i] < min:\n            min = d[i]\n\n    return d[len(word)]\n\n\nassert add_minimum_letters(\"bbbaacdafe\") == 2\nassert add_minimum_letters(\"bcb\") == 3\nassert add_minimum_letters(\"bccba\") == 0\nassert add_minimum_letters(\"ccc\") == 2\nassert add_minimum_letters(\"ccaabc\") == 4\nassert add_minimum_letters(\"", "groundtruth": "class Solution {public:int addMinimum(string word) {int n = word.size();vector<int> d(n + 1);for (int i = 1; i <= n; i++) {d[i] = d[i - 1] + 2;if (i > 1 && word[i - 1] > word[i - 2]) {d[i] = d[i - 1] - 1;}}return d[n];}};"}
{"task_id": "cpp/20", "content": "\nSubmissions\nRuntime: 716 ms\nMemory: 13.8 MB\n*/\n\nclass Solution {\npublic:\n    int minimumTotalPrice(int n, vector<vector<int>>& edges, vector<int>& price, vector<vector<int>>& trips) {\n        vector<vector<int>> next(n);\n        for (auto& edge: edges) {\n            next[edge[0]].push_back(edge[1]);\n            next[edge[1]].push_back(edge[0]);\n        }\n        vector<int> count(n);\n        function<bool(int, int, int)> dfs = [&](int node, int parent, int end) -> bool {\n            if (node == end) {\n                count[node]++;\n                return true;\n            }\n            for (int child: next[node]) {\n                if (child == parent) {\n                    continue;\n                }\n                if (dfs(child, node, end)) {\n                    count[node]++;\n                    return true;\n                }\n            }\n            return false;\n        };\n        for (auto& trip: trips) {\n            dfs(trip[0], -1, trip[1]);\n        }\n        function<pair<int, int>(int, int)> dp = [&](int node, int parent) -> pair<int, int> {\n            pair<int, int> res = {numeric_limits<int>::max(), 0};\n            for (int child: next[node]) {\n                if (child == parent) {\n                    continue;\n                }\n                auto [x, y] = dp(child, node);\n                res.second += x;\n                // node 没有减半，因此可以取子树的两种情况的最小值\n                if (child == trip[0]) {\n                    res.second -= price[child];\n                }\n                if (child == trip[1]) {\n                    res.second -= price[child];\n                }\n                // node 减半，只能取子树没有减半的情况\n                res.first = min(res.first, y + price[child]", "groundtruth": "class Solution {public:int minimumTotalPrice(int n, vector<vector<int>> &edges, vector<int> &price, vector<vector<int>> &trips) {vector<vector<int>> next(n);for (auto &edge : edges) {next[edge[0]].push_back(edge[1]);next[edge[1]].push_back(edge[0]);}vector<int> count(n);function<bool(int, int, int)> dfs = [&](int node, int parent, int end) -> bool {if (node == end) {count[node]++;return true;}for (int child : next[node]) {if (child == parent) {continue;}if (dfs(child, node, end)) {count[node]++;return true;}}return false;};for (auto &trip: trips) {dfs(trip[0], -1, trip[1]);}function<pair<int, int>(int, int)> dp = [&](int node, int parent) -> pair<int, int> {pair<int, int> res = {price[node] * count[node], price[node] * count[node] / 2};for (int child : next[node]) {if (child == parent) {continue;}auto [x, y] = dp(child, node);res.first += min(x, y); // node 没有减半，因此可以取子树的两种情况的最小值res.second += x; // node 减半，只能取子树没有减半的情况}return res;};auto [x, y] = dp(0, -1);return min(x, y);}};"}
{"task_id": "cpp/21", "content": "\nInput: nums = [2,3,7,5,10]\nOutput: [4,14,24,35,50]\nExplanation: The prefix scores of nums are:\n- Find the conversion array for 2 and 3.\n- Find the conversion array for 7 and 5.\n- Find the conversion array for 5 and 10.\nWe return [4,14,24,35,50].\n\nInput: nums = [1,1]\nOutput: [2,2]\nExplanation: The prefix scores of nums are:\n- Find the conversion array for 1 and 1.\nWe return [2,2].\n\nConstraints:\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= 109\n\n\"\"\"\n\n\nclass Solution(object):\n    def findPrefixScore(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        ans, tmp = [], nums[0]\n        for i in range(len(nums)):\n            if nums[i] > tmp:\n                tmp = nums[i]\n            ans.append((i+1) * (nums[i]+tmp))\n        return ans\n\n\nnums = [2,3,7,5,10]\ns = Solution()\nprint(s.findPrefixScore(nums))", "groundtruth": "class Solution {public:vector<long long> findPrefixScore(vector<int>& nums) {vector<long long> ans;int tmp = nums[0];ans.push_back(nums[0] * 2);for (int i = 1; i < nums.size(); ++i) {if (nums[i] > tmp) tmp = nums[i];ans.push_back(nums[i] + tmp + ans[i - 1]);}return ans;}};"}
{"task_id": "cpp/22", "content": "\n#include <algorithm>\n#include <iostream>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nusing namespace std;\n\nclass TreeNode {\npublic:\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int val) : val(val), left(NULL), right(NULL) {}\n    TreeNode(int val, TreeNode* left, TreeNode* right) : val(val), left(left), right(right) {}\n};\n\nTreeNode* addLeftChild(TreeNode* root, int val) {\n    if (!root) return new TreeNode(val);\n    if (root->left) return root->left;\n    return new TreeNode(val, root->left, nullptr);\n}\n\nTreeNode* addRightChild(TreeNode* root, int val) {\n    if (!root) return new TreeNode(val);\n    if (root->right) return root->right;\n    return new TreeNode(val, nullptr, root->right);\n}\n\nclass Solution {\npublic:\n    TreeNode* replaceValueInTree(TreeNode* root) {\n        vector<TreeNode*> q = {root};\n        root->val = 0;\n        while (!q.empty()) {\n            vector<TreeNode*> q2;\n            int sum = 0;\n            for (auto fa : q) {\n                if (fa->left) {\n                    q2.push_back(fa->left);\n                }\n                if (fa->right) {\n                    q2.push_back(fa->right);\n                }\n            }\n            for (auto fa : q) {\n                int child_sum = (fa->left ? fa->left->val : 0) + (fa->right ? fa->right->val : 0);\n                if (fa->left) {\n                }\n                if (fa->right) {\n                }\n            }\n            q = move(q2);\n        }\n        return root;\n    }\n};\n\nTreeNode* generateTree() {\n    auto", "groundtruth": "class Solution {public:TreeNode* replaceValueInTree(TreeNode* root) {vector<TreeNode*> q = {root};root->val = 0;while (!q.empty()) {vector<TreeNode*> q2;int sum = 0;for (auto fa : q) {if (fa->left) {q2.push_back(fa->left);sum += fa->left->val;}if (fa->right) {q2.push_back(fa->right);sum += fa->right->val;}}for (auto fa : q) {int child_sum = (fa->left ? fa->left->val : 0) +(fa->right ? fa->right->val : 0);if (fa->left) {fa->left->val = sum - child_sum;}if (fa->right) {fa->right->val = sum - child_sum;}}q = move(q2);}return root;}};"}
{"task_id": "cpp/23", "content": "Explanation\nThe given code is a template, it has to be completed to meet the requirements. In this code, there are several features that are not specified, but are required to meet the requirements.\nThe code uses a priority queue to find the shortest path.\nThe code uses a vector to store distances.\nThe code uses a loop to search for the shortest path.\nThe code uses a while loop to iterate over the queue.\nThe code uses a function that adds edges to the graph.\nThe code uses a function that returns the shortest path.\nThe code uses the naming conventions as specified in the programming language.\nThe given code can be completed and returns the expected output.", "groundtruth": "class Graph {public:using pii = pair<int, int>;Graph(int n, vector<vector<int>>& edges) {this->graph = vector<vector<pii>>(n);for (auto &vec : edges) {int x = vec[0];int y = vec[1];int cost = vec[2];graph[x].emplace_back(y, cost);}}void addEdge(vector<int> edge) {int x = edge[0];int y = edge[1];int cost = edge[2];graph[x].emplace_back(y, cost);}int shortestPath(int node1, int node2) {priority_queue<pii, vector<pii>, greater<pii>> pq;vector<int> dist(graph.size(), INT_MAX);dist[node1] = 0;pq.emplace(0, node1);while (!pq.empty()) {auto [cost, cur] = pq.top();pq.pop();if (cur == node2) {return cost;}for (auto [next, ncost] : graph[cur]) {if (dist[next] > cost + ncost) {dist[next] = cost + ncost;pq.emplace(cost + ncost, next);}}}return -1;}private:vector<vector<pii>> graph;};"}
{"task_id": "cpp/24", "content": "The complete code is as follows:\nclass Solution {public:vector<long long> distance(vector<int> &nums) {int n = nums.size();unordered_map<int, vector<int>> groups;for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标vector<long long> ans(n);long long s[n + 1];s[0] = 0;for (auto &[_, a]: groups) {int m = a.size();for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和for (int i = 0; i < m; ++i) {long long target = a[i];____ // 蓝色面积long long right = s[m] - s[i] - target * (m - i); // 绿色面积____}}return ans;}};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "class Solution {public:vector<long long> distance(vector<int> &nums) {int n = nums.size();unordered_map<int, vector<int>> groups;for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标vector<long long> ans(n);long long s[n + 1];s[0] = 0;for (auto &[_, a]: groups) {int m = a.size();for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和for (int i = 0; i < m; ++i) {long long target = a[i];long long left = target * i - s[i]; // 蓝色面积long long right = s[m] - s[i] - target * (m - i); // 绿色面积ans[target] = left + right;}}return ans;}};"}
{"task_id": "cpp/25", "content": "\nNote: If the maximum difference amongst all the pairs is 0, please return 0.\n\"\"\"\n\nclass Solution:\n    def minimizeMax(self, nums: List[int], p: int) -> int:\n        # 题目的意思就是寻找最小窗口,所以直接二分即可\n        # 二分做法就是找符合题意的最大差值,其实我们不需要每次都找出一个值试一下看看能不能找到答案,只需要找出区间内的最大值\n        # 在区间内选k个数字,看看能不能找到满足题意的答案,因为题目的意思就是要求最小的最大值\n        # 所以我们找区间内的最值和最大值,那么最大值的区间是0 ~ max(nums),因为我们不需要考虑0和nums中最大的一个数字\n        # 最值的区间是min(nums) ~ max(nums),也就是需要找出最大差值\n        # 但是需要注意的是这里nums这个区间有重复数字,如果选了max(nums)的数字一定不能选min(nums)中一样的数字,\n        # 所以我们需要在选中两个不同的数字的时候才满足要求,否则选的数字会重复,不会出现重复的数字\n\n        left = 0\n        right = max(nums)\n\n        while left + 1 < right:\n            mid = left + (right - left) // 2\n            if self.check(nums, mid):\n                right = mid\n            else:\n                left = mid\n        return right\n\n    def check(self, nums, value):\n        # 在nums这个区间选取k个数字,看看能不能找到满足题意的最大值\n        # 比如,我们把nums[0]和nums[1]作为区间里的最大值,选两个数字,能满足题意吗?因为我们知道0 1之间最多只有2个数字,所以不能选第三个数字\n        # 所以我们需要每次都试一下看能不能在区间里选出k个数字,能够满足题意的话,那么就往右扩容,否则往左缩小\n        # 我们需要记录选出的k个数字,如果这k个数字", "groundtruth": "class Solution {public:int minimizeMax(vector<int> &nums, int p) {sort(nums.begin(), nums.end());int left = -1, right = nums.back() - nums[0]; // 开区间while (left + 1 < right) { // 开区间int mid = left + (right - left) / 2, cnt = 0;for (int i = 0; i < nums.size() - 1; ++i)if (nums[i + 1] - nums[i] <= mid) { // 都选++cnt;++i;}(cnt >= p ? right : left) = mid;}return right;}};"}
{"task_id": "cpp/26", "content": "\nInput: grid = [[1,2,1,1,1],[2,1,1,2,1],[1,1,2,2,1]]\nOutput: 2\nExplanation: You can visit (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) and so on to reach (2, 2). It takes 2 steps to reach the bottom-right corner.\n\nInput: grid = [[1,2],[1,2]]\nOutput: 2\nExplanation: You can visit (0, 0) -> (1, 1) -> (2, 1) -> (0, 0) and so on to reach (1, 1) after one step. Similarly, you can visit (1, 0) -> (2, 1) -> (1, 0) -> (0, 0) and so on to reach (0, 0). These two paths come to (2, 1) after 2 steps. In total, there are 2 steps to reach the bottom-right cell (1, 1). Hence, the total number of steps required is 2.\n*/\n// https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid/\n#include <bits/stdc++.h>\nusing namespace std;\n\nint minimumVisitedCells(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    vector<vector<int>> dist(m, vector<int>(n, -1));\n    dist[0][0] = 1;\n    vector<priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>>> row(m), col(n);\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            while (!row[i].empty() && row[i].top().second + grid[i][row[i].top().second] < j) {\n                row[i].pop();\n            }\n            if", "groundtruth": "class Solution {public:int minimumVisitedCells(vector<vector<int>>& grid) {int m = grid.size(), n = grid[0].size();vector<vector<int>> dist(m, vector<int>(n, -1));dist[0][0] = 1;vector<priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>>> row(m), col(n);auto update = [](int& x, int y) {if (x == -1 || y < x) {x = y;}};for (int i = 0; i < m; ++i) {for (int j = 0; j < n; ++j) {while (!row[i].empty() && row[i].top().second + grid[i][row[i].top().second] < j) {row[i].pop();}if (!row[i].empty()) {update(dist[i][j], dist[i][row[i].top().second] + 1);}while (!col[j].empty() && col[j].top().second + grid[col[j].top().second][j] < i) {col[j].pop();}if (!col[j].empty()) {update(dist[i][j], dist[col[j].top().second][j] + 1);}if (dist[i][j] != -1) {row[i].emplace(dist[i][j], j);col[j].emplace(dist[i][j], i);}}}return dist[m - 1][n - 1];}};"}
{"task_id": "cpp/27", "content": "\n\n*/\nclass Solution {\npublic:\n    vector<vector<int>> findMatrix(vector<int>& nums) {\n        unordered_map<int,int> m;\n        int ans=0;\n        for(int i=0;i<nums.size();i++){\n            m[nums[i]]++;\n            ans=max(ans,m[nums[i]]);\n        }\n        vector<vector<int>> a(ans);\n        int ind=0;\n        for(int i=0;i<nums.size();i++){\n            a[ind++].push_back(nums[i]);\n            m[nums[i]]--;\n            if(m[nums[i]]==0)\n                m.erase(nums[i]);\n        }\n        return a;\n    }\n};", "groundtruth": "class Solution {public:vector<vector<int>> findMatrix(vector<int> &nums) {unordered_map<int, int> cnt;for (int x: nums) ++cnt[x];vector<vector<int>> ans;while (!cnt.empty()) {vector<int> row;for (auto it = cnt.begin(); it != cnt.end();) {row.push_back(it->first);if (--it->second == 0) it = cnt.erase(it);else ++it;}ans.push_back(row);}return ans;}};"}
{"task_id": "cpp/28", "content": " */\npublic int miceAndCheese(int[] reward1, int[] reward2, int k) {\n    int n = reward1.length;\n    int[] diffs = new int[n];\n    for (int i = 0; i < n; i++) {\n        diffs[i] = reward1[i] - reward2[i];\n    }\n\n    Arrays.sort(diffs);\n    int ans = 0;\n    for (int i = 0; i < n - k; i++) {\n        ans += diffs[i];\n    }\n    for (int i = n - k; i < n; i++) {\n        ans += reward1[i];\n    }\n\n    return ans;\n}", "groundtruth": "class Solution {public:int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {int ans = 0;int n = reward1.size();vector<int> diffs(n);for (int i = 0; i < n; i++) {ans += reward2[i];diffs[i] = reward1[i] - reward2[i];}sort(diffs.begin(), diffs.end());for (int i = 1; i <= k; i++) {ans += diffs[n - i];}return ans;}};"}
{"task_id": "cpp/29", "content": "'''\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        sets = [set(), set()]\n        for i in range(n):\n            sets[i % 2].add(i)\n        sets[0].add(n)\n        sets[1].add(n)\n\n        ans = [-1] * n\n        q = {p}\n\n        for step in range(0, len(q)):\n            nq = []\n            for i in q:\n                ans[i] = step\n                mn = max(i - k + 1, k - i - 1)\n                for j in sets[mn % 2]:\n                    nq.append(j)\n            q = nq\n\n        return ans", "groundtruth": "class Solution {public:vector<int> minReverseOperations(int n, int p, vector<int> &banned, int k) {unordered_set<int> ban{banned.begin(), banned.end()};set<int> sets[2];for (int i = 0; i < n; ++i)if (i != p && !ban.count(i))sets[i % 2].insert(i);sets[0].insert(n);sets[1].insert(n); // 哨兵vector<int> ans(n, -1);vector<int> q = {p};for (int step = 0; !q.empty(); ++step) {vector<int> nq;for (int i: q) {ans[i] = step;// 从 mn 到 mx 的所有位置都可以翻转到int mn = max(i - k + 1, k - i - 1);int mx = min(i + k - 1, n * 2 - k - i - 1);auto &s = sets[mn % 2];for (auto it = s.lower_bound(mn); *it <= mx; it = s.erase(it))nq.push_back(*it);}q = move(nq);}return ans;}};"}